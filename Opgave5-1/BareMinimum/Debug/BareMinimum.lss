
BareMinimum.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002e4  00800200  000041c8  0000425c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000041c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ca  008004e4  008004e4  00004540  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004540  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004570  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c78  00000000  00000000  000045b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000213af  00000000  00000000  00005228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000045a4  00000000  00000000  000265d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000882e  00000000  00000000  0002ab7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000035a8  00000000  00000000  000333ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000070e6  00000000  00000000  00036954  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001a0d5  00000000  00000000  0003da3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f40  00000000  00000000  00057b0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1c c4       	rjmp	.+2104   	; 0x83a <__dtors_end>
       2:	00 00       	nop
       4:	4b c4       	rjmp	.+2198   	; 0x89c <__bad_interrupt>
       6:	00 00       	nop
       8:	49 c4       	rjmp	.+2194   	; 0x89c <__bad_interrupt>
       a:	00 00       	nop
       c:	47 c4       	rjmp	.+2190   	; 0x89c <__bad_interrupt>
       e:	00 00       	nop
      10:	45 c4       	rjmp	.+2186   	; 0x89c <__bad_interrupt>
      12:	00 00       	nop
      14:	43 c4       	rjmp	.+2182   	; 0x89c <__bad_interrupt>
      16:	00 00       	nop
      18:	41 c4       	rjmp	.+2178   	; 0x89c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3f c4       	rjmp	.+2174   	; 0x89c <__bad_interrupt>
      1e:	00 00       	nop
      20:	3d c4       	rjmp	.+2170   	; 0x89c <__bad_interrupt>
      22:	00 00       	nop
      24:	3b c4       	rjmp	.+2166   	; 0x89c <__bad_interrupt>
      26:	00 00       	nop
      28:	39 c4       	rjmp	.+2162   	; 0x89c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	37 c4       	rjmp	.+2158   	; 0x89c <__bad_interrupt>
      2e:	00 00       	nop
      30:	35 c4       	rjmp	.+2154   	; 0x89c <__bad_interrupt>
      32:	00 00       	nop
      34:	33 c4       	rjmp	.+2150   	; 0x89c <__bad_interrupt>
      36:	00 00       	nop
      38:	31 c4       	rjmp	.+2146   	; 0x89c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2f c4       	rjmp	.+2142   	; 0x89c <__bad_interrupt>
      3e:	00 00       	nop
      40:	2d c4       	rjmp	.+2138   	; 0x89c <__bad_interrupt>
      42:	00 00       	nop
      44:	2b c4       	rjmp	.+2134   	; 0x89c <__bad_interrupt>
      46:	00 00       	nop
      48:	29 c4       	rjmp	.+2130   	; 0x89c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	27 c4       	rjmp	.+2126   	; 0x89c <__bad_interrupt>
      4e:	00 00       	nop
      50:	25 c4       	rjmp	.+2122   	; 0x89c <__bad_interrupt>
      52:	00 00       	nop
      54:	23 c4       	rjmp	.+2118   	; 0x89c <__bad_interrupt>
      56:	00 00       	nop
      58:	21 c4       	rjmp	.+2114   	; 0x89c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 14 19 	jmp	0x3228	; 0x3228 <__vector_23>
      60:	1d c4       	rjmp	.+2106   	; 0x89c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 98 17 	jmp	0x2f30	; 0x2f30 <__vector_25>
      68:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__vector_26>
      6c:	17 c4       	rjmp	.+2094   	; 0x89c <__bad_interrupt>
      6e:	00 00       	nop
      70:	15 c4       	rjmp	.+2090   	; 0x89c <__bad_interrupt>
      72:	00 00       	nop
      74:	13 c4       	rjmp	.+2086   	; 0x89c <__bad_interrupt>
      76:	00 00       	nop
      78:	11 c4       	rjmp	.+2082   	; 0x89c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0f c4       	rjmp	.+2078   	; 0x89c <__bad_interrupt>
      7e:	00 00       	nop
      80:	0d c4       	rjmp	.+2074   	; 0x89c <__bad_interrupt>
      82:	00 00       	nop
      84:	0b c4       	rjmp	.+2070   	; 0x89c <__bad_interrupt>
      86:	00 00       	nop
      88:	09 c4       	rjmp	.+2066   	; 0x89c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	07 c4       	rjmp	.+2062   	; 0x89c <__bad_interrupt>
      8e:	00 00       	nop
      90:	05 c4       	rjmp	.+2058   	; 0x89c <__bad_interrupt>
      92:	00 00       	nop
      94:	03 c4       	rjmp	.+2054   	; 0x89c <__bad_interrupt>
      96:	00 00       	nop
      98:	01 c4       	rjmp	.+2050   	; 0x89c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__vector_39>
      a0:	fd c3       	rjmp	.+2042   	; 0x89c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	fb c3       	rjmp	.+2038   	; 0x89c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f9 c3       	rjmp	.+2034   	; 0x89c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	f7 c3       	rjmp	.+2030   	; 0x89c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f5 c3       	rjmp	.+2026   	; 0x89c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	f3 c3       	rjmp	.+2022   	; 0x89c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	f1 c3       	rjmp	.+2018   	; 0x89c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ef c3       	rjmp	.+2014   	; 0x89c <__bad_interrupt>
      be:	00 00       	nop
      c0:	ed c3       	rjmp	.+2010   	; 0x89c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	eb c3       	rjmp	.+2006   	; 0x89c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e9 c3       	rjmp	.+2002   	; 0x89c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e7 c3       	rjmp	.+1998   	; 0x89c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e5 c3       	rjmp	.+1994   	; 0x89c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	e3 c3       	rjmp	.+1990   	; 0x89c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	e1 c3       	rjmp	.+1986   	; 0x89c <__bad_interrupt>
      da:	00 00       	nop
      dc:	df c3       	rjmp	.+1982   	; 0x89c <__bad_interrupt>
      de:	00 00       	nop
      e0:	dd c3       	rjmp	.+1978   	; 0x89c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	4f 1a       	sub	r4, r31
      e6:	52 1a       	sub	r5, r18
      e8:	41 1a       	sub	r4, r17
      ea:	45 1a       	sub	r4, r21
      ec:	4b 1a       	sub	r4, r27
      ee:	89 1a       	sub	r8, r25
      f0:	56 1a       	sub	r5, r22
      f2:	5a 1a       	sub	r5, r26
      f4:	60 1a       	sub	r6, r16
      f6:	64 1a       	sub	r6, r20
      f8:	68 1a       	sub	r6, r24
      fa:	6e 1a       	sub	r6, r30
      fc:	72 1a       	sub	r7, r18
      fe:	76 1a       	sub	r7, r22
     100:	89 1a       	sub	r8, r25
     102:	7c 1a       	sub	r7, r28
     104:	80 1a       	sub	r8, r16
     106:	84 1a       	sub	r8, r20

00000108 <__trampolines_end>:
     108:	00 40       	sbci	r16, 0x00	; 0
     10a:	7a 10       	cpse	r7, r10
     10c:	f3 5a       	subi	r31, 0xA3	; 163
     10e:	00 a0       	ldd	r0, Z+32	; 0x20
     110:	72 4e       	sbci	r23, 0xE2	; 226
     112:	18 09       	sbc	r17, r8
     114:	00 10       	cpse	r0, r0
     116:	a5 d4       	rcall	.+2378   	; 0xa62 <loop+0xd8>
     118:	e8 00       	.word	0x00e8	; ????
     11a:	00 e8       	ldi	r16, 0x80	; 128
     11c:	76 48       	sbci	r23, 0x86	; 134
     11e:	17 00       	.word	0x0017	; ????
     120:	00 e4       	ldi	r16, 0x40	; 64
     122:	0b 54       	subi	r16, 0x4B	; 75
     124:	02 00       	.word	0x0002	; ????
     126:	00 ca       	rjmp	.-3072   	; 0xfffff528 <__eeprom_end+0xff7ef528>
     128:	9a 3b       	cpi	r25, 0xBA	; 186
     12a:	00 00       	nop
     12c:	00 e1       	ldi	r16, 0x10	; 16
     12e:	f5 05       	cpc	r31, r5
     130:	00 00       	nop
     132:	80 96       	adiw	r24, 0x20	; 32
     134:	98 00       	.word	0x0098	; ????
     136:	00 00       	nop
     138:	40 42       	sbci	r20, 0x20	; 32
     13a:	0f 00       	.word	0x000f	; ????
     13c:	00 00       	nop
     13e:	a0 86       	std	Z+8, r10	; 0x08
     140:	01 00       	.word	0x0001	; ????
     142:	00 00       	nop
     144:	10 27       	eor	r17, r16
     146:	00 00       	nop
     148:	00 00       	nop
     14a:	e8 03       	fmulsu	r22, r16
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	64 00       	.word	0x0064	; ????
     152:	00 00       	nop
     154:	00 00       	nop
     156:	0a 00       	.word	0x000a	; ????
     158:	00 00       	nop
     15a:	00 00       	nop
     15c:	01 00       	.word	0x0001	; ????
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	2c 76       	andi	r18, 0x6C	; 108
     164:	d8 88       	ldd	r13, Y+16	; 0x10
     166:	dc 67       	ori	r29, 0x7C	; 124
     168:	4f 08       	sbc	r4, r15
     16a:	23 df       	rcall	.-442    	; 0xffffffb2 <__eeprom_end+0xff7effb2>
     16c:	c1 df       	rcall	.-126    	; 0xf0 <__SREG__+0xb1>
     16e:	ae 59       	subi	r26, 0x9E	; 158
     170:	e1 b1       	in	r30, 0x01	; 1
     172:	b7 96       	adiw	r30, 0x27	; 39
     174:	e5 e3       	ldi	r30, 0x35	; 53
     176:	e4 53       	subi	r30, 0x34	; 52
     178:	c6 3a       	cpi	r28, 0xA6	; 166
     17a:	e6 51       	subi	r30, 0x16	; 22
     17c:	99 76       	andi	r25, 0x69	; 105
     17e:	96 e8       	ldi	r25, 0x86	; 134
     180:	e6 c2       	rjmp	.+1484   	; 0x74e <digital_pin_to_timer_PGM+0x3c>
     182:	84 26       	eor	r8, r20
     184:	eb 89       	ldd	r30, Y+19	; 0x13
     186:	8c 9b       	sbis	0x11, 4	; 17
     188:	62 ed       	ldi	r22, 0xD2	; 210
     18a:	40 7c       	andi	r20, 0xC0	; 192
     18c:	6f fc       	.word	0xfc6f	; ????
     18e:	ef bc       	out	0x2f, r14	; 47
     190:	9c 9f       	mul	r25, r28
     192:	40 f2       	brcs	.-112    	; 0x124 <__trampolines_end+0x1c>
     194:	ba a5       	ldd	r27, Y+42	; 0x2a
     196:	6f a5       	ldd	r22, Y+47	; 0x2f
     198:	f4 90       	lpm	r15, Z
     19a:	05 5a       	subi	r16, 0xA5	; 165
     19c:	2a f7       	brpl	.-54     	; 0x168 <__trampolines_end+0x60>
     19e:	5c 93       	st	X, r21
     1a0:	6b 6c       	ori	r22, 0xCB	; 203
     1a2:	f9 67       	ori	r31, 0x79	; 121
     1a4:	6d c1       	rjmp	.+730    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     1a6:	1b fc       	.word	0xfc1b	; ????
     1a8:	e0 e4       	ldi	r30, 0x40	; 64
     1aa:	0d 47       	sbci	r16, 0x7D	; 125
     1ac:	fe f5       	brtc	.+126    	; 0x22c <_ZL4font+0x2a>
     1ae:	20 e6       	ldi	r18, 0x60	; 96
     1b0:	b5 00       	.word	0x00b5	; ????
     1b2:	d0 ed       	ldi	r29, 0xD0	; 208
     1b4:	90 2e       	mov	r9, r16
     1b6:	03 00       	.word	0x0003	; ????
     1b8:	94 35       	cpi	r25, 0x54	; 84
     1ba:	77 05       	cpc	r23, r7
     1bc:	00 80       	ld	r0, Z
     1be:	84 1e       	adc	r8, r20
     1c0:	08 00       	.word	0x0008	; ????
     1c2:	00 20       	and	r0, r0
     1c4:	4e 0a       	sbc	r4, r30
     1c6:	00 00       	nop
     1c8:	00 c8       	rjmp	.-4096   	; 0xfffff1ca <__eeprom_end+0xff7ef1ca>
     1ca:	0c 33       	cpi	r16, 0x3C	; 60
     1cc:	33 33       	cpi	r19, 0x33	; 51
     1ce:	33 0f       	add	r19, r19
     1d0:	98 6e       	ori	r25, 0xE8	; 232
     1d2:	12 83       	std	Z+2, r17	; 0x02
     1d4:	11 41       	sbci	r17, 0x11	; 17
     1d6:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1d8:	21 14       	cp	r2, r1
     1da:	89 3b       	cpi	r24, 0xB9	; 185
     1dc:	e6 55       	subi	r30, 0x56	; 86
     1de:	16 cf       	rjmp	.-468    	; 0xc <__FUSE_REGION_LENGTH__+0x9>
     1e0:	fe e6       	ldi	r31, 0x6E	; 110
     1e2:	db 18       	sub	r13, r11
     1e4:	d1 84       	ldd	r13, Z+9	; 0x09
     1e6:	4b 38       	cpi	r20, 0x8B	; 139
     1e8:	1b f7       	brvc	.-58     	; 0x1b0 <__trampolines_end+0xa8>
     1ea:	7c 1d       	adc	r23, r12
     1ec:	90 1d       	adc	r25, r0
     1ee:	a4 bb       	out	0x14, r26	; 20
     1f0:	e4 24       	eor	r14, r4
     1f2:	20 32       	cpi	r18, 0x20	; 32
     1f4:	84 72       	andi	r24, 0x24	; 36
     1f6:	5e 22       	and	r5, r30
     1f8:	81 00       	.word	0x0081	; ????
     1fa:	c9 f1       	breq	.+114    	; 0x26e <_ZL4font+0x6c>
     1fc:	24 ec       	ldi	r18, 0xC4	; 196
     1fe:	a1 e5       	ldi	r26, 0x51	; 81
     200:	3d 27       	eor	r19, r29

00000202 <_ZL4font>:
     202:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     212:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     222:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     232:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     242:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     252:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     262:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     272:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     282:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     292:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     2a2:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     2b2:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     2c2:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     2d2:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     2e2:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     2f2:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     302:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     312:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     322:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     332:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     342:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     352:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     362:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     372:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     382:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     392:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     3a2:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     3b2:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     3c2:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     3d2:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     3e2:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     3f2:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     402:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     412:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     422:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     432:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     442:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     452:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     462:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     472:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     482:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     492:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     4a2:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     4b2:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     4c2:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     4d2:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     4e2:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     4f2:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     502:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     512:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     522:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     532:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     542:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     552:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     562:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     572:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     582:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     592:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     5a2:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     5b2:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     5c2:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     5d2:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     5e2:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     5f2:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     602:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     612:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     622:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     632:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     642:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     652:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     662:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     672:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     682:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     692:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     6a2:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     6b2:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     6c2:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     6d2:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     6e2:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     6f2:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000702 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE8postmask>:
     702:	00 01 03 07 0f 1f 3f 7f                             ......?.

0000070a <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE7premask>:
     70a:	00 80 c0 e0 f0 f8 fc fe                             ........

00000712 <digital_pin_to_timer_PGM>:
     712:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     73e:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000758 <digital_pin_to_bit_mask_PGM>:
     758:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     768:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     778:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     788:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     798:	04 08 10 20 40 80                                   ... @.

0000079e <digital_pin_to_port_PGM>:
     79e:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     7ae:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     7be:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     7ce:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     7de:	0b 0b 0b 0b 0b 0b                                   ......

000007e4 <port_to_input_PGM>:
     7e4:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     7f4:	00 01 00 00 03 01 06 01 09 01                       ..........

000007fe <port_to_output_PGM>:
     7fe:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     80e:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000818 <port_to_mode_PGM>:
     818:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     828:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000832 <__ctors_start>:
     832:	3b 05       	cpc	r19, r11
     834:	d2 14       	cp	r13, r2
     836:	00 18       	sub	r0, r0

00000838 <__ctors_end>:
     838:	6a 05       	cpc	r22, r10

0000083a <__dtors_end>:
     83a:	11 24       	eor	r1, r1
     83c:	1f be       	out	0x3f, r1	; 63
     83e:	cf ef       	ldi	r28, 0xFF	; 255
     840:	d1 e2       	ldi	r29, 0x21	; 33
     842:	de bf       	out	0x3e, r29	; 62
     844:	cd bf       	out	0x3d, r28	; 61
     846:	00 e0       	ldi	r16, 0x00	; 0
     848:	0c bf       	out	0x3c, r16	; 60

0000084a <__do_copy_data>:
     84a:	14 e0       	ldi	r17, 0x04	; 4
     84c:	a0 e0       	ldi	r26, 0x00	; 0
     84e:	b2 e0       	ldi	r27, 0x02	; 2
     850:	e8 ec       	ldi	r30, 0xC8	; 200
     852:	f1 e4       	ldi	r31, 0x41	; 65
     854:	00 e0       	ldi	r16, 0x00	; 0
     856:	0b bf       	out	0x3b, r16	; 59
     858:	02 c0       	rjmp	.+4      	; 0x85e <__do_copy_data+0x14>
     85a:	07 90       	elpm	r0, Z+
     85c:	0d 92       	st	X+, r0
     85e:	a4 3e       	cpi	r26, 0xE4	; 228
     860:	b1 07       	cpc	r27, r17
     862:	d9 f7       	brne	.-10     	; 0x85a <__do_copy_data+0x10>

00000864 <__do_clear_bss>:
     864:	26 e0       	ldi	r18, 0x06	; 6
     866:	a4 ee       	ldi	r26, 0xE4	; 228
     868:	b4 e0       	ldi	r27, 0x04	; 4
     86a:	01 c0       	rjmp	.+2      	; 0x86e <.do_clear_bss_start>

0000086c <.do_clear_bss_loop>:
     86c:	1d 92       	st	X+, r1

0000086e <.do_clear_bss_start>:
     86e:	ae 3a       	cpi	r26, 0xAE	; 174
     870:	b2 07       	cpc	r27, r18
     872:	e1 f7       	brne	.-8      	; 0x86c <.do_clear_bss_loop>

00000874 <__do_global_ctors>:
     874:	14 e0       	ldi	r17, 0x04	; 4
     876:	cc e1       	ldi	r28, 0x1C	; 28
     878:	d4 e0       	ldi	r29, 0x04	; 4
     87a:	00 e0       	ldi	r16, 0x00	; 0
     87c:	06 c0       	rjmp	.+12     	; 0x88a <__do_global_ctors+0x16>
     87e:	21 97       	sbiw	r28, 0x01	; 1
     880:	01 09       	sbc	r16, r1
     882:	80 2f       	mov	r24, r16
     884:	fe 01       	movw	r30, r28
     886:	0e 94 49 1c 	call	0x3892	; 0x3892 <__tablejump2__>
     88a:	c9 31       	cpi	r28, 0x19	; 25
     88c:	d1 07       	cpc	r29, r17
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	08 07       	cpc	r16, r24
     892:	a9 f7       	brne	.-22     	; 0x87e <__do_global_ctors+0xa>
     894:	0e 94 2e 18 	call	0x305c	; 0x305c <main>
     898:	0c 94 d3 20 	jmp	0x41a6	; 0x41a6 <__do_global_dtors>

0000089c <__bad_interrupt>:
     89c:	b1 cb       	rjmp	.-2206   	; 0x0 <__vectors>

0000089e <setup>:
	Serial.print(" / ");
	Serial.print(mpu.getGyroOffsetY());
	Serial.print(" / ");
	Serial.println(mpu.getGyroOffsetZ());
	
	Serial.println();
     89e:	26 e0       	ldi	r18, 0x06	; 6
     8a0:	40 e8       	ldi	r20, 0x80	; 128
     8a2:	55 e2       	ldi	r21, 0x25	; 37
     8a4:	60 e0       	ldi	r22, 0x00	; 0
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	84 e0       	ldi	r24, 0x04	; 4
     8aa:	96 e0       	ldi	r25, 0x06	; 6
     8ac:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <_ZN14HardwareSerial5beginEmh>
     8b0:	8e ea       	ldi	r24, 0xAE	; 174
     8b2:	95 e0       	ldi	r25, 0x05	; 5
     8b4:	0e 94 a1 14 	call	0x2942	; 0x2942 <_ZN7TwoWire5beginEv>
     8b8:	67 e3       	ldi	r22, 0x37	; 55
     8ba:	84 ee       	ldi	r24, 0xE4	; 228
     8bc:	94 e0       	ldi	r25, 0x04	; 4
     8be:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <_ZN3DHT5beginEh>

000008c2 <_Z10I2CScannerv>:
}

void I2CScanner(){
     8c2:	0f 93       	push	r16
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
	byte error, address;
	int nDevices;
	
	Serial.println("Scanning...");
     8c8:	6d ed       	ldi	r22, 0xDD	; 221
     8ca:	73 e0       	ldi	r23, 0x03	; 3
     8cc:	84 e0       	ldi	r24, 0x04	; 4
     8ce:	96 e0       	ldi	r25, 0x06	; 6
     8d0:	0e 94 9b 18 	call	0x3136	; 0x3136 <_ZN5Print7printlnEPKc>
	
	nDevices = 0;
     8d4:	00 e0       	ldi	r16, 0x00	; 0
     8d6:	10 e0       	ldi	r17, 0x00	; 0
	for(address = 1; address < 127; address++ )
     8d8:	c1 e0       	ldi	r28, 0x01	; 1
	{
		// The i2c_scanner uses the return value of
		// the Write.endTransmisstion to see if
		// a device did acknowledge to the address.
		Wire.beginTransmission(address);
     8da:	6c 2f       	mov	r22, r28
     8dc:	8e ea       	ldi	r24, 0xAE	; 174
     8de:	95 e0       	ldi	r25, 0x05	; 5
     8e0:	0e 94 b3 14 	call	0x2966	; 0x2966 <_ZN7TwoWire17beginTransmissionEh>
		error = Wire.endTransmission();
     8e4:	8e ea       	ldi	r24, 0xAE	; 174
     8e6:	95 e0       	ldi	r25, 0x05	; 5
     8e8:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_ZN7TwoWire15endTransmissionEv>
		
		if (error == 0)
     8ec:	81 11       	cpse	r24, r1
     8ee:	1e c0       	rjmp	.+60     	; 0x92c <_Z10I2CScannerv+0x6a>
		{
			Serial.print("I2C device found at address 0x");
     8f0:	69 ee       	ldi	r22, 0xE9	; 233
     8f2:	73 e0       	ldi	r23, 0x03	; 3
     8f4:	84 e0       	ldi	r24, 0x04	; 4
     8f6:	96 e0       	ldi	r25, 0x06	; 6
     8f8:	0e 94 87 18 	call	0x310e	; 0x310e <_ZN5Print5printEPKc>
			if (address<16)
     8fc:	c0 31       	cpi	r28, 0x10	; 16
     8fe:	30 f4       	brcc	.+12     	; 0x90c <_Z10I2CScannerv+0x4a>
			Serial.print("0");
     900:	68 e0       	ldi	r22, 0x08	; 8
     902:	74 e0       	ldi	r23, 0x04	; 4
     904:	84 e0       	ldi	r24, 0x04	; 4
     906:	96 e0       	ldi	r25, 0x06	; 6
     908:	0e 94 87 18 	call	0x310e	; 0x310e <_ZN5Print5printEPKc>
			Serial.print(address,HEX);
     90c:	40 e1       	ldi	r20, 0x10	; 16
     90e:	50 e0       	ldi	r21, 0x00	; 0
     910:	6c 2f       	mov	r22, r28
     912:	84 e0       	ldi	r24, 0x04	; 4
     914:	96 e0       	ldi	r25, 0x06	; 6
     916:	0e 94 fe 18 	call	0x31fc	; 0x31fc <_ZN5Print5printEhi>
			Serial.println("  !");
     91a:	6a e0       	ldi	r22, 0x0A	; 10
     91c:	74 e0       	ldi	r23, 0x04	; 4
     91e:	84 e0       	ldi	r24, 0x04	; 4
     920:	96 e0       	ldi	r25, 0x06	; 6
     922:	0e 94 9b 18 	call	0x3136	; 0x3136 <_ZN5Print7printlnEPKc>
			
			nDevices++;
     926:	0f 5f       	subi	r16, 0xFF	; 255
     928:	1f 4f       	sbci	r17, 0xFF	; 255
     92a:	17 c0       	rjmp	.+46     	; 0x95a <_Z10I2CScannerv+0x98>
		}
		else if (error==4)
     92c:	84 30       	cpi	r24, 0x04	; 4
     92e:	a9 f4       	brne	.+42     	; 0x95a <_Z10I2CScannerv+0x98>
		{
			Serial.print("Unknown error at address 0x");
     930:	6e e0       	ldi	r22, 0x0E	; 14
     932:	74 e0       	ldi	r23, 0x04	; 4
     934:	84 e0       	ldi	r24, 0x04	; 4
     936:	96 e0       	ldi	r25, 0x06	; 6
     938:	0e 94 87 18 	call	0x310e	; 0x310e <_ZN5Print5printEPKc>
			if (address<16)
     93c:	c0 31       	cpi	r28, 0x10	; 16
     93e:	30 f4       	brcc	.+12     	; 0x94c <_Z10I2CScannerv+0x8a>
			Serial.print("0");
     940:	68 e0       	ldi	r22, 0x08	; 8
     942:	74 e0       	ldi	r23, 0x04	; 4
     944:	84 e0       	ldi	r24, 0x04	; 4
     946:	96 e0       	ldi	r25, 0x06	; 6
     948:	0e 94 87 18 	call	0x310e	; 0x310e <_ZN5Print5printEPKc>
			Serial.println(address,HEX);
     94c:	40 e1       	ldi	r20, 0x10	; 16
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	6c 2f       	mov	r22, r28
     952:	84 e0       	ldi	r24, 0x04	; 4
     954:	96 e0       	ldi	r25, 0x06	; 6
     956:	0e 94 04 19 	call	0x3208	; 0x3208 <_ZN5Print7printlnEhi>
	int nDevices;
	
	Serial.println("Scanning...");
	
	nDevices = 0;
	for(address = 1; address < 127; address++ )
     95a:	cf 5f       	subi	r28, 0xFF	; 255
     95c:	cf 37       	cpi	r28, 0x7F	; 127
     95e:	09 f0       	breq	.+2      	; 0x962 <_Z10I2CScannerv+0xa0>
     960:	bc cf       	rjmp	.-136    	; 0x8da <_Z10I2CScannerv+0x18>
			if (address<16)
			Serial.print("0");
			Serial.println(address,HEX);
		}
	}
	if (nDevices == 0)
     962:	01 2b       	or	r16, r17
     964:	19 f4       	brne	.+6      	; 0x96c <_Z10I2CScannerv+0xaa>
	Serial.println("No I2C devices found\n");
     966:	6a e2       	ldi	r22, 0x2A	; 42
     968:	74 e0       	ldi	r23, 0x04	; 4
     96a:	02 c0       	rjmp	.+4      	; 0x970 <_Z10I2CScannerv+0xae>
	else
	Serial.println("done\n");
     96c:	60 e4       	ldi	r22, 0x40	; 64
     96e:	74 e0       	ldi	r23, 0x04	; 4
     970:	84 e0       	ldi	r24, 0x04	; 4
     972:	96 e0       	ldi	r25, 0x06	; 6
     974:	0e 94 9b 18 	call	0x3136	; 0x3136 <_ZN5Print7printlnEPKc>
	
	delay(5000);           // wait 5 seconds for next scan
     978:	68 e8       	ldi	r22, 0x88	; 136
     97a:	73 e1       	ldi	r23, 0x13	; 19
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
	if (nDevices == 0)
	Serial.println("No I2C devices found\n");
	else
	Serial.println("done\n");
	
	delay(5000);           // wait 5 seconds for next scan
     986:	0c 94 8f 19 	jmp	0x331e	; 0x331e <delay>

0000098a <loop>:
  dht.begin();
		
}

void loop()
{
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	68 97       	sbiw	r28, 0x18	; 24
     994:	0f b6       	in	r0, 0x3f	; 63
     996:	f8 94       	cli
     998:	de bf       	out	0x3e, r29	; 62
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	cd bf       	out	0x3d, r28	; 61
	
String data = String("field1=" + String(dht.readTemperature()) + "&field2=" + String(dht.readHumidity()));
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	84 ee       	ldi	r24, 0xE4	; 228
     9a2:	94 e0       	ldi	r25, 0x04	; 4
     9a4:	0e 94 ba 10 	call	0x2174	; 0x2174 <_ZN3DHT12readHumidityEb>
     9a8:	ab 01       	movw	r20, r22
     9aa:	bc 01       	movw	r22, r24
     9ac:	22 e0       	ldi	r18, 0x02	; 2
     9ae:	ce 01       	movw	r24, r28
     9b0:	01 96       	adiw	r24, 0x01	; 1
     9b2:	0e 94 a4 1b 	call	0x3748	; 0x3748 <_ZN6StringC1Efh>
     9b6:	40 e0       	ldi	r20, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	84 ee       	ldi	r24, 0xE4	; 228
     9bc:	94 e0       	ldi	r25, 0x04	; 4
     9be:	0e 94 33 10 	call	0x2066	; 0x2066 <_ZN3DHT15readTemperatureEbb>
     9c2:	ab 01       	movw	r20, r22
     9c4:	bc 01       	movw	r22, r24
     9c6:	22 e0       	ldi	r18, 0x02	; 2
     9c8:	ce 01       	movw	r24, r28
     9ca:	0d 96       	adiw	r24, 0x0d	; 13
     9cc:	0e 94 a4 1b 	call	0x3748	; 0x3748 <_ZN6StringC1Efh>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
     9d0:	66 e4       	ldi	r22, 0x46	; 70
     9d2:	74 e0       	ldi	r23, 0x04	; 4
     9d4:	ce 01       	movw	r24, r28
     9d6:	07 96       	adiw	r24, 0x07	; 7
     9d8:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <_ZN6StringC1EPKc>
     9dc:	be 01       	movw	r22, r28
     9de:	63 5f       	subi	r22, 0xF3	; 243
     9e0:	7f 4f       	sbci	r23, 0xFF	; 255
     9e2:	ce 01       	movw	r24, r28
     9e4:	07 96       	adiw	r24, 0x07	; 7
     9e6:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <_ZplRK15StringSumHelperRK6String>
     9ea:	6e e4       	ldi	r22, 0x4E	; 78
     9ec:	74 e0       	ldi	r23, 0x04	; 4
     9ee:	0e 94 0f 1c 	call	0x381e	; 0x381e <_ZplRK15StringSumHelperPKc>
     9f2:	be 01       	movw	r22, r28
     9f4:	6f 5f       	subi	r22, 0xFF	; 255
     9f6:	7f 4f       	sbci	r23, 0xFF	; 255
     9f8:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <_ZplRK15StringSumHelperRK6String>
     9fc:	bc 01       	movw	r22, r24
     9fe:	ce 01       	movw	r24, r28
     a00:	43 96       	adiw	r24, 0x13	; 19
     a02:	0e 94 87 1b 	call	0x370e	; 0x370e <_ZN6StringC1ERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
     a06:	ce 01       	movw	r24, r28
     a08:	07 96       	adiw	r24, 0x07	; 7
     a0a:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <_ZN6StringD1Ev>
     a0e:	ce 01       	movw	r24, r28
     a10:	0d 96       	adiw	r24, 0x0d	; 13
     a12:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <_ZN6StringD1Ev>
     a16:	ce 01       	movw	r24, r28
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <_ZN6StringD1Ev>

I2CScanner();
     a1e:	51 df       	rcall	.-350    	; 0x8c2 <_Z10I2CScannerv>

Wire.beginTransmission(4); // transmit to device #4
     a20:	64 e0       	ldi	r22, 0x04	; 4
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	8e ea       	ldi	r24, 0xAE	; 174
     a26:	95 e0       	ldi	r25, 0x05	; 5
     a28:	0e 94 bd 14 	call	0x297a	; 0x297a <_ZN7TwoWire17beginTransmissionEi>
//Wire.write("x");        // sends five bytes
Wire.print(data);              // sends one byte
     a2c:	be 01       	movw	r22, r28
     a2e:	6d 5e       	subi	r22, 0xED	; 237
     a30:	7f 4f       	sbci	r23, 0xFF	; 255
     a32:	8e ea       	ldi	r24, 0xAE	; 174
     a34:	95 e0       	ldi	r25, 0x05	; 5
     a36:	0e 94 79 18 	call	0x30f2	; 0x30f2 <_ZN5Print5printERK6String>
Wire.endTransmission();    // stop transmitting
     a3a:	8e ea       	ldi	r24, 0xAE	; 174
     a3c:	95 e0       	ldi	r25, 0x05	; 5
     a3e:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <_ZN7TwoWire15endTransmissionEv>

Serial.println(data);
     a42:	be 01       	movw	r22, r28
     a44:	6d 5e       	subi	r22, 0xED	; 237
     a46:	7f 4f       	sbci	r23, 0xFF	; 255
     a48:	84 e0       	ldi	r24, 0x04	; 4
     a4a:	96 e0       	ldi	r25, 0x06	; 6
     a4c:	0e 94 8b 18 	call	0x3116	; 0x3116 <_ZN5Print7printlnERK6String>

//x++;
delay(1000);
     a50:	68 ee       	ldi	r22, 0xE8	; 232
     a52:	73 e0       	ldi	r23, 0x03	; 3
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 8f 19 	call	0x331e	; 0x331e <delay>
}

void loop()
{
	
String data = String("field1=" + String(dht.readTemperature()) + "&field2=" + String(dht.readHumidity()));
     a5c:	ce 01       	movw	r24, r28
     a5e:	43 96       	adiw	r24, 0x13	; 19
     a60:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <_ZN6StringD1Ev>
Serial.println(data);

//x++;
delay(1000);

}
     a64:	68 96       	adiw	r28, 0x18	; 24
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	f8 94       	cli
     a6a:	de bf       	out	0x3e, r29	; 62
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	cd bf       	out	0x3d, r28	; 61
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	08 95       	ret

00000a76 <_GLOBAL__sub_I_display>:
	Serial.println("No I2C devices found\n");
	else
	Serial.println("done\n");
	
	delay(5000);           // wait 5 seconds for next scan
     a76:	8f 92       	push	r8
     a78:	9f 92       	push	r9
     a7a:	af 92       	push	r10
     a7c:	bf 92       	push	r11
     a7e:	cf 92       	push	r12
     a80:	df 92       	push	r13
     a82:	ef 92       	push	r14
     a84:	ff 92       	push	r15
     a86:	0f 93       	push	r16
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET 4 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
     a88:	80 ea       	ldi	r24, 0xA0	; 160
     a8a:	88 2e       	mov	r8, r24
     a8c:	86 e8       	ldi	r24, 0x86	; 134
     a8e:	98 2e       	mov	r9, r24
     a90:	aa 24       	eor	r10, r10
     a92:	a3 94       	inc	r10
     a94:	b1 2c       	mov	r11, r1
     a96:	90 e8       	ldi	r25, 0x80	; 128
     a98:	c9 2e       	mov	r12, r25
     a9a:	9a e1       	ldi	r25, 0x1A	; 26
     a9c:	d9 2e       	mov	r13, r25
     a9e:	96 e0       	ldi	r25, 0x06	; 6
     aa0:	e9 2e       	mov	r14, r25
     aa2:	f1 2c       	mov	r15, r1
     aa4:	04 e0       	ldi	r16, 0x04	; 4
     aa6:	2e ea       	ldi	r18, 0xAE	; 174
     aa8:	35 e0       	ldi	r19, 0x05	; 5
     aaa:	40 e4       	ldi	r20, 0x40	; 64
     aac:	60 e8       	ldi	r22, 0x80	; 128
     aae:	87 ef       	ldi	r24, 0xF7	; 247
     ab0:	94 e0       	ldi	r25, 0x04	; 4
     ab2:	ca d6       	rcall	.+3476   	; 0x1848 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
DS3231 clock;
RTCDateTime dt;

MPU6050 mpu;

DHT dht(DHTPIN, DHTTYPE);
     ab4:	26 e0       	ldi	r18, 0x06	; 6
     ab6:	4b e0       	ldi	r20, 0x0B	; 11
     ab8:	62 e0       	ldi	r22, 0x02	; 2
     aba:	84 ee       	ldi	r24, 0xE4	; 228
     abc:	94 e0       	ldi	r25, 0x04	; 4
	Serial.println("No I2C devices found\n");
	else
	Serial.println("done\n");
	
	delay(5000);           // wait 5 seconds for next scan
     abe:	0f 91       	pop	r16
     ac0:	ff 90       	pop	r15
     ac2:	ef 90       	pop	r14
     ac4:	df 90       	pop	r13
     ac6:	cf 90       	pop	r12
     ac8:	bf 90       	pop	r11
     aca:	af 90       	pop	r10
     acc:	9f 90       	pop	r9
     ace:	8f 90       	pop	r8
DS3231 clock;
RTCDateTime dt;

MPU6050 mpu;

DHT dht(DHTPIN, DHTTYPE);
     ad0:	0c 94 c0 0e 	jmp	0x1d80	; 0x1d80 <_ZN3DHTC1Ehhh>

00000ad4 <_GLOBAL__sub_D_display>:
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET 4 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
     ad4:	87 ef       	ldi	r24, 0xF7	; 247
     ad6:	94 e0       	ldi	r25, 0x04	; 4
     ad8:	01 c7       	rjmp	.+3586   	; 0x18dc <_ZN16Adafruit_SSD1306D1Ev>

00000ada <_ZN8SPIClass16beginTransactionE11SPISettings>:

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
     ada:	20 91 39 05 	lds	r18, 0x0539	; 0x800539 <_ZN8SPIClass13interruptModeE>
     ade:	22 23       	and	r18, r18
     ae0:	99 f0       	breq	.+38     	; 0xb08 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
      uint8_t sreg = SREG;
     ae2:	4f b7       	in	r20, 0x3f	; 63
      noInterrupts();
     ae4:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
     ae6:	20 91 39 05 	lds	r18, 0x0539	; 0x800539 <_ZN8SPIClass13interruptModeE>
     aea:	21 30       	cpi	r18, 0x01	; 1
     aec:	59 f4       	brne	.+22     	; 0xb04 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
        interruptSave = SPI_AVR_EIMSK;
     aee:	2d b3       	in	r18, 0x1d	; 29
     af0:	20 93 37 05 	sts	0x0537, r18	; 0x800537 <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
     af4:	3d b3       	in	r19, 0x1d	; 29
     af6:	20 91 38 05 	lds	r18, 0x0538	; 0x800538 <_ZN8SPIClass13interruptMaskE>
     afa:	20 95       	com	r18
     afc:	23 23       	and	r18, r19
     afe:	2d bb       	out	0x1d, r18	; 29
        SREG = sreg;
     b00:	4f bf       	out	0x3f, r20	; 63
     b02:	02 c0       	rjmp	.+4      	; 0xb08 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
      } else
      #endif
      {
        interruptSave = sreg;
     b04:	40 93 37 05 	sts	0x0537, r20	; 0x800537 <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
     b08:	8c bd       	out	0x2c, r24	; 44
    SPSR = settings.spsr;
     b0a:	9d bd       	out	0x2d, r25	; 45
     b0c:	08 95       	ret

00000b0e <_ZN8SPIClass14endTransactionEv>:
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
     b0e:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <_ZN8SPIClass13interruptModeE>
     b12:	88 23       	and	r24, r24
     b14:	61 f0       	breq	.+24     	; 0xb2e <_ZN8SPIClass14endTransactionEv+0x20>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
     b16:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
     b18:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
     b1a:	20 91 39 05 	lds	r18, 0x0539	; 0x800539 <_ZN8SPIClass13interruptModeE>
     b1e:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <_ZN8SPIClass13interruptSaveE>
     b22:	21 30       	cpi	r18, 0x01	; 1
     b24:	19 f4       	brne	.+6      	; 0xb2c <_ZN8SPIClass14endTransactionEv+0x1e>
        SPI_AVR_EIMSK = interruptSave;
     b26:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
     b28:	9f bf       	out	0x3f, r25	; 63
     b2a:	08 95       	ret
      } else
      #endif
      {
        SREG = interruptSave;
     b2c:	8f bf       	out	0x3f, r24	; 63
     b2e:	08 95       	ret

00000b30 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	08 95       	ret

00000b36 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     b36:	08 95       	ret

00000b38 <_ZN12Adafruit_GFX9writeLineEiiiij>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size) {
  drawChar(x, y, c, color, bg, size, size);
}
     b38:	2f 92       	push	r2
     b3a:	3f 92       	push	r3
     b3c:	4f 92       	push	r4
     b3e:	5f 92       	push	r5
     b40:	6f 92       	push	r6
     b42:	7f 92       	push	r7
     b44:	8f 92       	push	r8
     b46:	9f 92       	push	r9
     b48:	af 92       	push	r10
     b4a:	bf 92       	push	r11
     b4c:	cf 92       	push	r12
     b4e:	df 92       	push	r13
     b50:	ef 92       	push	r14
     b52:	ff 92       	push	r15
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	00 d0       	rcall	.+0      	; 0xb5e <_ZN12Adafruit_GFX9writeLineEiiiij+0x26>
     b5e:	00 d0       	rcall	.+0      	; 0xb60 <_ZN12Adafruit_GFX9writeLineEiiiij+0x28>
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
     b64:	2c 01       	movw	r4, r24
     b66:	7e 83       	std	Y+6, r23	; 0x06
     b68:	6d 83       	std	Y+5, r22	; 0x05
     b6a:	6a 01       	movw	r12, r20
     b6c:	59 01       	movw	r10, r18
     b6e:	c8 01       	movw	r24, r16
     b70:	fc 82       	std	Y+4, r15	; 0x04
     b72:	eb 82       	std	Y+3, r14	; 0x03
     b74:	48 01       	movw	r8, r16
     b76:	84 1a       	sub	r8, r20
     b78:	95 0a       	sbc	r9, r21
     b7a:	97 fe       	sbrs	r9, 7
     b7c:	03 c0       	rjmp	.+6      	; 0xb84 <_ZN12Adafruit_GFX9writeLineEiiiij+0x4c>
     b7e:	91 94       	neg	r9
     b80:	81 94       	neg	r8
     b82:	91 08       	sbc	r9, r1
     b84:	35 01       	movw	r6, r10
     b86:	2d 81       	ldd	r18, Y+5	; 0x05
     b88:	3e 81       	ldd	r19, Y+6	; 0x06
     b8a:	62 1a       	sub	r6, r18
     b8c:	73 0a       	sbc	r7, r19
     b8e:	77 fe       	sbrs	r7, 7
     b90:	03 c0       	rjmp	.+6      	; 0xb98 <_ZN12Adafruit_GFX9writeLineEiiiij+0x60>
     b92:	71 94       	neg	r7
     b94:	61 94       	neg	r6
     b96:	71 08       	sbc	r7, r1
     b98:	68 14       	cp	r6, r8
     b9a:	79 04       	cpc	r7, r9
     b9c:	5c f4       	brge	.+22     	; 0xbb4 <_ZN12Adafruit_GFX9writeLineEiiiij+0x7c>
     b9e:	3a 2d       	mov	r19, r10
     ba0:	2b 2d       	mov	r18, r11
     ba2:	5c 01       	movw	r10, r24
     ba4:	83 2f       	mov	r24, r19
     ba6:	92 2f       	mov	r25, r18
     ba8:	3d 81       	ldd	r19, Y+5	; 0x05
     baa:	2e 81       	ldd	r18, Y+6	; 0x06
     bac:	de 82       	std	Y+6, r13	; 0x06
     bae:	cd 82       	std	Y+5, r12	; 0x05
     bb0:	c3 2e       	mov	r12, r19
     bb2:	d2 2e       	mov	r13, r18
     bb4:	ad 81       	ldd	r26, Y+5	; 0x05
     bb6:	be 81       	ldd	r27, Y+6	; 0x06
     bb8:	aa 16       	cp	r10, r26
     bba:	bb 06       	cpc	r11, r27
     bbc:	5c f4       	brge	.+22     	; 0xbd4 <_ZN12Adafruit_GFX9writeLineEiiiij+0x9c>
     bbe:	3c 2d       	mov	r19, r12
     bc0:	2d 2d       	mov	r18, r13
     bc2:	6c 01       	movw	r12, r24
     bc4:	83 2f       	mov	r24, r19
     bc6:	92 2f       	mov	r25, r18
     bc8:	3d 81       	ldd	r19, Y+5	; 0x05
     bca:	2e 81       	ldd	r18, Y+6	; 0x06
     bcc:	be 82       	std	Y+6, r11	; 0x06
     bce:	ad 82       	std	Y+5, r10	; 0x05
     bd0:	a3 2e       	mov	r10, r19
     bd2:	b2 2e       	mov	r11, r18
     bd4:	85 01       	movw	r16, r10
     bd6:	2d 81       	ldd	r18, Y+5	; 0x05
     bd8:	3e 81       	ldd	r19, Y+6	; 0x06
     bda:	02 1b       	sub	r16, r18
     bdc:	13 0b       	sbc	r17, r19
     bde:	1c 01       	movw	r2, r24
     be0:	2c 18       	sub	r2, r12
     be2:	3d 08       	sbc	r3, r13
     be4:	37 fe       	sbrs	r3, 7
     be6:	03 c0       	rjmp	.+6      	; 0xbee <_ZN12Adafruit_GFX9writeLineEiiiij+0xb6>
     be8:	31 94       	neg	r3
     bea:	21 94       	neg	r2
     bec:	31 08       	sbc	r3, r1
     bee:	78 01       	movw	r14, r16
     bf0:	17 ff       	sbrs	r17, 7
     bf2:	03 c0       	rjmp	.+6      	; 0xbfa <_ZN12Adafruit_GFX9writeLineEiiiij+0xc2>
     bf4:	3f ef       	ldi	r19, 0xFF	; 255
     bf6:	e3 1a       	sub	r14, r19
     bf8:	f3 0a       	sbc	r15, r19
     bfa:	f5 94       	asr	r15
     bfc:	e7 94       	ror	r14
     bfe:	c8 16       	cp	r12, r24
     c00:	d9 06       	cpc	r13, r25
     c02:	2c f0       	brlt	.+10     	; 0xc0e <_ZN12Adafruit_GFX9writeLineEiiiij+0xd6>
     c04:	8f ef       	ldi	r24, 0xFF	; 255
     c06:	9f ef       	ldi	r25, 0xFF	; 255
     c08:	9a 83       	std	Y+2, r25	; 0x02
     c0a:	89 83       	std	Y+1, r24	; 0x01
     c0c:	04 c0       	rjmp	.+8      	; 0xc16 <_ZN12Adafruit_GFX9writeLineEiiiij+0xde>
     c0e:	a1 e0       	ldi	r26, 0x01	; 1
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	ba 83       	std	Y+2, r27	; 0x02
     c14:	a9 83       	std	Y+1, r26	; 0x01
     c16:	2d 81       	ldd	r18, Y+5	; 0x05
     c18:	3e 81       	ldd	r19, Y+6	; 0x06
     c1a:	a2 16       	cp	r10, r18
     c1c:	b3 06       	cpc	r11, r19
     c1e:	24 f1       	brlt	.+72     	; 0xc68 <_ZN12Adafruit_GFX9writeLineEiiiij+0x130>
     c20:	d2 01       	movw	r26, r4
     c22:	ed 91       	ld	r30, X+
     c24:	fc 91       	ld	r31, X
     c26:	04 84       	ldd	r0, Z+12	; 0x0c
     c28:	f5 85       	ldd	r31, Z+13	; 0x0d
     c2a:	e0 2d       	mov	r30, r0
     c2c:	2b 81       	ldd	r18, Y+3	; 0x03
     c2e:	3c 81       	ldd	r19, Y+4	; 0x04
     c30:	68 14       	cp	r6, r8
     c32:	79 04       	cpc	r7, r9
     c34:	24 f4       	brge	.+8      	; 0xc3e <_ZN12Adafruit_GFX9writeLineEiiiij+0x106>
     c36:	4d 81       	ldd	r20, Y+5	; 0x05
     c38:	5e 81       	ldd	r21, Y+6	; 0x06
     c3a:	b6 01       	movw	r22, r12
     c3c:	03 c0       	rjmp	.+6      	; 0xc44 <_ZN12Adafruit_GFX9writeLineEiiiij+0x10c>
     c3e:	a6 01       	movw	r20, r12
     c40:	6d 81       	ldd	r22, Y+5	; 0x05
     c42:	7e 81       	ldd	r23, Y+6	; 0x06
     c44:	c2 01       	movw	r24, r4
     c46:	19 95       	eicall
     c48:	e2 18       	sub	r14, r2
     c4a:	f3 08       	sbc	r15, r3
     c4c:	f7 fe       	sbrs	r15, 7
     c4e:	06 c0       	rjmp	.+12     	; 0xc5c <_ZN12Adafruit_GFX9writeLineEiiiij+0x124>
     c50:	29 81       	ldd	r18, Y+1	; 0x01
     c52:	3a 81       	ldd	r19, Y+2	; 0x02
     c54:	c2 0e       	add	r12, r18
     c56:	d3 1e       	adc	r13, r19
     c58:	e0 0e       	add	r14, r16
     c5a:	f1 1e       	adc	r15, r17
     c5c:	8d 81       	ldd	r24, Y+5	; 0x05
     c5e:	9e 81       	ldd	r25, Y+6	; 0x06
     c60:	01 96       	adiw	r24, 0x01	; 1
     c62:	9e 83       	std	Y+6, r25	; 0x06
     c64:	8d 83       	std	Y+5, r24	; 0x05
     c66:	d7 cf       	rjmp	.-82     	; 0xc16 <_ZN12Adafruit_GFX9writeLineEiiiij+0xde>
     c68:	26 96       	adiw	r28, 0x06	; 6
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	df 90       	pop	r13
     c82:	cf 90       	pop	r12
     c84:	bf 90       	pop	r11
     c86:	af 90       	pop	r10
     c88:	9f 90       	pop	r9
     c8a:	8f 90       	pop	r8
     c8c:	7f 90       	pop	r7
     c8e:	6f 90       	pop	r6
     c90:	5f 90       	pop	r5
     c92:	4f 90       	pop	r4
     c94:	3f 90       	pop	r3
     c96:	2f 90       	pop	r2
     c98:	08 95       	ret

00000c9a <_ZN12Adafruit_GFX10writePixelEiij>:
     c9a:	dc 01       	movw	r26, r24
     c9c:	ed 91       	ld	r30, X+
     c9e:	fc 91       	ld	r31, X
     ca0:	00 84       	ldd	r0, Z+8	; 0x08
     ca2:	f1 85       	ldd	r31, Z+9	; 0x09
     ca4:	e0 2d       	mov	r30, r0
     ca6:	19 94       	eijmp

00000ca8 <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
     ca8:	0f 93       	push	r16
     caa:	1f 93       	push	r17
     cac:	dc 01       	movw	r26, r24
     cae:	ed 91       	ld	r30, X+
     cb0:	fc 91       	ld	r31, X
     cb2:	04 8c       	ldd	r0, Z+28	; 0x1c
     cb4:	f5 8d       	ldd	r31, Z+29	; 0x1d
     cb6:	e0 2d       	mov	r30, r0
     cb8:	19 95       	eicall
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	08 95       	ret

00000cc0 <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
     cc4:	dc 01       	movw	r26, r24
     cc6:	ed 91       	ld	r30, X+
     cc8:	fc 91       	ld	r31, X
     cca:	06 8c       	ldd	r0, Z+30	; 0x1e
     ccc:	f7 8d       	ldd	r31, Z+31	; 0x1f
     cce:	e0 2d       	mov	r30, r0
     cd0:	19 95       	eicall
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	08 95       	ret

00000cd8 <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
     cd8:	ef 92       	push	r14
     cda:	ff 92       	push	r15
     cdc:	0f 93       	push	r16
     cde:	1f 93       	push	r17
     ce0:	dc 01       	movw	r26, r24
     ce2:	ed 91       	ld	r30, X+
     ce4:	fc 91       	ld	r31, X
     ce6:	00 a0       	ldd	r0, Z+32	; 0x20
     ce8:	f1 a1       	ldd	r31, Z+33	; 0x21
     cea:	e0 2d       	mov	r30, r0
     cec:	19 95       	eicall
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	08 95       	ret

00000cf8 <_ZN12Adafruit_GFX10startWriteEv>:
     cf8:	08 95       	ret

00000cfa <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
     cfa:	8f 92       	push	r8
     cfc:	9f 92       	push	r9
     cfe:	af 92       	push	r10
     d00:	bf 92       	push	r11
     d02:	cf 92       	push	r12
     d04:	df 92       	push	r13
     d06:	ef 92       	push	r14
     d08:	ff 92       	push	r15
     d0a:	0f 93       	push	r16
     d0c:	1f 93       	push	r17
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	ec 01       	movw	r28, r24
     d14:	5b 01       	movw	r10, r22
     d16:	4a 01       	movw	r8, r20
     d18:	69 01       	movw	r12, r18
     d1a:	78 01       	movw	r14, r16
     d1c:	e8 81       	ld	r30, Y
     d1e:	f9 81       	ldd	r31, Y+1	; 0x01
     d20:	02 84       	ldd	r0, Z+10	; 0x0a
     d22:	f3 85       	ldd	r31, Z+11	; 0x0b
     d24:	e0 2d       	mov	r30, r0
     d26:	19 95       	eicall
     d28:	c8 0c       	add	r12, r8
     d2a:	d9 1c       	adc	r13, r9
     d2c:	86 01       	movw	r16, r12
     d2e:	01 50       	subi	r16, 0x01	; 1
     d30:	11 09       	sbc	r17, r1
     d32:	e8 81       	ld	r30, Y
     d34:	f9 81       	ldd	r31, Y+1	; 0x01
     d36:	04 88       	ldd	r0, Z+20	; 0x14
     d38:	f5 89       	ldd	r31, Z+21	; 0x15
     d3a:	e0 2d       	mov	r30, r0
     d3c:	95 01       	movw	r18, r10
     d3e:	a4 01       	movw	r20, r8
     d40:	b5 01       	movw	r22, r10
     d42:	ce 01       	movw	r24, r28
     d44:	19 95       	eicall
     d46:	e8 81       	ld	r30, Y
     d48:	f9 81       	ldd	r31, Y+1	; 0x01
     d4a:	06 88       	ldd	r0, Z+22	; 0x16
     d4c:	f7 89       	ldd	r31, Z+23	; 0x17
     d4e:	e0 2d       	mov	r30, r0
     d50:	ce 01       	movw	r24, r28
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	1f 91       	pop	r17
     d58:	0f 91       	pop	r16
     d5a:	ff 90       	pop	r15
     d5c:	ef 90       	pop	r14
     d5e:	df 90       	pop	r13
     d60:	cf 90       	pop	r12
     d62:	bf 90       	pop	r11
     d64:	af 90       	pop	r10
     d66:	9f 90       	pop	r9
     d68:	8f 90       	pop	r8
     d6a:	19 94       	eijmp

00000d6c <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
     d6c:	8f 92       	push	r8
     d6e:	9f 92       	push	r9
     d70:	af 92       	push	r10
     d72:	bf 92       	push	r11
     d74:	cf 92       	push	r12
     d76:	df 92       	push	r13
     d78:	ef 92       	push	r14
     d7a:	ff 92       	push	r15
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	ec 01       	movw	r28, r24
     d86:	5b 01       	movw	r10, r22
     d88:	4a 01       	movw	r8, r20
     d8a:	69 01       	movw	r12, r18
     d8c:	e8 81       	ld	r30, Y
     d8e:	f9 81       	ldd	r31, Y+1	; 0x01
     d90:	02 84       	ldd	r0, Z+10	; 0x0a
     d92:	f3 85       	ldd	r31, Z+11	; 0x0b
     d94:	e0 2d       	mov	r30, r0
     d96:	19 95       	eicall
     d98:	95 01       	movw	r18, r10
     d9a:	2c 0d       	add	r18, r12
     d9c:	3d 1d       	adc	r19, r13
     d9e:	21 50       	subi	r18, 0x01	; 1
     da0:	31 09       	sbc	r19, r1
     da2:	e8 81       	ld	r30, Y
     da4:	f9 81       	ldd	r31, Y+1	; 0x01
     da6:	04 88       	ldd	r0, Z+20	; 0x14
     da8:	f5 89       	ldd	r31, Z+21	; 0x15
     daa:	e0 2d       	mov	r30, r0
     dac:	78 01       	movw	r14, r16
     dae:	84 01       	movw	r16, r8
     db0:	a4 01       	movw	r20, r8
     db2:	b5 01       	movw	r22, r10
     db4:	ce 01       	movw	r24, r28
     db6:	19 95       	eicall
     db8:	e8 81       	ld	r30, Y
     dba:	f9 81       	ldd	r31, Y+1	; 0x01
     dbc:	06 88       	ldd	r0, Z+22	; 0x16
     dbe:	f7 89       	ldd	r31, Z+23	; 0x17
     dc0:	e0 2d       	mov	r30, r0
     dc2:	ce 01       	movw	r24, r28
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	ff 90       	pop	r15
     dce:	ef 90       	pop	r14
     dd0:	df 90       	pop	r13
     dd2:	cf 90       	pop	r12
     dd4:	bf 90       	pop	r11
     dd6:	af 90       	pop	r10
     dd8:	9f 90       	pop	r9
     dda:	8f 90       	pop	r8
     ddc:	19 94       	eijmp

00000dde <_ZN12Adafruit_GFX8fillRectEiiiij>:
     dde:	4f 92       	push	r4
     de0:	5f 92       	push	r5
     de2:	6f 92       	push	r6
     de4:	7f 92       	push	r7
     de6:	8f 92       	push	r8
     de8:	9f 92       	push	r9
     dea:	af 92       	push	r10
     dec:	bf 92       	push	r11
     dee:	cf 92       	push	r12
     df0:	df 92       	push	r13
     df2:	ef 92       	push	r14
     df4:	ff 92       	push	r15
     df6:	0f 93       	push	r16
     df8:	1f 93       	push	r17
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	6c 01       	movw	r12, r24
     e00:	2b 01       	movw	r4, r22
     e02:	5a 01       	movw	r10, r20
     e04:	39 01       	movw	r6, r18
     e06:	48 01       	movw	r8, r16
     e08:	dc 01       	movw	r26, r24
     e0a:	ed 91       	ld	r30, X+
     e0c:	fc 91       	ld	r31, X
     e0e:	02 84       	ldd	r0, Z+10	; 0x0a
     e10:	f3 85       	ldd	r31, Z+11	; 0x0b
     e12:	e0 2d       	mov	r30, r0
     e14:	19 95       	eicall
     e16:	e2 01       	movw	r28, r4
     e18:	64 0c       	add	r6, r4
     e1a:	75 1c       	adc	r7, r5
     e1c:	d6 01       	movw	r26, r12
     e1e:	ed 91       	ld	r30, X+
     e20:	fc 91       	ld	r31, X
     e22:	c6 15       	cp	r28, r6
     e24:	d7 05       	cpc	r29, r7
     e26:	5c f4       	brge	.+22     	; 0xe3e <_ZN12Adafruit_GFX8fillRectEiiiij+0x60>
     e28:	00 88       	ldd	r0, Z+16	; 0x10
     e2a:	f1 89       	ldd	r31, Z+17	; 0x11
     e2c:	e0 2d       	mov	r30, r0
     e2e:	87 01       	movw	r16, r14
     e30:	94 01       	movw	r18, r8
     e32:	a5 01       	movw	r20, r10
     e34:	be 01       	movw	r22, r28
     e36:	c6 01       	movw	r24, r12
     e38:	19 95       	eicall
     e3a:	21 96       	adiw	r28, 0x01	; 1
     e3c:	ef cf       	rjmp	.-34     	; 0xe1c <_ZN12Adafruit_GFX8fillRectEiiiij+0x3e>
     e3e:	06 88       	ldd	r0, Z+22	; 0x16
     e40:	f7 89       	ldd	r31, Z+23	; 0x17
     e42:	e0 2d       	mov	r30, r0
     e44:	c6 01       	movw	r24, r12
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
     e4e:	ff 90       	pop	r15
     e50:	ef 90       	pop	r14
     e52:	df 90       	pop	r13
     e54:	cf 90       	pop	r12
     e56:	bf 90       	pop	r11
     e58:	af 90       	pop	r10
     e5a:	9f 90       	pop	r9
     e5c:	8f 90       	pop	r8
     e5e:	7f 90       	pop	r7
     e60:	6f 90       	pop	r6
     e62:	5f 90       	pop	r5
     e64:	4f 90       	pop	r4
     e66:	19 94       	eijmp

00000e68 <_ZN12Adafruit_GFX10fillScreenEj>:
     e68:	ef 92       	push	r14
     e6a:	ff 92       	push	r15
     e6c:	0f 93       	push	r16
     e6e:	1f 93       	push	r17
     e70:	dc 01       	movw	r26, r24
     e72:	1a 96       	adiw	r26, 0x0a	; 10
     e74:	0d 91       	ld	r16, X+
     e76:	1c 91       	ld	r17, X
     e78:	1b 97       	sbiw	r26, 0x0b	; 11
     e7a:	18 96       	adiw	r26, 0x08	; 8
     e7c:	2d 91       	ld	r18, X+
     e7e:	3c 91       	ld	r19, X
     e80:	19 97       	sbiw	r26, 0x09	; 9
     e82:	ed 91       	ld	r30, X+
     e84:	fc 91       	ld	r31, X
     e86:	00 a0       	ldd	r0, Z+32	; 0x20
     e88:	f1 a1       	ldd	r31, Z+33	; 0x21
     e8a:	e0 2d       	mov	r30, r0
     e8c:	7b 01       	movw	r14, r22
     e8e:	40 e0       	ldi	r20, 0x00	; 0
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	70 e0       	ldi	r23, 0x00	; 0
     e96:	19 95       	eicall
     e98:	1f 91       	pop	r17
     e9a:	0f 91       	pop	r16
     e9c:	ff 90       	pop	r15
     e9e:	ef 90       	pop	r14
     ea0:	08 95       	ret

00000ea2 <_ZN12Adafruit_GFX8drawLineEiiiij>:
     ea2:	8f 92       	push	r8
     ea4:	9f 92       	push	r9
     ea6:	af 92       	push	r10
     ea8:	bf 92       	push	r11
     eaa:	cf 92       	push	r12
     eac:	df 92       	push	r13
     eae:	ef 92       	push	r14
     eb0:	ff 92       	push	r15
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	4c 01       	movw	r8, r24
     ebc:	6b 01       	movw	r12, r22
     ebe:	5a 01       	movw	r10, r20
     ec0:	e9 01       	movw	r28, r18
     ec2:	dc 01       	movw	r26, r24
     ec4:	ed 91       	ld	r30, X+
     ec6:	fc 91       	ld	r31, X
     ec8:	62 17       	cp	r22, r18
     eca:	73 07       	cpc	r23, r19
     ecc:	81 f4       	brne	.+32     	; 0xeee <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
     ece:	04 17       	cp	r16, r20
     ed0:	15 07       	cpc	r17, r21
     ed2:	24 f4       	brge	.+8      	; 0xedc <_ZN12Adafruit_GFX8drawLineEiiiij+0x3a>
     ed4:	8b 2d       	mov	r24, r11
     ed6:	58 01       	movw	r10, r16
     ed8:	04 2f       	mov	r16, r20
     eda:	18 2f       	mov	r17, r24
     edc:	0a 19       	sub	r16, r10
     ede:	1b 09       	sbc	r17, r11
     ee0:	98 01       	movw	r18, r16
     ee2:	2f 5f       	subi	r18, 0xFF	; 255
     ee4:	3f 4f       	sbci	r19, 0xFF	; 255
     ee6:	04 8c       	ldd	r0, Z+28	; 0x1c
     ee8:	f5 8d       	ldd	r31, Z+29	; 0x1d
     eea:	e0 2d       	mov	r30, r0
     eec:	12 c0       	rjmp	.+36     	; 0xf12 <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
     eee:	40 17       	cp	r20, r16
     ef0:	51 07       	cpc	r21, r17
     ef2:	09 f5       	brne	.+66     	; 0xf36 <_ZN12Adafruit_GFX8drawLineEiiiij+0x94>
     ef4:	26 17       	cp	r18, r22
     ef6:	37 07       	cpc	r19, r23
     ef8:	24 f4       	brge	.+8      	; 0xf02 <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
     efa:	8d 2d       	mov	r24, r13
     efc:	69 01       	movw	r12, r18
     efe:	c6 2f       	mov	r28, r22
     f00:	d8 2f       	mov	r29, r24
     f02:	9e 01       	movw	r18, r28
     f04:	2c 19       	sub	r18, r12
     f06:	3d 09       	sbc	r19, r13
     f08:	2f 5f       	subi	r18, 0xFF	; 255
     f0a:	3f 4f       	sbci	r19, 0xFF	; 255
     f0c:	06 8c       	ldd	r0, Z+30	; 0x1e
     f0e:	f7 8d       	ldd	r31, Z+31	; 0x1f
     f10:	e0 2d       	mov	r30, r0
     f12:	87 01       	movw	r16, r14
     f14:	a5 01       	movw	r20, r10
     f16:	b6 01       	movw	r22, r12
     f18:	c4 01       	movw	r24, r8
     f1a:	19 95       	eicall
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	9f 90       	pop	r9
     f32:	8f 90       	pop	r8
     f34:	08 95       	ret
     f36:	02 84       	ldd	r0, Z+10	; 0x0a
     f38:	f3 85       	ldd	r31, Z+11	; 0x0b
     f3a:	e0 2d       	mov	r30, r0
     f3c:	19 95       	eicall
     f3e:	d4 01       	movw	r26, r8
     f40:	ed 91       	ld	r30, X+
     f42:	fc 91       	ld	r31, X
     f44:	04 88       	ldd	r0, Z+20	; 0x14
     f46:	f5 89       	ldd	r31, Z+21	; 0x15
     f48:	e0 2d       	mov	r30, r0
     f4a:	9e 01       	movw	r18, r28
     f4c:	a5 01       	movw	r20, r10
     f4e:	b6 01       	movw	r22, r12
     f50:	c4 01       	movw	r24, r8
     f52:	19 95       	eicall
     f54:	d4 01       	movw	r26, r8
     f56:	ed 91       	ld	r30, X+
     f58:	fc 91       	ld	r31, X
     f5a:	06 88       	ldd	r0, Z+22	; 0x16
     f5c:	f7 89       	ldd	r31, Z+23	; 0x17
     f5e:	e0 2d       	mov	r30, r0
     f60:	c4 01       	movw	r24, r8
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	1f 91       	pop	r17
     f68:	0f 91       	pop	r16
     f6a:	ff 90       	pop	r15
     f6c:	ef 90       	pop	r14
     f6e:	df 90       	pop	r13
     f70:	cf 90       	pop	r12
     f72:	bf 90       	pop	r11
     f74:	af 90       	pop	r10
     f76:	9f 90       	pop	r9
     f78:	8f 90       	pop	r8
     f7a:	19 94       	eijmp

00000f7c <_ZN12Adafruit_GFX8drawRectEiiiij>:
     f7c:	6f 92       	push	r6
     f7e:	7f 92       	push	r7
     f80:	8f 92       	push	r8
     f82:	9f 92       	push	r9
     f84:	af 92       	push	r10
     f86:	bf 92       	push	r11
     f88:	cf 92       	push	r12
     f8a:	df 92       	push	r13
     f8c:	ef 92       	push	r14
     f8e:	ff 92       	push	r15
     f90:	0f 93       	push	r16
     f92:	1f 93       	push	r17
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	ec 01       	movw	r28, r24
     f9a:	4b 01       	movw	r8, r22
     f9c:	5a 01       	movw	r10, r20
     f9e:	69 01       	movw	r12, r18
     fa0:	38 01       	movw	r6, r16
     fa2:	e8 81       	ld	r30, Y
     fa4:	f9 81       	ldd	r31, Y+1	; 0x01
     fa6:	02 84       	ldd	r0, Z+10	; 0x0a
     fa8:	f3 85       	ldd	r31, Z+11	; 0x0b
     faa:	e0 2d       	mov	r30, r0
     fac:	19 95       	eicall
     fae:	e8 81       	ld	r30, Y
     fb0:	f9 81       	ldd	r31, Y+1	; 0x01
     fb2:	02 88       	ldd	r0, Z+18	; 0x12
     fb4:	f3 89       	ldd	r31, Z+19	; 0x13
     fb6:	e0 2d       	mov	r30, r0
     fb8:	87 01       	movw	r16, r14
     fba:	96 01       	movw	r18, r12
     fbc:	a5 01       	movw	r20, r10
     fbe:	b4 01       	movw	r22, r8
     fc0:	ce 01       	movw	r24, r28
     fc2:	19 95       	eicall
     fc4:	a5 01       	movw	r20, r10
     fc6:	46 0d       	add	r20, r6
     fc8:	57 1d       	adc	r21, r7
     fca:	41 50       	subi	r20, 0x01	; 1
     fcc:	51 09       	sbc	r21, r1
     fce:	e8 81       	ld	r30, Y
     fd0:	f9 81       	ldd	r31, Y+1	; 0x01
     fd2:	02 88       	ldd	r0, Z+18	; 0x12
     fd4:	f3 89       	ldd	r31, Z+19	; 0x13
     fd6:	e0 2d       	mov	r30, r0
     fd8:	96 01       	movw	r18, r12
     fda:	b4 01       	movw	r22, r8
     fdc:	ce 01       	movw	r24, r28
     fde:	19 95       	eicall
     fe0:	e8 81       	ld	r30, Y
     fe2:	f9 81       	ldd	r31, Y+1	; 0x01
     fe4:	00 88       	ldd	r0, Z+16	; 0x10
     fe6:	f1 89       	ldd	r31, Z+17	; 0x11
     fe8:	e0 2d       	mov	r30, r0
     fea:	93 01       	movw	r18, r6
     fec:	a5 01       	movw	r20, r10
     fee:	b4 01       	movw	r22, r8
     ff0:	ce 01       	movw	r24, r28
     ff2:	19 95       	eicall
     ff4:	c8 0c       	add	r12, r8
     ff6:	d9 1c       	adc	r13, r9
     ff8:	b6 01       	movw	r22, r12
     ffa:	61 50       	subi	r22, 0x01	; 1
     ffc:	71 09       	sbc	r23, r1
     ffe:	e8 81       	ld	r30, Y
    1000:	f9 81       	ldd	r31, Y+1	; 0x01
    1002:	00 88       	ldd	r0, Z+16	; 0x10
    1004:	f1 89       	ldd	r31, Z+17	; 0x11
    1006:	e0 2d       	mov	r30, r0
    1008:	93 01       	movw	r18, r6
    100a:	a5 01       	movw	r20, r10
    100c:	ce 01       	movw	r24, r28
    100e:	19 95       	eicall
    1010:	e8 81       	ld	r30, Y
    1012:	f9 81       	ldd	r31, Y+1	; 0x01
    1014:	06 88       	ldd	r0, Z+22	; 0x16
    1016:	f7 89       	ldd	r31, Z+23	; 0x17
    1018:	e0 2d       	mov	r30, r0
    101a:	ce 01       	movw	r24, r28
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	ef 90       	pop	r14
    1028:	df 90       	pop	r13
    102a:	cf 90       	pop	r12
    102c:	bf 90       	pop	r11
    102e:	af 90       	pop	r10
    1030:	9f 90       	pop	r9
    1032:	8f 90       	pop	r8
    1034:	7f 90       	pop	r7
    1036:	6f 90       	pop	r6
    1038:	19 94       	eijmp

0000103a <_ZN12Adafruit_GFX13invertDisplayEb>:
    103a:	08 95       	ret

0000103c <_ZN12Adafruit_GFX11setRotationEh>:
    103c:	fc 01       	movw	r30, r24
    103e:	63 70       	andi	r22, 0x03	; 3
    1040:	66 8b       	std	Z+22, r22	; 0x16
    1042:	84 81       	ldd	r24, Z+4	; 0x04
    1044:	95 81       	ldd	r25, Z+5	; 0x05
    1046:	26 81       	ldd	r18, Z+6	; 0x06
    1048:	37 81       	ldd	r19, Z+7	; 0x07
    104a:	61 30       	cpi	r22, 0x01	; 1
    104c:	39 f0       	breq	.+14     	; 0x105c <_ZN12Adafruit_GFX11setRotationEh+0x20>
    104e:	63 30       	cpi	r22, 0x03	; 3
    1050:	29 f0       	breq	.+10     	; 0x105c <_ZN12Adafruit_GFX11setRotationEh+0x20>
    1052:	91 87       	std	Z+9, r25	; 0x09
    1054:	80 87       	std	Z+8, r24	; 0x08
    1056:	33 87       	std	Z+11, r19	; 0x0b
    1058:	22 87       	std	Z+10, r18	; 0x0a
    105a:	08 95       	ret
    105c:	31 87       	std	Z+9, r19	; 0x09
    105e:	20 87       	std	Z+8, r18	; 0x08
    1060:	93 87       	std	Z+11, r25	; 0x0b
    1062:	82 87       	std	Z+10, r24	; 0x0a
    1064:	08 95       	ret

00001066 <_ZN12Adafruit_GFXC1Eii>:
    1066:	fc 01       	movw	r30, r24
    1068:	13 82       	std	Z+3, r1	; 0x03
    106a:	12 82       	std	Z+2, r1	; 0x02
    106c:	8d e5       	ldi	r24, 0x5D	; 93
    106e:	94 e0       	ldi	r25, 0x04	; 4
    1070:	91 83       	std	Z+1, r25	; 0x01
    1072:	80 83       	st	Z, r24
    1074:	75 83       	std	Z+5, r23	; 0x05
    1076:	64 83       	std	Z+4, r22	; 0x04
    1078:	57 83       	std	Z+7, r21	; 0x07
    107a:	46 83       	std	Z+6, r20	; 0x06
    107c:	71 87       	std	Z+9, r23	; 0x09
    107e:	60 87       	std	Z+8, r22	; 0x08
    1080:	53 87       	std	Z+11, r21	; 0x0b
    1082:	42 87       	std	Z+10, r20	; 0x0a
    1084:	16 8a       	std	Z+22, r1	; 0x16
    1086:	15 86       	std	Z+13, r1	; 0x0d
    1088:	14 86       	std	Z+12, r1	; 0x0c
    108a:	17 86       	std	Z+15, r1	; 0x0f
    108c:	16 86       	std	Z+14, r1	; 0x0e
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	85 8b       	std	Z+21, r24	; 0x15
    1092:	84 8b       	std	Z+20, r24	; 0x14
    1094:	2f ef       	ldi	r18, 0xFF	; 255
    1096:	3f ef       	ldi	r19, 0xFF	; 255
    1098:	33 8b       	std	Z+19, r19	; 0x13
    109a:	22 8b       	std	Z+18, r18	; 0x12
    109c:	31 8b       	std	Z+17, r19	; 0x11
    109e:	20 8b       	std	Z+16, r18	; 0x10
    10a0:	87 8b       	std	Z+23, r24	; 0x17
    10a2:	10 8e       	std	Z+24, r1	; 0x18
    10a4:	12 8e       	std	Z+26, r1	; 0x1a
    10a6:	11 8e       	std	Z+25, r1	; 0x19
    10a8:	08 95       	ret

000010aa <_ZN12Adafruit_GFX8drawCharEiihjjhh>:
    10aa:	2f 92       	push	r2
    10ac:	3f 92       	push	r3
    10ae:	4f 92       	push	r4
    10b0:	5f 92       	push	r5
    10b2:	6f 92       	push	r6
    10b4:	7f 92       	push	r7
    10b6:	8f 92       	push	r8
    10b8:	9f 92       	push	r9
    10ba:	af 92       	push	r10
    10bc:	bf 92       	push	r11
    10be:	cf 92       	push	r12
    10c0:	df 92       	push	r13
    10c2:	ef 92       	push	r14
    10c4:	ff 92       	push	r15
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	6b 97       	sbiw	r28, 0x1b	; 27
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	9b 8f       	std	Y+27, r25	; 0x1b
    10e0:	8a 8f       	std	Y+26, r24	; 0x1a
    10e2:	2b 01       	movw	r4, r22
    10e4:	5a 83       	std	Y+2, r21	; 0x02
    10e6:	49 83       	std	Y+1, r20	; 0x01
    10e8:	d2 2e       	mov	r13, r18
    10ea:	19 87       	std	Y+9, r17	; 0x09
    10ec:	08 87       	std	Y+8, r16	; 0x08
    10ee:	47 01       	movw	r8, r14
    10f0:	ab 82       	std	Y+3, r10	; 0x03
    10f2:	dc 01       	movw	r26, r24
    10f4:	59 96       	adiw	r26, 0x19	; 25
    10f6:	2d 91       	ld	r18, X+
    10f8:	3c 91       	ld	r19, X
    10fa:	5a 97       	sbiw	r26, 0x1a	; 26
    10fc:	21 15       	cp	r18, r1
    10fe:	31 05       	cpc	r19, r1
    1100:	09 f0       	breq	.+2      	; 0x1104 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x5a>
    1102:	00 c1       	rjmp	.+512    	; 0x1304 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x25a>
    1104:	18 96       	adiw	r26, 0x08	; 8
    1106:	8d 91       	ld	r24, X+
    1108:	9c 91       	ld	r25, X
    110a:	19 97       	sbiw	r26, 0x09	; 9
    110c:	68 17       	cp	r22, r24
    110e:	79 07       	cpc	r23, r25
    1110:	0c f0       	brlt	.+2      	; 0x1114 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x6a>
    1112:	e7 c1       	rjmp	.+974    	; 0x14e2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    1114:	1a 96       	adiw	r26, 0x0a	; 10
    1116:	8d 91       	ld	r24, X+
    1118:	9c 91       	ld	r25, X
    111a:	1b 97       	sbiw	r26, 0x0b	; 11
    111c:	48 17       	cp	r20, r24
    111e:	59 07       	cpc	r21, r25
    1120:	0c f0       	brlt	.+2      	; 0x1124 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x7a>
    1122:	df c1       	rjmp	.+958    	; 0x14e2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    1124:	2c 2c       	mov	r2, r12
    1126:	31 2c       	mov	r3, r1
    1128:	fb 01       	movw	r30, r22
    112a:	26 e0       	ldi	r18, 0x06	; 6
    112c:	c2 9e       	mul	r12, r18
    112e:	e0 0d       	add	r30, r0
    1130:	f1 1d       	adc	r31, r1
    1132:	11 24       	eor	r1, r1
    1134:	fd 87       	std	Y+13, r31	; 0x0d
    1136:	ec 87       	std	Y+12, r30	; 0x0c
    1138:	1e 16       	cp	r1, r30
    113a:	1f 06       	cpc	r1, r31
    113c:	0c f0       	brlt	.+2      	; 0x1140 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x96>
    113e:	d1 c1       	rjmp	.+930    	; 0x14e2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    1140:	4a 2d       	mov	r20, r10
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	5b 87       	std	Y+11, r21	; 0x0b
    1146:	4a 87       	std	Y+10, r20	; 0x0a
    1148:	83 e0       	ldi	r24, 0x03	; 3
    114a:	44 0f       	add	r20, r20
    114c:	55 1f       	adc	r21, r21
    114e:	8a 95       	dec	r24
    1150:	e1 f7       	brne	.-8      	; 0x114a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xa0>
    1152:	5f 87       	std	Y+15, r21	; 0x0f
    1154:	4e 87       	std	Y+14, r20	; 0x0e
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	9a 81       	ldd	r25, Y+2	; 0x02
    115a:	84 0f       	add	r24, r20
    115c:	95 1f       	adc	r25, r21
    115e:	18 16       	cp	r1, r24
    1160:	19 06       	cpc	r1, r25
    1162:	0c f0       	brlt	.+2      	; 0x1166 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xbc>
    1164:	be c1       	rjmp	.+892    	; 0x14e2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    1166:	58 96       	adiw	r26, 0x18	; 24
    1168:	8c 91       	ld	r24, X
    116a:	81 11       	cpse	r24, r1
    116c:	04 c0       	rjmp	.+8      	; 0x1176 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    116e:	6f ea       	ldi	r22, 0xAF	; 175
    1170:	6d 15       	cp	r22, r13
    1172:	08 f4       	brcc	.+2      	; 0x1176 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    1174:	d3 94       	inc	r13
    1176:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1178:	bb 8d       	ldd	r27, Y+27	; 0x1b
    117a:	ed 91       	ld	r30, X+
    117c:	fc 91       	ld	r31, X
    117e:	11 97       	sbiw	r26, 0x01	; 1
    1180:	02 84       	ldd	r0, Z+10	; 0x0a
    1182:	f3 85       	ldd	r31, Z+11	; 0x0b
    1184:	e0 2d       	mov	r30, r0
    1186:	cd 01       	movw	r24, r26
    1188:	19 95       	eicall
    118a:	b5 e0       	ldi	r27, 0x05	; 5
    118c:	db 9e       	mul	r13, r27
    118e:	c0 01       	movw	r24, r0
    1190:	11 24       	eor	r1, r1
    1192:	ec 2d       	mov	r30, r12
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	f9 8b       	std	Y+17, r31	; 0x11
    1198:	e8 8b       	std	Y+16, r30	; 0x10
    119a:	92 01       	movw	r18, r4
    119c:	2b 5f       	subi	r18, 0xFB	; 251
    119e:	3f 4f       	sbci	r19, 0xFF	; 255
    11a0:	3b 8b       	std	Y+19, r19	; 0x13
    11a2:	2a 8b       	std	Y+18, r18	; 0x12
    11a4:	32 01       	movw	r6, r4
    11a6:	5d 82       	std	Y+5, r5	; 0x05
    11a8:	4c 82       	std	Y+4, r4	; 0x04
    11aa:	ac 01       	movw	r20, r24
    11ac:	44 19       	sub	r20, r4
    11ae:	55 09       	sbc	r21, r5
    11b0:	5d 8b       	std	Y+21, r21	; 0x15
    11b2:	4c 8b       	std	Y+20, r20	; 0x14
    11b4:	7b 81       	ldd	r23, Y+3	; 0x03
    11b6:	67 2f       	mov	r22, r23
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	7f 8b       	std	Y+23, r23	; 0x17
    11bc:	6e 8b       	std	Y+22, r22	; 0x16
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	9a 81       	ldd	r25, Y+2	; 0x02
    11c2:	08 96       	adiw	r24, 0x08	; 8
    11c4:	99 8f       	std	Y+25, r25	; 0x19
    11c6:	88 8f       	std	Y+24, r24	; 0x18
    11c8:	ec 89       	ldd	r30, Y+20	; 0x14
    11ca:	fd 89       	ldd	r31, Y+21	; 0x15
    11cc:	e6 0d       	add	r30, r6
    11ce:	f7 1d       	adc	r31, r7
    11d0:	ee 5f       	subi	r30, 0xFE	; 254
    11d2:	fd 4f       	sbci	r31, 0xFD	; 253
    11d4:	d4 90       	lpm	r13, Z
    11d6:	a9 81       	ldd	r26, Y+1	; 0x01
    11d8:	ba 81       	ldd	r27, Y+2	; 0x02
    11da:	bf 83       	std	Y+7, r27	; 0x07
    11dc:	ae 83       	std	Y+6, r26	; 0x06
    11de:	5d 01       	movw	r10, r26
    11e0:	d0 fe       	sbrs	r13, 0
    11e2:	16 c0       	rjmp	.+44     	; 0x1210 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x166>
    11e4:	aa 8d       	ldd	r26, Y+26	; 0x1a
    11e6:	bb 8d       	ldd	r27, Y+27	; 0x1b
    11e8:	ed 91       	ld	r30, X+
    11ea:	fc 91       	ld	r31, X
    11ec:	b1 e0       	ldi	r27, 0x01	; 1
    11ee:	cb 12       	cpse	r12, r27
    11f0:	09 c0       	rjmp	.+18     	; 0x1204 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    11f2:	2b 81       	ldd	r18, Y+3	; 0x03
    11f4:	21 30       	cpi	r18, 0x01	; 1
    11f6:	31 f4       	brne	.+12     	; 0x1204 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    11f8:	04 84       	ldd	r0, Z+12	; 0x0c
    11fa:	f5 85       	ldd	r31, Z+13	; 0x0d
    11fc:	e0 2d       	mov	r30, r0
    11fe:	28 85       	ldd	r18, Y+8	; 0x08
    1200:	39 85       	ldd	r19, Y+9	; 0x09
    1202:	19 c0       	rjmp	.+50     	; 0x1236 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x18c>
    1204:	06 84       	ldd	r0, Z+14	; 0x0e
    1206:	f7 85       	ldd	r31, Z+15	; 0x0f
    1208:	e0 2d       	mov	r30, r0
    120a:	e8 84       	ldd	r14, Y+8	; 0x08
    120c:	f9 84       	ldd	r15, Y+9	; 0x09
    120e:	1d c0       	rjmp	.+58     	; 0x124a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1a0>
    1210:	48 85       	ldd	r20, Y+8	; 0x08
    1212:	59 85       	ldd	r21, Y+9	; 0x09
    1214:	48 15       	cp	r20, r8
    1216:	59 05       	cpc	r21, r9
    1218:	11 f1       	breq	.+68     	; 0x125e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    121a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    121c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    121e:	ed 91       	ld	r30, X+
    1220:	fc 91       	ld	r31, X
    1222:	b1 e0       	ldi	r27, 0x01	; 1
    1224:	cb 12       	cpse	r12, r27
    1226:	0d c0       	rjmp	.+26     	; 0x1242 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    1228:	2b 81       	ldd	r18, Y+3	; 0x03
    122a:	21 30       	cpi	r18, 0x01	; 1
    122c:	51 f4       	brne	.+20     	; 0x1242 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    122e:	04 84       	ldd	r0, Z+12	; 0x0c
    1230:	f5 85       	ldd	r31, Z+13	; 0x0d
    1232:	e0 2d       	mov	r30, r0
    1234:	94 01       	movw	r18, r8
    1236:	a5 01       	movw	r20, r10
    1238:	b3 01       	movw	r22, r6
    123a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    123c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    123e:	19 95       	eicall
    1240:	0e c0       	rjmp	.+28     	; 0x125e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    1242:	06 84       	ldd	r0, Z+14	; 0x0e
    1244:	f7 85       	ldd	r31, Z+15	; 0x0f
    1246:	e0 2d       	mov	r30, r0
    1248:	74 01       	movw	r14, r8
    124a:	0a 85       	ldd	r16, Y+10	; 0x0a
    124c:	1b 85       	ldd	r17, Y+11	; 0x0b
    124e:	91 01       	movw	r18, r2
    1250:	4e 81       	ldd	r20, Y+6	; 0x06
    1252:	5f 81       	ldd	r21, Y+7	; 0x07
    1254:	6c 81       	ldd	r22, Y+4	; 0x04
    1256:	7d 81       	ldd	r23, Y+5	; 0x05
    1258:	8a 8d       	ldd	r24, Y+26	; 0x1a
    125a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    125c:	19 95       	eicall
    125e:	d6 94       	lsr	r13
    1260:	4e 81       	ldd	r20, Y+6	; 0x06
    1262:	5f 81       	ldd	r21, Y+7	; 0x07
    1264:	6e 89       	ldd	r22, Y+22	; 0x16
    1266:	7f 89       	ldd	r23, Y+23	; 0x17
    1268:	46 0f       	add	r20, r22
    126a:	57 1f       	adc	r21, r23
    126c:	5f 83       	std	Y+7, r21	; 0x07
    126e:	4e 83       	std	Y+6, r20	; 0x06
    1270:	7f ef       	ldi	r23, 0xFF	; 255
    1272:	a7 1a       	sub	r10, r23
    1274:	b7 0a       	sbc	r11, r23
    1276:	88 8d       	ldd	r24, Y+24	; 0x18
    1278:	99 8d       	ldd	r25, Y+25	; 0x19
    127a:	a8 16       	cp	r10, r24
    127c:	b9 06       	cpc	r11, r25
    127e:	09 f0       	breq	.+2      	; 0x1282 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1d8>
    1280:	af cf       	rjmp	.-162    	; 0x11e0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x136>
    1282:	ac 81       	ldd	r26, Y+4	; 0x04
    1284:	bd 81       	ldd	r27, Y+5	; 0x05
    1286:	e8 89       	ldd	r30, Y+16	; 0x10
    1288:	f9 89       	ldd	r31, Y+17	; 0x11
    128a:	ae 0f       	add	r26, r30
    128c:	bf 1f       	adc	r27, r31
    128e:	bd 83       	std	Y+5, r27	; 0x05
    1290:	ac 83       	std	Y+4, r26	; 0x04
    1292:	ff ef       	ldi	r31, 0xFF	; 255
    1294:	6f 1a       	sub	r6, r31
    1296:	7f 0a       	sbc	r7, r31
    1298:	2a 89       	ldd	r18, Y+18	; 0x12
    129a:	3b 89       	ldd	r19, Y+19	; 0x13
    129c:	62 16       	cp	r6, r18
    129e:	73 06       	cpc	r7, r19
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1fa>
    12a2:	92 cf       	rjmp	.-220    	; 0x11c8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x11e>
    12a4:	48 85       	ldd	r20, Y+8	; 0x08
    12a6:	59 85       	ldd	r21, Y+9	; 0x09
    12a8:	48 15       	cp	r20, r8
    12aa:	59 05       	cpc	r21, r9
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x206>
    12ae:	f7 c0       	rjmp	.+494    	; 0x149e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    12b0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    12b2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    12b4:	ed 91       	ld	r30, X+
    12b6:	fc 91       	ld	r31, X
    12b8:	b1 e0       	ldi	r27, 0x01	; 1
    12ba:	cb 12       	cpse	r12, r27
    12bc:	12 c0       	rjmp	.+36     	; 0x12e2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    12be:	2b 81       	ldd	r18, Y+3	; 0x03
    12c0:	21 30       	cpi	r18, 0x01	; 1
    12c2:	79 f4       	brne	.+30     	; 0x12e2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    12c4:	b2 01       	movw	r22, r4
    12c6:	6b 5f       	subi	r22, 0xFB	; 251
    12c8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ca:	00 88       	ldd	r0, Z+16	; 0x10
    12cc:	f1 89       	ldd	r31, Z+17	; 0x11
    12ce:	e0 2d       	mov	r30, r0
    12d0:	84 01       	movw	r16, r8
    12d2:	28 e0       	ldi	r18, 0x08	; 8
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	49 81       	ldd	r20, Y+1	; 0x01
    12d8:	5a 81       	ldd	r21, Y+2	; 0x02
    12da:	8a 8d       	ldd	r24, Y+26	; 0x1a
    12dc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    12de:	19 95       	eicall
    12e0:	de c0       	rjmp	.+444    	; 0x149e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    12e2:	6c 85       	ldd	r22, Y+12	; 0x0c
    12e4:	7d 85       	ldd	r23, Y+13	; 0x0d
    12e6:	62 19       	sub	r22, r2
    12e8:	73 09       	sbc	r23, r3
    12ea:	06 84       	ldd	r0, Z+14	; 0x0e
    12ec:	f7 85       	ldd	r31, Z+15	; 0x0f
    12ee:	e0 2d       	mov	r30, r0
    12f0:	74 01       	movw	r14, r8
    12f2:	0e 85       	ldd	r16, Y+14	; 0x0e
    12f4:	1f 85       	ldd	r17, Y+15	; 0x0f
    12f6:	91 01       	movw	r18, r2
    12f8:	49 81       	ldd	r20, Y+1	; 0x01
    12fa:	5a 81       	ldd	r21, Y+2	; 0x02
    12fc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    12fe:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1300:	19 95       	eicall
    1302:	cd c0       	rjmp	.+410    	; 0x149e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    1304:	f9 01       	movw	r30, r18
    1306:	34 96       	adiw	r30, 0x04	; 4
    1308:	e4 91       	lpm	r30, Z
    130a:	de 1a       	sub	r13, r30
    130c:	f9 01       	movw	r30, r18
    130e:	32 96       	adiw	r30, 0x02	; 2
    1310:	85 91       	lpm	r24, Z+
    1312:	94 91       	lpm	r25, Z
    1314:	b7 e0       	ldi	r27, 0x07	; 7
    1316:	db 9e       	mul	r13, r27
    1318:	80 0d       	add	r24, r0
    131a:	91 1d       	adc	r25, r1
    131c:	11 24       	eor	r1, r1
    131e:	f9 01       	movw	r30, r18
    1320:	25 91       	lpm	r18, Z+
    1322:	34 91       	lpm	r19, Z
    1324:	39 8b       	std	Y+17, r19	; 0x11
    1326:	28 8b       	std	Y+16, r18	; 0x10
    1328:	fc 01       	movw	r30, r24
    132a:	25 90       	lpm	r2, Z+
    132c:	34 90       	lpm	r3, Z
    132e:	fc 01       	movw	r30, r24
    1330:	32 96       	adiw	r30, 0x02	; 2
    1332:	74 90       	lpm	r7, Z
    1334:	31 96       	adiw	r30, 0x01	; 1
    1336:	a4 90       	lpm	r10, Z
    1338:	32 96       	adiw	r30, 0x02	; 2
    133a:	94 90       	lpm	r9, Z
    133c:	31 96       	adiw	r30, 0x01	; 1
    133e:	b4 90       	lpm	r11, Z
    1340:	31 e0       	ldi	r19, 0x01	; 1
    1342:	3c 15       	cp	r19, r12
    1344:	18 f0       	brcs	.+6      	; 0x134c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2a2>
    1346:	4b 81       	ldd	r20, Y+3	; 0x03
    1348:	42 30       	cpi	r20, 0x02	; 2
    134a:	68 f0       	brcs	.+26     	; 0x1366 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2bc>
    134c:	69 2d       	mov	r22, r9
    134e:	09 2c       	mov	r0, r9
    1350:	00 0c       	add	r0, r0
    1352:	77 0b       	sbc	r23, r23
    1354:	7d 83       	std	Y+5, r23	; 0x05
    1356:	6c 83       	std	Y+4, r22	; 0x04
    1358:	8b 2d       	mov	r24, r11
    135a:	0b 2c       	mov	r0, r11
    135c:	00 0c       	add	r0, r0
    135e:	99 0b       	sbc	r25, r25
    1360:	9f 83       	std	Y+7, r25	; 0x07
    1362:	8e 83       	std	Y+6, r24	; 0x06
    1364:	04 c0       	rjmp	.+8      	; 0x136e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2c4>
    1366:	1f 82       	std	Y+7, r1	; 0x07
    1368:	1e 82       	std	Y+6, r1	; 0x06
    136a:	1d 82       	std	Y+5, r1	; 0x05
    136c:	1c 82       	std	Y+4, r1	; 0x04
    136e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1370:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1372:	ed 91       	ld	r30, X+
    1374:	fc 91       	ld	r31, X
    1376:	11 97       	sbiw	r26, 0x01	; 1
    1378:	02 84       	ldd	r0, Z+10	; 0x0a
    137a:	f3 85       	ldd	r31, Z+11	; 0x0b
    137c:	e0 2d       	mov	r30, r0
    137e:	cd 01       	movw	r24, r26
    1380:	19 95       	eicall
    1382:	61 2c       	mov	r6, r1
    1384:	d1 2c       	mov	r13, r1
    1386:	81 2c       	mov	r8, r1
    1388:	fb 81       	ldd	r31, Y+3	; 0x03
    138a:	ef 2f       	mov	r30, r31
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	fb 87       	std	Y+11, r31	; 0x0b
    1390:	ea 87       	std	Y+10, r30	; 0x0a
    1392:	2c 2d       	mov	r18, r12
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	3d 87       	std	Y+13, r19	; 0x0d
    1398:	2c 87       	std	Y+12, r18	; 0x0c
    139a:	49 81       	ldd	r20, Y+1	; 0x01
    139c:	5a 81       	ldd	r21, Y+2	; 0x02
    139e:	4b 0d       	add	r20, r11
    13a0:	51 1d       	adc	r21, r1
    13a2:	b7 fc       	sbrc	r11, 7
    13a4:	5a 95       	dec	r21
    13a6:	5d 8b       	std	Y+21, r21	; 0x15
    13a8:	4c 8b       	std	Y+20, r20	; 0x14
    13aa:	b2 01       	movw	r22, r4
    13ac:	69 0d       	add	r22, r9
    13ae:	71 1d       	adc	r23, r1
    13b0:	97 fc       	sbrc	r9, 7
    13b2:	7a 95       	dec	r23
    13b4:	7f 8b       	std	Y+23, r23	; 0x17
    13b6:	6e 8b       	std	Y+22, r22	; 0x16
    13b8:	8a 14       	cp	r8, r10
    13ba:	08 f0       	brcs	.+2      	; 0x13be <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x314>
    13bc:	70 c0       	rjmp	.+224    	; 0x149e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    13be:	28 2d       	mov	r18, r8
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	4e 81       	ldd	r20, Y+6	; 0x06
    13c4:	5f 81       	ldd	r21, Y+7	; 0x07
    13c6:	42 0f       	add	r20, r18
    13c8:	53 1f       	adc	r21, r19
    13ca:	aa 85       	ldd	r26, Y+10	; 0x0a
    13cc:	bb 85       	ldd	r27, Y+11	; 0x0b
    13ce:	a4 9f       	mul	r26, r20
    13d0:	c0 01       	movw	r24, r0
    13d2:	a5 9f       	mul	r26, r21
    13d4:	90 0d       	add	r25, r0
    13d6:	b4 9f       	mul	r27, r20
    13d8:	90 0d       	add	r25, r0
    13da:	11 24       	eor	r1, r1
    13dc:	e9 81       	ldd	r30, Y+1	; 0x01
    13de:	fa 81       	ldd	r31, Y+2	; 0x02
    13e0:	e8 0f       	add	r30, r24
    13e2:	f9 1f       	adc	r31, r25
    13e4:	ff 87       	std	Y+15, r31	; 0x0f
    13e6:	ee 87       	std	Y+14, r30	; 0x0e
    13e8:	86 2d       	mov	r24, r6
    13ea:	91 2c       	mov	r9, r1
    13ec:	4c 89       	ldd	r20, Y+20	; 0x14
    13ee:	5d 89       	ldd	r21, Y+21	; 0x15
    13f0:	42 0f       	add	r20, r18
    13f2:	53 1f       	adc	r21, r19
    13f4:	5b 8b       	std	Y+19, r21	; 0x13
    13f6:	4a 8b       	std	Y+18, r20	; 0x12
    13f8:	97 14       	cp	r9, r7
    13fa:	08 f0       	brcs	.+2      	; 0x13fe <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x354>
    13fc:	4d c0       	rjmp	.+154    	; 0x1498 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3ee>
    13fe:	bb 24       	eor	r11, r11
    1400:	b3 94       	inc	r11
    1402:	b8 0e       	add	r11, r24
    1404:	87 70       	andi	r24, 0x07	; 7
    1406:	41 f4       	brne	.+16     	; 0x1418 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x36e>
    1408:	c1 01       	movw	r24, r2
    140a:	01 96       	adiw	r24, 0x01	; 1
    140c:	e8 89       	ldd	r30, Y+16	; 0x10
    140e:	f9 89       	ldd	r31, Y+17	; 0x11
    1410:	e2 0d       	add	r30, r2
    1412:	f3 1d       	adc	r31, r3
    1414:	d4 90       	lpm	r13, Z
    1416:	1c 01       	movw	r2, r24
    1418:	d7 fe       	sbrs	r13, 7
    141a:	3a c0       	rjmp	.+116    	; 0x1490 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    141c:	51 e0       	ldi	r21, 0x01	; 1
    141e:	c5 12       	cpse	r12, r21
    1420:	16 c0       	rjmp	.+44     	; 0x144e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    1422:	6b 81       	ldd	r22, Y+3	; 0x03
    1424:	61 30       	cpi	r22, 0x01	; 1
    1426:	99 f4       	brne	.+38     	; 0x144e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    1428:	aa 8d       	ldd	r26, Y+26	; 0x1a
    142a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    142c:	ed 91       	ld	r30, X+
    142e:	fc 91       	ld	r31, X
    1430:	11 97       	sbiw	r26, 0x01	; 1
    1432:	04 84       	ldd	r0, Z+12	; 0x0c
    1434:	f5 85       	ldd	r31, Z+13	; 0x0d
    1436:	e0 2d       	mov	r30, r0
    1438:	28 85       	ldd	r18, Y+8	; 0x08
    143a:	39 85       	ldd	r19, Y+9	; 0x09
    143c:	4a 89       	ldd	r20, Y+18	; 0x12
    143e:	5b 89       	ldd	r21, Y+19	; 0x13
    1440:	6e 89       	ldd	r22, Y+22	; 0x16
    1442:	7f 89       	ldd	r23, Y+23	; 0x17
    1444:	69 0d       	add	r22, r9
    1446:	71 1d       	adc	r23, r1
    1448:	cd 01       	movw	r24, r26
    144a:	19 95       	eicall
    144c:	21 c0       	rjmp	.+66     	; 0x1490 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    144e:	8c 81       	ldd	r24, Y+4	; 0x04
    1450:	9d 81       	ldd	r25, Y+5	; 0x05
    1452:	89 0d       	add	r24, r9
    1454:	91 1d       	adc	r25, r1
    1456:	ec 85       	ldd	r30, Y+12	; 0x0c
    1458:	fd 85       	ldd	r31, Y+13	; 0x0d
    145a:	8e 9f       	mul	r24, r30
    145c:	b0 01       	movw	r22, r0
    145e:	8f 9f       	mul	r24, r31
    1460:	70 0d       	add	r23, r0
    1462:	9e 9f       	mul	r25, r30
    1464:	70 0d       	add	r23, r0
    1466:	11 24       	eor	r1, r1
    1468:	64 0d       	add	r22, r4
    146a:	75 1d       	adc	r23, r5
    146c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    146e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1470:	ed 91       	ld	r30, X+
    1472:	fc 91       	ld	r31, X
    1474:	11 97       	sbiw	r26, 0x01	; 1
    1476:	06 84       	ldd	r0, Z+14	; 0x0e
    1478:	f7 85       	ldd	r31, Z+15	; 0x0f
    147a:	e0 2d       	mov	r30, r0
    147c:	e8 84       	ldd	r14, Y+8	; 0x08
    147e:	f9 84       	ldd	r15, Y+9	; 0x09
    1480:	0a 85       	ldd	r16, Y+10	; 0x0a
    1482:	1b 85       	ldd	r17, Y+11	; 0x0b
    1484:	2c 85       	ldd	r18, Y+12	; 0x0c
    1486:	3d 85       	ldd	r19, Y+13	; 0x0d
    1488:	4e 85       	ldd	r20, Y+14	; 0x0e
    148a:	5f 85       	ldd	r21, Y+15	; 0x0f
    148c:	cd 01       	movw	r24, r26
    148e:	19 95       	eicall
    1490:	dd 0c       	add	r13, r13
    1492:	93 94       	inc	r9
    1494:	8b 2d       	mov	r24, r11
    1496:	b0 cf       	rjmp	.-160    	; 0x13f8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x34e>
    1498:	67 0c       	add	r6, r7
    149a:	83 94       	inc	r8
    149c:	8d cf       	rjmp	.-230    	; 0x13b8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x30e>
    149e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    14a0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    14a2:	ed 91       	ld	r30, X+
    14a4:	fc 91       	ld	r31, X
    14a6:	11 97       	sbiw	r26, 0x01	; 1
    14a8:	06 88       	ldd	r0, Z+22	; 0x16
    14aa:	f7 89       	ldd	r31, Z+23	; 0x17
    14ac:	e0 2d       	mov	r30, r0
    14ae:	cd 01       	movw	r24, r26
    14b0:	6b 96       	adiw	r28, 0x1b	; 27
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	f8 94       	cli
    14b6:	de bf       	out	0x3e, r29	; 62
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	cd bf       	out	0x3d, r28	; 61
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	1f 91       	pop	r17
    14c2:	0f 91       	pop	r16
    14c4:	ff 90       	pop	r15
    14c6:	ef 90       	pop	r14
    14c8:	df 90       	pop	r13
    14ca:	cf 90       	pop	r12
    14cc:	bf 90       	pop	r11
    14ce:	af 90       	pop	r10
    14d0:	9f 90       	pop	r9
    14d2:	8f 90       	pop	r8
    14d4:	7f 90       	pop	r7
    14d6:	6f 90       	pop	r6
    14d8:	5f 90       	pop	r5
    14da:	4f 90       	pop	r4
    14dc:	3f 90       	pop	r3
    14de:	2f 90       	pop	r2
    14e0:	19 94       	eijmp
    14e2:	6b 96       	adiw	r28, 0x1b	; 27
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	df 90       	pop	r13
    14fc:	cf 90       	pop	r12
    14fe:	bf 90       	pop	r11
    1500:	af 90       	pop	r10
    1502:	9f 90       	pop	r9
    1504:	8f 90       	pop	r8
    1506:	7f 90       	pop	r7
    1508:	6f 90       	pop	r6
    150a:	5f 90       	pop	r5
    150c:	4f 90       	pop	r4
    150e:	3f 90       	pop	r3
    1510:	2f 90       	pop	r2
    1512:	08 95       	ret

00001514 <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    1514:	8f 92       	push	r8
    1516:	9f 92       	push	r9
    1518:	af 92       	push	r10
    151a:	cf 92       	push	r12
    151c:	ef 92       	push	r14
    151e:	ff 92       	push	r15
    1520:	0f 93       	push	r16
    1522:	1f 93       	push	r17
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	ec 01       	movw	r28, r24
    152a:	26 2f       	mov	r18, r22
  if (!gfxFont) { // 'Classic' built-in font
    152c:	89 8d       	ldd	r24, Y+25	; 0x19
    152e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1530:	00 97       	sbiw	r24, 0x00	; 0
    1532:	09 f0       	breq	.+2      	; 0x1536 <_ZN12Adafruit_GFX5writeEh+0x22>
    1534:	41 c0       	rjmp	.+130    	; 0x15b8 <_ZN12Adafruit_GFX5writeEh+0xa4>

    if (c == '\n') {              // Newline?
    1536:	6a 30       	cpi	r22, 0x0A	; 10
    1538:	59 f4       	brne	.+22     	; 0x1550 <_ZN12Adafruit_GFX5writeEh+0x3c>
      cursor_x = 0;               // Reset x to zero,
    153a:	1d 86       	std	Y+13, r1	; 0x0d
    153c:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y += textsize_y * 8; // advance y one line
    153e:	2d 89       	ldd	r18, Y+21	; 0x15
    1540:	8e 85       	ldd	r24, Y+14	; 0x0e
    1542:	9f 85       	ldd	r25, Y+15	; 0x0f
    1544:	38 e0       	ldi	r19, 0x08	; 8
    1546:	23 9f       	mul	r18, r19
    1548:	80 0d       	add	r24, r0
    154a:	91 1d       	adc	r25, r1
    154c:	11 24       	eor	r1, r1
    154e:	42 c0       	rjmp	.+132    	; 0x15d4 <_ZN12Adafruit_GFX5writeEh+0xc0>
    } else if (c != '\r') {       // Ignore carriage returns
    1550:	6d 30       	cpi	r22, 0x0D	; 13
    1552:	09 f4       	brne	.+2      	; 0x1556 <_ZN12Adafruit_GFX5writeEh+0x42>
    1554:	a8 c0       	rjmp	.+336    	; 0x16a6 <_ZN12Adafruit_GFX5writeEh+0x192>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    1556:	8f 89       	ldd	r24, Y+23	; 0x17
    1558:	88 23       	and	r24, r24
    155a:	c9 f0       	breq	.+50     	; 0x158e <_ZN12Adafruit_GFX5writeEh+0x7a>
    155c:	3c 89       	ldd	r19, Y+20	; 0x14
    155e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1560:	9d 85       	ldd	r25, Y+13	; 0x0d
    1562:	46 e0       	ldi	r20, 0x06	; 6
    1564:	34 9f       	mul	r19, r20
    1566:	80 0d       	add	r24, r0
    1568:	91 1d       	adc	r25, r1
    156a:	11 24       	eor	r1, r1
    156c:	48 85       	ldd	r20, Y+8	; 0x08
    156e:	59 85       	ldd	r21, Y+9	; 0x09
    1570:	48 17       	cp	r20, r24
    1572:	59 07       	cpc	r21, r25
    1574:	64 f4       	brge	.+24     	; 0x158e <_ZN12Adafruit_GFX5writeEh+0x7a>
        cursor_x = 0;                                       // Reset x to zero,
    1576:	1d 86       	std	Y+13, r1	; 0x0d
    1578:	1c 86       	std	Y+12, r1	; 0x0c
        cursor_y += textsize_y * 8; // advance y one line
    157a:	3d 89       	ldd	r19, Y+21	; 0x15
    157c:	8e 85       	ldd	r24, Y+14	; 0x0e
    157e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1580:	48 e0       	ldi	r20, 0x08	; 8
    1582:	34 9f       	mul	r19, r20
    1584:	80 0d       	add	r24, r0
    1586:	91 1d       	adc	r25, r1
    1588:	11 24       	eor	r1, r1
    158a:	9f 87       	std	Y+15, r25	; 0x0f
    158c:	8e 87       	std	Y+14, r24	; 0x0e
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
               textsize_y);
    158e:	ea 88       	ldd	r14, Y+18	; 0x12
    1590:	fb 88       	ldd	r15, Y+19	; 0x13
    1592:	08 89       	ldd	r16, Y+16	; 0x10
    1594:	19 89       	ldd	r17, Y+17	; 0x11
    1596:	4e 85       	ldd	r20, Y+14	; 0x0e
    1598:	5f 85       	ldd	r21, Y+15	; 0x0f
    159a:	6c 85       	ldd	r22, Y+12	; 0x0c
    159c:	7d 85       	ldd	r23, Y+13	; 0x0d
    159e:	ad 88       	ldd	r10, Y+21	; 0x15
    15a0:	cc 88       	ldd	r12, Y+20	; 0x14
    15a2:	ce 01       	movw	r24, r28
    15a4:	82 dd       	rcall	.-1276   	; 0x10aa <_ZN12Adafruit_GFX8drawCharEiihjjhh>
      cursor_x += textsize_x * 6; // Advance x one char
    15a6:	2c 89       	ldd	r18, Y+20	; 0x14
    15a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    15aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    15ac:	36 e0       	ldi	r19, 0x06	; 6
    15ae:	23 9f       	mul	r18, r19
    15b0:	80 0d       	add	r24, r0
    15b2:	91 1d       	adc	r25, r1
    15b4:	11 24       	eor	r1, r1
    15b6:	3e c0       	rjmp	.+124    	; 0x1634 <_ZN12Adafruit_GFX5writeEh+0x120>
    }

  } else { // Custom font

    if (c == '\n') {
    15b8:	6a 30       	cpi	r22, 0x0A	; 10
    15ba:	79 f4       	brne	.+30     	; 0x15da <_ZN12Adafruit_GFX5writeEh+0xc6>
      cursor_x = 0;
    15bc:	1d 86       	std	Y+13, r1	; 0x0d
    15be:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    15c0:	2d 89       	ldd	r18, Y+21	; 0x15
    15c2:	fc 01       	movw	r30, r24
    15c4:	38 96       	adiw	r30, 0x08	; 8
    15c6:	e4 91       	lpm	r30, Z
    15c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    15ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    15cc:	2e 9f       	mul	r18, r30
    15ce:	80 0d       	add	r24, r0
    15d0:	91 1d       	adc	r25, r1
    15d2:	11 24       	eor	r1, r1
    15d4:	9f 87       	std	Y+15, r25	; 0x0f
    15d6:	8e 87       	std	Y+14, r24	; 0x0e
    15d8:	66 c0       	rjmp	.+204    	; 0x16a6 <_ZN12Adafruit_GFX5writeEh+0x192>
    } else if (c != '\r') {
    15da:	6d 30       	cpi	r22, 0x0D	; 13
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <_ZN12Adafruit_GFX5writeEh+0xcc>
    15de:	63 c0       	rjmp	.+198    	; 0x16a6 <_ZN12Adafruit_GFX5writeEh+0x192>
      uint8_t first = pgm_read_byte(&gfxFont->first);
    15e0:	fc 01       	movw	r30, r24
    15e2:	34 96       	adiw	r30, 0x04	; 4
    15e4:	34 91       	lpm	r19, Z
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    15e6:	63 17       	cp	r22, r19
    15e8:	08 f4       	brcc	.+2      	; 0x15ec <_ZN12Adafruit_GFX5writeEh+0xd8>
    15ea:	5d c0       	rjmp	.+186    	; 0x16a6 <_ZN12Adafruit_GFX5writeEh+0x192>
    15ec:	32 96       	adiw	r30, 0x02	; 2
    15ee:	e4 91       	lpm	r30, Z
    15f0:	e6 17       	cp	r30, r22
    15f2:	08 f4       	brcc	.+2      	; 0x15f6 <_ZN12Adafruit_GFX5writeEh+0xe2>
    15f4:	58 c0       	rjmp	.+176    	; 0x16a6 <_ZN12Adafruit_GFX5writeEh+0x192>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    15f6:	46 2f       	mov	r20, r22
    15f8:	43 1b       	sub	r20, r19
    15fa:	34 2f       	mov	r19, r20
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    15fc:	fc 01       	movw	r30, r24
    15fe:	32 96       	adiw	r30, 0x02	; 2
    1600:	85 90       	lpm	r8, Z+
    1602:	94 90       	lpm	r9, Z
    1604:	47 e0       	ldi	r20, 0x07	; 7
    1606:	34 9f       	mul	r19, r20
    1608:	80 0c       	add	r8, r0
    160a:	91 1c       	adc	r9, r1
    160c:	11 24       	eor	r1, r1
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
    160e:	f4 01       	movw	r30, r8
    1610:	32 96       	adiw	r30, 0x02	; 2
    1612:	34 91       	lpm	r19, Z
                h = pgm_read_byte(&glyph->height);
    1614:	31 96       	adiw	r30, 0x01	; 1
    1616:	e4 91       	lpm	r30, Z
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    1618:	33 23       	and	r19, r19
    161a:	11 f0       	breq	.+4      	; 0x1620 <_ZN12Adafruit_GFX5writeEh+0x10c>
    161c:	e1 11       	cpse	r30, r1
    161e:	0d c0       	rjmp	.+26     	; 0x163a <_ZN12Adafruit_GFX5writeEh+0x126>
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    1620:	f4 01       	movw	r30, r8
    1622:	34 96       	adiw	r30, 0x04	; 4
    1624:	e4 91       	lpm	r30, Z
    1626:	2c 89       	ldd	r18, Y+20	; 0x14
    1628:	8c 85       	ldd	r24, Y+12	; 0x0c
    162a:	9d 85       	ldd	r25, Y+13	; 0x0d
    162c:	e2 9f       	mul	r30, r18
    162e:	80 0d       	add	r24, r0
    1630:	91 1d       	adc	r25, r1
    1632:	11 24       	eor	r1, r1
    1634:	9d 87       	std	Y+13, r25	; 0x0d
    1636:	8c 87       	std	Y+12, r24	; 0x0c
      }
    }
  }
  return 1;
    1638:	36 c0       	rjmp	.+108    	; 0x16a6 <_ZN12Adafruit_GFX5writeEh+0x192>
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    163a:	f4 01       	movw	r30, r8
    163c:	35 96       	adiw	r30, 0x05	; 5
    163e:	44 91       	lpm	r20, Z
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    1640:	5f 89       	ldd	r21, Y+23	; 0x17
    1642:	55 23       	and	r21, r21
    1644:	19 f1       	breq	.+70     	; 0x168c <_ZN12Adafruit_GFX5writeEh+0x178>
    1646:	5c 89       	ldd	r21, Y+20	; 0x14
    1648:	e3 2f       	mov	r30, r19
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	e4 0f       	add	r30, r20
    164e:	f1 1d       	adc	r31, r1
    1650:	47 fd       	sbrc	r20, 7
    1652:	fa 95       	dec	r31
    1654:	5e 9f       	mul	r21, r30
    1656:	b0 01       	movw	r22, r0
    1658:	5f 9f       	mul	r21, r31
    165a:	70 0d       	add	r23, r0
    165c:	11 24       	eor	r1, r1
    165e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1660:	5d 85       	ldd	r21, Y+13	; 0x0d
    1662:	46 0f       	add	r20, r22
    1664:	57 1f       	adc	r21, r23
    1666:	68 85       	ldd	r22, Y+8	; 0x08
    1668:	79 85       	ldd	r23, Y+9	; 0x09
    166a:	64 17       	cp	r22, r20
    166c:	75 07       	cpc	r23, r21
    166e:	74 f4       	brge	.+28     	; 0x168c <_ZN12Adafruit_GFX5writeEh+0x178>
            cursor_x = 0;
    1670:	1d 86       	std	Y+13, r1	; 0x0d
    1672:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += (int16_t)textsize_y *
    1674:	3d 89       	ldd	r19, Y+21	; 0x15
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    1676:	fc 01       	movw	r30, r24
    1678:	38 96       	adiw	r30, 0x08	; 8
    167a:	e4 91       	lpm	r30, Z
    167c:	8e 85       	ldd	r24, Y+14	; 0x0e
    167e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1680:	3e 9f       	mul	r19, r30
    1682:	80 0d       	add	r24, r0
    1684:	91 1d       	adc	r25, r1
    1686:	11 24       	eor	r1, r1
    1688:	9f 87       	std	Y+15, r25	; 0x0f
    168a:	8e 87       	std	Y+14, r24	; 0x0e
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
    168c:	ea 88       	ldd	r14, Y+18	; 0x12
    168e:	fb 88       	ldd	r15, Y+19	; 0x13
    1690:	08 89       	ldd	r16, Y+16	; 0x10
    1692:	19 89       	ldd	r17, Y+17	; 0x11
    1694:	4e 85       	ldd	r20, Y+14	; 0x0e
    1696:	5f 85       	ldd	r21, Y+15	; 0x0f
    1698:	6c 85       	ldd	r22, Y+12	; 0x0c
    169a:	7d 85       	ldd	r23, Y+13	; 0x0d
    169c:	ad 88       	ldd	r10, Y+21	; 0x15
    169e:	cc 88       	ldd	r12, Y+20	; 0x14
    16a0:	ce 01       	movw	r24, r28
    16a2:	03 dd       	rcall	.-1530   	; 0x10aa <_ZN12Adafruit_GFX8drawCharEiihjjhh>
    16a4:	bd cf       	rjmp	.-134    	; 0x1620 <_ZN12Adafruit_GFX5writeEh+0x10c>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
  return 1;
}
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	df 91       	pop	r29
    16ac:	cf 91       	pop	r28
    16ae:	1f 91       	pop	r17
    16b0:	0f 91       	pop	r16
    16b2:	ff 90       	pop	r15
    16b4:	ef 90       	pop	r14
    16b6:	cf 90       	pop	r12
    16b8:	af 90       	pop	r10
    16ba:	9f 90       	pop	r9
    16bc:	8f 90       	pop	r8
    16be:	08 95       	ret

000016c0 <_ZN16Adafruit_SSD13069drawPixelEiij>:
  ssd1306_commandList(init5, sizeof(init5));

  TRANSACTION_END

  return true; // Success
}
    16c0:	fc 01       	movw	r30, r24
    16c2:	77 fd       	sbrc	r23, 7
    16c4:	b9 c0       	rjmp	.+370    	; 0x1838 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    16c6:	80 85       	ldd	r24, Z+8	; 0x08
    16c8:	91 85       	ldd	r25, Z+9	; 0x09
    16ca:	68 17       	cp	r22, r24
    16cc:	79 07       	cpc	r23, r25
    16ce:	0c f0       	brlt	.+2      	; 0x16d2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x12>
    16d0:	b3 c0       	rjmp	.+358    	; 0x1838 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    16d2:	57 fd       	sbrc	r21, 7
    16d4:	b1 c0       	rjmp	.+354    	; 0x1838 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    16d6:	82 85       	ldd	r24, Z+10	; 0x0a
    16d8:	93 85       	ldd	r25, Z+11	; 0x0b
    16da:	48 17       	cp	r20, r24
    16dc:	59 07       	cpc	r21, r25
    16de:	0c f0       	brlt	.+2      	; 0x16e2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x22>
    16e0:	08 95       	ret
    16e2:	86 89       	ldd	r24, Z+22	; 0x16
    16e4:	82 30       	cpi	r24, 0x02	; 2
    16e6:	79 f4       	brne	.+30     	; 0x1706 <_ZN16Adafruit_SSD13069drawPixelEiij+0x46>
    16e8:	84 81       	ldd	r24, Z+4	; 0x04
    16ea:	95 81       	ldd	r25, Z+5	; 0x05
    16ec:	dc 01       	movw	r26, r24
    16ee:	a6 1b       	sub	r26, r22
    16f0:	b7 0b       	sbc	r27, r23
    16f2:	bd 01       	movw	r22, r26
    16f4:	61 50       	subi	r22, 0x01	; 1
    16f6:	71 09       	sbc	r23, r1
    16f8:	86 81       	ldd	r24, Z+6	; 0x06
    16fa:	97 81       	ldd	r25, Z+7	; 0x07
    16fc:	dc 01       	movw	r26, r24
    16fe:	a4 1b       	sub	r26, r20
    1700:	b5 0b       	sbc	r27, r21
    1702:	ad 01       	movw	r20, r26
    1704:	0e c0       	rjmp	.+28     	; 0x1722 <_ZN16Adafruit_SSD13069drawPixelEiij+0x62>
    1706:	83 30       	cpi	r24, 0x03	; 3
    1708:	09 f0       	breq	.+2      	; 0x170c <_ZN16Adafruit_SSD13069drawPixelEiij+0x4c>
    170a:	84 c0       	rjmp	.+264    	; 0x1814 <_ZN16Adafruit_SSD13069drawPixelEiij+0x154>
    170c:	64 27       	eor	r22, r20
    170e:	75 27       	eor	r23, r21
    1710:	ca 01       	movw	r24, r20
    1712:	86 27       	eor	r24, r22
    1714:	97 27       	eor	r25, r23
    1716:	68 27       	eor	r22, r24
    1718:	79 27       	eor	r23, r25
    171a:	46 81       	ldd	r20, Z+6	; 0x06
    171c:	57 81       	ldd	r21, Z+7	; 0x07
    171e:	48 1b       	sub	r20, r24
    1720:	59 0b       	sbc	r21, r25
    1722:	41 50       	subi	r20, 0x01	; 1
    1724:	51 09       	sbc	r21, r1
    1726:	21 30       	cpi	r18, 0x01	; 1
    1728:	31 05       	cpc	r19, r1
    172a:	31 f0       	breq	.+12     	; 0x1738 <_ZN16Adafruit_SSD13069drawPixelEiij+0x78>
    172c:	48 f1       	brcs	.+82     	; 0x1780 <_ZN16Adafruit_SSD13069drawPixelEiij+0xc0>
    172e:	22 30       	cpi	r18, 0x02	; 2
    1730:	31 05       	cpc	r19, r1
    1732:	09 f4       	brne	.+2      	; 0x1736 <_ZN16Adafruit_SSD13069drawPixelEiij+0x76>
    1734:	4a c0       	rjmp	.+148    	; 0x17ca <_ZN16Adafruit_SSD13069drawPixelEiij+0x10a>
    1736:	08 95       	ret
    1738:	ca 01       	movw	r24, r20
    173a:	57 fd       	sbrc	r21, 7
    173c:	07 96       	adiw	r24, 0x07	; 7
    173e:	9c 01       	movw	r18, r24
    1740:	a3 e0       	ldi	r26, 0x03	; 3
    1742:	35 95       	asr	r19
    1744:	27 95       	ror	r18
    1746:	aa 95       	dec	r26
    1748:	e1 f7       	brne	.-8      	; 0x1742 <_ZN16Adafruit_SSD13069drawPixelEiij+0x82>
    174a:	a4 81       	ldd	r26, Z+4	; 0x04
    174c:	b5 81       	ldd	r27, Z+5	; 0x05
    174e:	2a 9f       	mul	r18, r26
    1750:	c0 01       	movw	r24, r0
    1752:	2b 9f       	mul	r18, r27
    1754:	90 0d       	add	r25, r0
    1756:	3a 9f       	mul	r19, r26
    1758:	90 0d       	add	r25, r0
    175a:	11 24       	eor	r1, r1
    175c:	68 0f       	add	r22, r24
    175e:	79 1f       	adc	r23, r25
    1760:	07 8c       	ldd	r0, Z+31	; 0x1f
    1762:	f0 a1       	ldd	r31, Z+32	; 0x20
    1764:	e0 2d       	mov	r30, r0
    1766:	e6 0f       	add	r30, r22
    1768:	f7 1f       	adc	r31, r23
    176a:	47 70       	andi	r20, 0x07	; 7
    176c:	55 27       	eor	r21, r21
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	01 c0       	rjmp	.+2      	; 0x1776 <_ZN16Adafruit_SSD13069drawPixelEiij+0xb6>
    1774:	88 0f       	add	r24, r24
    1776:	4a 95       	dec	r20
    1778:	ea f7       	brpl	.-6      	; 0x1774 <_ZN16Adafruit_SSD13069drawPixelEiij+0xb4>
    177a:	90 81       	ld	r25, Z
    177c:	89 2b       	or	r24, r25
    177e:	48 c0       	rjmp	.+144    	; 0x1810 <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    1780:	ca 01       	movw	r24, r20
    1782:	57 fd       	sbrc	r21, 7
    1784:	07 96       	adiw	r24, 0x07	; 7
    1786:	9c 01       	movw	r18, r24
    1788:	93 e0       	ldi	r25, 0x03	; 3
    178a:	35 95       	asr	r19
    178c:	27 95       	ror	r18
    178e:	9a 95       	dec	r25
    1790:	e1 f7       	brne	.-8      	; 0x178a <_ZN16Adafruit_SSD13069drawPixelEiij+0xca>
    1792:	a4 81       	ldd	r26, Z+4	; 0x04
    1794:	b5 81       	ldd	r27, Z+5	; 0x05
    1796:	2a 9f       	mul	r18, r26
    1798:	c0 01       	movw	r24, r0
    179a:	2b 9f       	mul	r18, r27
    179c:	90 0d       	add	r25, r0
    179e:	3a 9f       	mul	r19, r26
    17a0:	90 0d       	add	r25, r0
    17a2:	11 24       	eor	r1, r1
    17a4:	68 0f       	add	r22, r24
    17a6:	79 1f       	adc	r23, r25
    17a8:	07 8c       	ldd	r0, Z+31	; 0x1f
    17aa:	f0 a1       	ldd	r31, Z+32	; 0x20
    17ac:	e0 2d       	mov	r30, r0
    17ae:	e6 0f       	add	r30, r22
    17b0:	f7 1f       	adc	r31, r23
    17b2:	47 70       	andi	r20, 0x07	; 7
    17b4:	55 27       	eor	r21, r21
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	01 c0       	rjmp	.+2      	; 0x17be <_ZN16Adafruit_SSD13069drawPixelEiij+0xfe>
    17bc:	88 0f       	add	r24, r24
    17be:	4a 95       	dec	r20
    17c0:	ea f7       	brpl	.-6      	; 0x17bc <_ZN16Adafruit_SSD13069drawPixelEiij+0xfc>
    17c2:	80 95       	com	r24
    17c4:	90 81       	ld	r25, Z
    17c6:	89 23       	and	r24, r25
    17c8:	23 c0       	rjmp	.+70     	; 0x1810 <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    17ca:	ca 01       	movw	r24, r20
    17cc:	57 fd       	sbrc	r21, 7
    17ce:	07 96       	adiw	r24, 0x07	; 7
    17d0:	9c 01       	movw	r18, r24
    17d2:	83 e0       	ldi	r24, 0x03	; 3
    17d4:	35 95       	asr	r19
    17d6:	27 95       	ror	r18
    17d8:	8a 95       	dec	r24
    17da:	e1 f7       	brne	.-8      	; 0x17d4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x114>
    17dc:	a4 81       	ldd	r26, Z+4	; 0x04
    17de:	b5 81       	ldd	r27, Z+5	; 0x05
    17e0:	2a 9f       	mul	r18, r26
    17e2:	c0 01       	movw	r24, r0
    17e4:	2b 9f       	mul	r18, r27
    17e6:	90 0d       	add	r25, r0
    17e8:	3a 9f       	mul	r19, r26
    17ea:	90 0d       	add	r25, r0
    17ec:	11 24       	eor	r1, r1
    17ee:	68 0f       	add	r22, r24
    17f0:	79 1f       	adc	r23, r25
    17f2:	07 8c       	ldd	r0, Z+31	; 0x1f
    17f4:	f0 a1       	ldd	r31, Z+32	; 0x20
    17f6:	e0 2d       	mov	r30, r0
    17f8:	e6 0f       	add	r30, r22
    17fa:	f7 1f       	adc	r31, r23
    17fc:	47 70       	andi	r20, 0x07	; 7
    17fe:	55 27       	eor	r21, r21
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	01 c0       	rjmp	.+2      	; 0x1808 <_ZN16Adafruit_SSD13069drawPixelEiij+0x148>
    1806:	88 0f       	add	r24, r24
    1808:	4a 95       	dec	r20
    180a:	ea f7       	brpl	.-6      	; 0x1806 <_ZN16Adafruit_SSD13069drawPixelEiij+0x146>
    180c:	90 81       	ld	r25, Z
    180e:	89 27       	eor	r24, r25
    1810:	80 83       	st	Z, r24
    1812:	08 95       	ret
    1814:	81 30       	cpi	r24, 0x01	; 1
    1816:	09 f0       	breq	.+2      	; 0x181a <_ZN16Adafruit_SSD13069drawPixelEiij+0x15a>
    1818:	86 cf       	rjmp	.-244    	; 0x1726 <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    181a:	64 27       	eor	r22, r20
    181c:	75 27       	eor	r23, r21
    181e:	46 27       	eor	r20, r22
    1820:	57 27       	eor	r21, r23
    1822:	64 27       	eor	r22, r20
    1824:	75 27       	eor	r23, r21
    1826:	84 81       	ldd	r24, Z+4	; 0x04
    1828:	95 81       	ldd	r25, Z+5	; 0x05
    182a:	dc 01       	movw	r26, r24
    182c:	a6 1b       	sub	r26, r22
    182e:	b7 0b       	sbc	r27, r23
    1830:	bd 01       	movw	r22, r26
    1832:	61 50       	subi	r22, 0x01	; 1
    1834:	71 09       	sbc	r23, r1
    1836:	77 cf       	rjmp	.-274    	; 0x1726 <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    1838:	08 95       	ret

0000183a <_ZN8SPIClass8transferEh>:
    183a:	8e bd       	out	0x2e, r24	; 46
    183c:	00 00       	nop
    183e:	0d b4       	in	r0, 0x2d	; 45
    1840:	07 fe       	sbrs	r0, 7
    1842:	fd cf       	rjmp	.-6      	; 0x183e <_ZN8SPIClass8transferEh+0x4>
    1844:	8e b5       	in	r24, 0x2e	; 46
    1846:	08 95       	ret

00001848 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
    1848:	4f 92       	push	r4
    184a:	5f 92       	push	r5
    184c:	6f 92       	push	r6
    184e:	7f 92       	push	r7
    1850:	8f 92       	push	r8
    1852:	9f 92       	push	r9
    1854:	af 92       	push	r10
    1856:	bf 92       	push	r11
    1858:	cf 92       	push	r12
    185a:	df 92       	push	r13
    185c:	ef 92       	push	r14
    185e:	ff 92       	push	r15
    1860:	0f 93       	push	r16
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	3c 01       	movw	r6, r24
    186c:	29 01       	movw	r4, r18
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	70 e0       	ldi	r23, 0x00	; 0
    1872:	f9 db       	rcall	.-2062   	; 0x1066 <_ZN12Adafruit_GFXC1Eii>
    1874:	89 e8       	ldi	r24, 0x89	; 137
    1876:	94 e0       	ldi	r25, 0x04	; 4
    1878:	f3 01       	movw	r30, r6
    187a:	91 83       	std	Z+1, r25	; 0x01
    187c:	80 83       	st	Z, r24
    187e:	14 8e       	std	Z+28, r1	; 0x1c
    1880:	13 8e       	std	Z+27, r1	; 0x1b
    1882:	41 14       	cp	r4, r1
    1884:	51 04       	cpc	r5, r1
    1886:	11 f0       	breq	.+4      	; 0x188c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x44>
    1888:	c2 01       	movw	r24, r4
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x48>
    188c:	8e ea       	ldi	r24, 0xAE	; 174
    188e:	95 e0       	ldi	r25, 0x05	; 5
    1890:	f3 01       	movw	r30, r6
    1892:	96 8f       	std	Z+30, r25	; 0x1e
    1894:	85 8f       	std	Z+29, r24	; 0x1d
    1896:	10 a2       	std	Z+32, r1	; 0x20
    1898:	17 8e       	std	Z+31, r1	; 0x1f
    189a:	8f ef       	ldi	r24, 0xFF	; 255
    189c:	84 a3       	std	Z+36, r24	; 0x24
    189e:	85 a3       	std	Z+37, r24	; 0x25
    18a0:	86 a3       	std	Z+38, r24	; 0x26
    18a2:	87 a3       	std	Z+39, r24	; 0x27
    18a4:	00 a7       	std	Z+40, r16	; 0x28
    18a6:	c5 aa       	std	Z+53, r12	; 0x35
    18a8:	d6 aa       	std	Z+54, r13	; 0x36
    18aa:	e7 aa       	std	Z+55, r14	; 0x37
    18ac:	f0 ae       	std	Z+56, r15	; 0x38
    18ae:	81 ae       	std	Z+57, r8	; 0x39
    18b0:	92 ae       	std	Z+58, r9	; 0x3a
    18b2:	a3 ae       	std	Z+59, r10	; 0x3b
    18b4:	b4 ae       	std	Z+60, r11	; 0x3c
    18b6:	80 e5       	ldi	r24, 0x50	; 80
    18b8:	86 af       	std	Z+62, r24	; 0x3e
    18ba:	17 ae       	std	Z+63, r1	; 0x3f
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	0f 91       	pop	r16
    18c2:	ff 90       	pop	r15
    18c4:	ef 90       	pop	r14
    18c6:	df 90       	pop	r13
    18c8:	cf 90       	pop	r12
    18ca:	bf 90       	pop	r11
    18cc:	af 90       	pop	r10
    18ce:	9f 90       	pop	r9
    18d0:	8f 90       	pop	r8
    18d2:	7f 90       	pop	r7
    18d4:	6f 90       	pop	r6
    18d6:	5f 90       	pop	r5
    18d8:	4f 90       	pop	r4
    18da:	08 95       	ret

000018dc <_ZN16Adafruit_SSD1306D1Ev>:
    18dc:	29 e8       	ldi	r18, 0x89	; 137
    18de:	34 e0       	ldi	r19, 0x04	; 4
    18e0:	fc 01       	movw	r30, r24
    18e2:	31 83       	std	Z+1, r19	; 0x01
    18e4:	20 83       	st	Z, r18
    18e6:	87 8d       	ldd	r24, Z+31	; 0x1f
    18e8:	90 a1       	ldd	r25, Z+32	; 0x20
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	11 f0       	breq	.+4      	; 0x18f2 <_ZN16Adafruit_SSD1306D1Ev+0x16>
    18ee:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <free>
    18f2:	08 95       	ret

000018f4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
    18f4:	1f 93       	push	r17
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	fc 01       	movw	r30, r24
    18fc:	85 8d       	ldd	r24, Z+29	; 0x1d
    18fe:	96 8d       	ldd	r25, Z+30	; 0x1e
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	19 f1       	breq	.+70     	; 0x194a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x56>
    1904:	16 2f       	mov	r17, r22
    1906:	ef 01       	movw	r28, r30
    1908:	61 a1       	ldd	r22, Z+33	; 0x21
    190a:	06 2e       	mov	r0, r22
    190c:	00 0c       	add	r0, r0
    190e:	77 0b       	sbc	r23, r23
    1910:	0e 94 bd 14 	call	0x297a	; 0x297a <_ZN7TwoWire17beginTransmissionEi>
    1914:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1916:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1918:	dc 01       	movw	r26, r24
    191a:	ed 91       	ld	r30, X+
    191c:	fc 91       	ld	r31, X
    191e:	01 90       	ld	r0, Z+
    1920:	f0 81       	ld	r31, Z
    1922:	e0 2d       	mov	r30, r0
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	19 95       	eicall
    1928:	8d 8d       	ldd	r24, Y+29	; 0x1d
    192a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    192c:	dc 01       	movw	r26, r24
    192e:	ed 91       	ld	r30, X+
    1930:	fc 91       	ld	r31, X
    1932:	01 90       	ld	r0, Z+
    1934:	f0 81       	ld	r31, Z
    1936:	e0 2d       	mov	r30, r0
    1938:	61 2f       	mov	r22, r17
    193a:	19 95       	eicall
    193c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    193e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	1f 91       	pop	r17
    1946:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <_ZN7TwoWire15endTransmissionEv>
    194a:	a5 a5       	ldd	r26, Z+45	; 0x2d
    194c:	b6 a5       	ldd	r27, Z+46	; 0x2e
    194e:	9c 91       	ld	r25, X
    1950:	83 a9       	ldd	r24, Z+51	; 0x33
    1952:	80 95       	com	r24
    1954:	89 23       	and	r24, r25
    1956:	8c 93       	st	X, r24
    1958:	83 8d       	ldd	r24, Z+27	; 0x1b
    195a:	94 8d       	ldd	r25, Z+28	; 0x1c
    195c:	89 2b       	or	r24, r25
    195e:	29 f0       	breq	.+10     	; 0x196a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x76>
    1960:	86 2f       	mov	r24, r22
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	68 cf       	rjmp	.-304    	; 0x183a <_ZN8SPIClass8transferEh>
    196a:	28 e0       	ldi	r18, 0x08	; 8
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	80 e8       	ldi	r24, 0x80	; 128
    1970:	a1 a5       	ldd	r26, Z+41	; 0x29
    1972:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1974:	91 a9       	ldd	r25, Z+49	; 0x31
    1976:	46 2f       	mov	r20, r22
    1978:	48 23       	and	r20, r24
    197a:	19 f0       	breq	.+6      	; 0x1982 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x8e>
    197c:	4c 91       	ld	r20, X
    197e:	94 2b       	or	r25, r20
    1980:	03 c0       	rjmp	.+6      	; 0x1988 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x94>
    1982:	4c 91       	ld	r20, X
    1984:	90 95       	com	r25
    1986:	94 23       	and	r25, r20
    1988:	9c 93       	st	X, r25
    198a:	a3 a5       	ldd	r26, Z+43	; 0x2b
    198c:	b4 a5       	ldd	r27, Z+44	; 0x2c
    198e:	4c 91       	ld	r20, X
    1990:	92 a9       	ldd	r25, Z+50	; 0x32
    1992:	94 2b       	or	r25, r20
    1994:	9c 93       	st	X, r25
    1996:	a3 a5       	ldd	r26, Z+43	; 0x2b
    1998:	b4 a5       	ldd	r27, Z+44	; 0x2c
    199a:	4c 91       	ld	r20, X
    199c:	92 a9       	ldd	r25, Z+50	; 0x32
    199e:	90 95       	com	r25
    19a0:	94 23       	and	r25, r20
    19a2:	9c 93       	st	X, r25
    19a4:	86 95       	lsr	r24
    19a6:	21 50       	subi	r18, 0x01	; 1
    19a8:	31 09       	sbc	r19, r1
    19aa:	11 f7       	brne	.-60     	; 0x1970 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x7c>
    19ac:	df 91       	pop	r29
    19ae:	cf 91       	pop	r28
    19b0:	1f 91       	pop	r17
    19b2:	08 95       	ret

000019b4 <_ZN16Adafruit_SSD130613invertDisplayEb>:
    19b4:	1f 93       	push	r17
    19b6:	cf 93       	push	r28
    19b8:	df 93       	push	r29
    19ba:	ec 01       	movw	r28, r24
    19bc:	16 2f       	mov	r17, r22
    19be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	31 f0       	breq	.+12     	; 0x19d2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x1e>
    19c6:	4d a9       	ldd	r20, Y+53	; 0x35
    19c8:	5e a9       	ldd	r21, Y+54	; 0x36
    19ca:	6f a9       	ldd	r22, Y+55	; 0x37
    19cc:	78 ad       	ldd	r23, Y+56	; 0x38
    19ce:	c8 d7       	rcall	.+3984   	; 0x2960 <_ZN7TwoWire8setClockEm>
    19d0:	0e c0       	rjmp	.+28     	; 0x19ee <_ZN16Adafruit_SSD130613invertDisplayEb+0x3a>
    19d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19d6:	89 2b       	or	r24, r25
    19d8:	19 f0       	breq	.+6      	; 0x19e0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>
    19da:	8e ad       	ldd	r24, Y+62	; 0x3e
    19dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    19de:	7d d8       	rcall	.-3846   	; 0xada <_ZN8SPIClass16beginTransactionE11SPISettings>
    19e0:	ef a5       	ldd	r30, Y+47	; 0x2f
    19e2:	f8 a9       	ldd	r31, Y+48	; 0x30
    19e4:	90 81       	ld	r25, Z
    19e6:	8c a9       	ldd	r24, Y+52	; 0x34
    19e8:	80 95       	com	r24
    19ea:	89 23       	and	r24, r25
    19ec:	80 83       	st	Z, r24
    19ee:	11 11       	cpse	r17, r1
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x42>
    19f2:	66 ea       	ldi	r22, 0xA6	; 166
    19f4:	01 c0       	rjmp	.+2      	; 0x19f8 <_ZN16Adafruit_SSD130613invertDisplayEb+0x44>
    19f6:	67 ea       	ldi	r22, 0xA7	; 167
    19f8:	ce 01       	movw	r24, r28
    19fa:	7c df       	rcall	.-264    	; 0x18f4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    19fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	41 f0       	breq	.+16     	; 0x1a14 <_ZN16Adafruit_SSD130613invertDisplayEb+0x60>
    1a04:	49 ad       	ldd	r20, Y+57	; 0x39
    1a06:	5a ad       	ldd	r21, Y+58	; 0x3a
    1a08:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a0a:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	1f 91       	pop	r17
    1a12:	a6 c7       	rjmp	.+3916   	; 0x2960 <_ZN7TwoWire8setClockEm>
    1a14:	ef a5       	ldd	r30, Y+47	; 0x2f
    1a16:	f8 a9       	ldd	r31, Y+48	; 0x30
    1a18:	90 81       	ld	r25, Z
    1a1a:	8c a9       	ldd	r24, Y+52	; 0x34
    1a1c:	89 2b       	or	r24, r25
    1a1e:	80 83       	st	Z, r24
    1a20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a24:	89 2b       	or	r24, r25
    1a26:	21 f0       	breq	.+8      	; 0x1a30 <_ZN16Adafruit_SSD130613invertDisplayEb+0x7c>
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	1f 91       	pop	r17
    1a2e:	6f c8       	rjmp	.-3874   	; 0xb0e <_ZN8SPIClass14endTransactionEv>
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	1f 91       	pop	r17
    1a36:	08 95       	ret

00001a38 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>:
  else
    drawFastHLineInternal(x, y, w, color);
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w,
                                             uint16_t color) {
    1a38:	0f 93       	push	r16
    1a3a:	1f 93       	push	r17
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	dc 01       	movw	r26, r24

  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
    1a42:	57 fd       	sbrc	r21, 7
    1a44:	64 c0       	rjmp	.+200    	; 0x1b0e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    1a46:	16 96       	adiw	r26, 0x06	; 6
    1a48:	8d 91       	ld	r24, X+
    1a4a:	9c 91       	ld	r25, X
    1a4c:	17 97       	sbiw	r26, 0x07	; 7
    1a4e:	48 17       	cp	r20, r24
    1a50:	59 07       	cpc	r21, r25
    1a52:	0c f0       	brlt	.+2      	; 0x1a56 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1e>
    1a54:	5c c0       	rjmp	.+184    	; 0x1b0e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    if (x < 0) {                  // Clip left
    1a56:	77 ff       	sbrs	r23, 7
    1a58:	04 c0       	rjmp	.+8      	; 0x1a62 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x2a>
      w += x;
    1a5a:	26 0f       	add	r18, r22
    1a5c:	37 1f       	adc	r19, r23
      x = 0;
    1a5e:	60 e0       	ldi	r22, 0x00	; 0
    1a60:	70 e0       	ldi	r23, 0x00	; 0
    }
    if ((x + w) > WIDTH) { // Clip right
    1a62:	14 96       	adiw	r26, 0x04	; 4
    1a64:	cd 91       	ld	r28, X+
    1a66:	dc 91       	ld	r29, X
    1a68:	15 97       	sbiw	r26, 0x05	; 5
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	82 0f       	add	r24, r18
    1a6e:	93 1f       	adc	r25, r19
    1a70:	c8 17       	cp	r28, r24
    1a72:	d9 07       	cpc	r29, r25
    1a74:	1c f4       	brge	.+6      	; 0x1a7c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x44>
      w = (WIDTH - x);
    1a76:	9e 01       	movw	r18, r28
    1a78:	26 1b       	sub	r18, r22
    1a7a:	37 0b       	sbc	r19, r23
    }
    if (w > 0) { // Proceed only if width is positive
    1a7c:	12 16       	cp	r1, r18
    1a7e:	13 06       	cpc	r1, r19
    1a80:	0c f0       	brlt	.+2      	; 0x1a84 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x4c>
    1a82:	45 c0       	rjmp	.+138    	; 0x1b0e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
    1a84:	fa 01       	movw	r30, r20
    1a86:	57 fd       	sbrc	r21, 7
    1a88:	37 96       	adiw	r30, 0x07	; 7
    1a8a:	cf 01       	movw	r24, r30
    1a8c:	e3 e0       	ldi	r30, 0x03	; 3
    1a8e:	95 95       	asr	r25
    1a90:	87 95       	ror	r24
    1a92:	ea 95       	dec	r30
    1a94:	e1 f7       	brne	.-8      	; 0x1a8e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x56>
    1a96:	8c 9f       	mul	r24, r28
    1a98:	f0 01       	movw	r30, r0
    1a9a:	8d 9f       	mul	r24, r29
    1a9c:	f0 0d       	add	r31, r0
    1a9e:	9c 9f       	mul	r25, r28
    1aa0:	f0 0d       	add	r31, r0
    1aa2:	11 24       	eor	r1, r1
    1aa4:	6e 0f       	add	r22, r30
    1aa6:	7f 1f       	adc	r23, r31
    1aa8:	5f 96       	adiw	r26, 0x1f	; 31
    1aaa:	ed 91       	ld	r30, X+
    1aac:	fc 91       	ld	r31, X
    1aae:	90 97       	sbiw	r26, 0x20	; 32
    1ab0:	e6 0f       	add	r30, r22
    1ab2:	f7 1f       	adc	r31, r23
    1ab4:	47 70       	andi	r20, 0x07	; 7
    1ab6:	55 27       	eor	r21, r21
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	01 c0       	rjmp	.+2      	; 0x1ac0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x88>
    1abe:	88 0f       	add	r24, r24
    1ac0:	4a 95       	dec	r20
    1ac2:	ea f7       	brpl	.-6      	; 0x1abe <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x86>
    1ac4:	48 2f       	mov	r20, r24
      switch (color) {
    1ac6:	01 30       	cpi	r16, 0x01	; 1
    1ac8:	11 05       	cpc	r17, r1
    1aca:	39 f0       	breq	.+14     	; 0x1ada <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa2>
    1acc:	78 f0       	brcs	.+30     	; 0x1aec <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xb4>
    1ace:	02 30       	cpi	r16, 0x02	; 2
    1ad0:	11 05       	cpc	r17, r1
    1ad2:	e9 f4       	brne	.+58     	; 0x1b0e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    1ad4:	2e 0f       	add	r18, r30
    1ad6:	3f 1f       	adc	r19, r31
    1ad8:	13 c0       	rjmp	.+38     	; 0x1b00 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    1ada:	2e 0f       	add	r18, r30
    1adc:	3f 1f       	adc	r19, r31
      case SSD1306_WHITE:
        while (w--) {
    1ade:	e2 17       	cp	r30, r18
    1ae0:	f3 07       	cpc	r31, r19
    1ae2:	a9 f0       	breq	.+42     	; 0x1b0e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
          *pBuf++ |= mask;
    1ae4:	80 81       	ld	r24, Z
    1ae6:	84 2b       	or	r24, r20
    1ae8:	81 93       	st	Z+, r24
    1aea:	f9 cf       	rjmp	.-14     	; 0x1ade <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa6>
        };
        break;
      case SSD1306_BLACK:
        mask = ~mask;
    1aec:	80 95       	com	r24
    1aee:	2e 0f       	add	r18, r30
    1af0:	3f 1f       	adc	r19, r31
        while (w--) {
    1af2:	e2 17       	cp	r30, r18
    1af4:	f3 07       	cpc	r31, r19
    1af6:	59 f0       	breq	.+22     	; 0x1b0e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
          *pBuf++ &= mask;
    1af8:	90 81       	ld	r25, Z
    1afa:	98 23       	and	r25, r24
    1afc:	91 93       	st	Z+, r25
    1afe:	f9 cf       	rjmp	.-14     	; 0x1af2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xba>
        };
        break;
      case SSD1306_INVERSE:
        while (w--) {
    1b00:	e2 17       	cp	r30, r18
    1b02:	f3 07       	cpc	r31, r19
    1b04:	21 f0       	breq	.+8      	; 0x1b0e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
          *pBuf++ ^= mask;
    1b06:	80 81       	ld	r24, Z
    1b08:	84 27       	eor	r24, r20
    1b0a:	81 93       	st	Z+, r24
    1b0c:	f9 cf       	rjmp	.-14     	; 0x1b00 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
        };
        break;
      }
    }
  }
}
    1b0e:	df 91       	pop	r29
    1b10:	cf 91       	pop	r28
    1b12:	1f 91       	pop	r17
    1b14:	0f 91       	pop	r16
    1b16:	08 95       	ret

00001b18 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>:
  else
    drawFastVLineInternal(x, y, h, color);
}

void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y,
                                             int16_t __h, uint16_t color) {
    1b18:	ef 92       	push	r14
    1b1a:	ff 92       	push	r15
    1b1c:	0f 93       	push	r16
    1b1e:	1f 93       	push	r17
    1b20:	cf 93       	push	r28
    1b22:	df 93       	push	r29
    1b24:	ec 01       	movw	r28, r24

  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
    1b26:	77 fd       	sbrc	r23, 7
    1b28:	a5 c0       	rjmp	.+330    	; 0x1c74 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    1b2a:	ec 80       	ldd	r14, Y+4	; 0x04
    1b2c:	fd 80       	ldd	r15, Y+5	; 0x05
    1b2e:	6e 15       	cp	r22, r14
    1b30:	7f 05       	cpc	r23, r15
    1b32:	0c f0       	brlt	.+2      	; 0x1b36 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1e>
    1b34:	9f c0       	rjmp	.+318    	; 0x1c74 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    if (__y < 0) {               // Clip top
    1b36:	57 ff       	sbrs	r21, 7
    1b38:	04 c0       	rjmp	.+8      	; 0x1b42 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2a>
      __h += __y;
    1b3a:	24 0f       	add	r18, r20
    1b3c:	35 1f       	adc	r19, r21
      __y = 0;
    1b3e:	40 e0       	ldi	r20, 0x00	; 0
    1b40:	50 e0       	ldi	r21, 0x00	; 0
    }
    if ((__y + __h) > HEIGHT) { // Clip bottom
    1b42:	8e 81       	ldd	r24, Y+6	; 0x06
    1b44:	9f 81       	ldd	r25, Y+7	; 0x07
    1b46:	fa 01       	movw	r30, r20
    1b48:	e2 0f       	add	r30, r18
    1b4a:	f3 1f       	adc	r31, r19
    1b4c:	8e 17       	cp	r24, r30
    1b4e:	9f 07       	cpc	r25, r31
    1b50:	1c f4       	brge	.+6      	; 0x1b58 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x40>
      __h = (HEIGHT - __y);
    1b52:	9c 01       	movw	r18, r24
    1b54:	24 1b       	sub	r18, r20
    1b56:	35 0b       	sbc	r19, r21
    }
    if (__h > 0) { // Proceed only if height is now positive
    1b58:	12 16       	cp	r1, r18
    1b5a:	13 06       	cpc	r1, r19
    1b5c:	0c f0       	brlt	.+2      	; 0x1b60 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x48>
    1b5e:	8a c0       	rjmp	.+276    	; 0x1c74 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
      // this display doesn't need ints for coordinates,
      // use local byte registers for faster juggling
      uint8_t y = __y, h = __h;
    1b60:	92 2f       	mov	r25, r18
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
    1b62:	84 2f       	mov	r24, r20
    1b64:	86 95       	lsr	r24
    1b66:	86 95       	lsr	r24
    1b68:	86 95       	lsr	r24
    1b6a:	8e 9d       	mul	r24, r14
    1b6c:	d0 01       	movw	r26, r0
    1b6e:	8f 9d       	mul	r24, r15
    1b70:	b0 0d       	add	r27, r0
    1b72:	11 24       	eor	r1, r1
    1b74:	6a 0f       	add	r22, r26
    1b76:	7b 1f       	adc	r23, r27
    1b78:	af 8d       	ldd	r26, Y+31	; 0x1f
    1b7a:	b8 a1       	ldd	r27, Y+32	; 0x20
    1b7c:	a6 0f       	add	r26, r22
    1b7e:	b7 1f       	adc	r27, r23

      // do the first partial byte, if necessary - this requires some masking
      uint8_t mod = (y & 7);
    1b80:	47 70       	andi	r20, 0x07	; 7
      if (mod) {
    1b82:	b1 f1       	breq	.+108    	; 0x1bf0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
        // mask off the high n bits we want to set
        mod = 8 - mod;
    1b84:	88 e0       	ldi	r24, 0x08	; 8
    1b86:	84 1b       	sub	r24, r20
    1b88:	48 2f       	mov	r20, r24
        // note - lookup table results in a nearly 10% performance
        // improvement in fill* functions
        // uint8_t mask = ~(0xFF >> mod);
        static const uint8_t PROGMEM premask[8] = {0x00, 0x80, 0xC0, 0xE0,
                                                   0xF0, 0xF8, 0xFC, 0xFE};
        uint8_t mask = pgm_read_byte(&premask[mod]);
    1b8a:	68 2f       	mov	r22, r24
    1b8c:	70 e0       	ldi	r23, 0x00	; 0
    1b8e:	fb 01       	movw	r30, r22
    1b90:	e6 5f       	subi	r30, 0xF6	; 246
    1b92:	f8 4f       	sbci	r31, 0xF8	; 248
    1b94:	e4 91       	lpm	r30, Z
        // adjust the mask if we're not going to reach the end of this byte
        if (h < mod)
    1b96:	28 17       	cp	r18, r24
    1b98:	98 f4       	brcc	.+38     	; 0x1bc0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa8>
          mask &= (0XFF >> (mod - h));
    1b9a:	62 1b       	sub	r22, r18
    1b9c:	71 09       	sbc	r23, r1
    1b9e:	2f ef       	ldi	r18, 0xFF	; 255
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x90>
    1ba4:	35 95       	asr	r19
    1ba6:	27 95       	ror	r18
    1ba8:	6a 95       	dec	r22
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x8c>
    1bac:	e2 23       	and	r30, r18

        switch (color) {
    1bae:	01 30       	cpi	r16, 0x01	; 1
    1bb0:	11 05       	cpc	r17, r1
    1bb2:	49 f0       	breq	.+18     	; 0x1bc6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xae>
    1bb4:	78 f0       	brcs	.+30     	; 0x1bd4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    1bb6:	02 30       	cpi	r16, 0x02	; 2
    1bb8:	11 05       	cpc	r17, r1
    1bba:	09 f0       	breq	.+2      	; 0x1bbe <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa6>
    1bbc:	5b c0       	rjmp	.+182    	; 0x1c74 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    1bbe:	0e c0       	rjmp	.+28     	; 0x1bdc <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    1bc0:	01 30       	cpi	r16, 0x01	; 1
    1bc2:	11 05       	cpc	r17, r1
    1bc4:	19 f4       	brne	.+6      	; 0x1bcc <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xb4>
        case SSD1306_WHITE:
          *pBuf |= mask;
    1bc6:	8c 91       	ld	r24, X
    1bc8:	e8 2b       	or	r30, r24
    1bca:	0a c0       	rjmp	.+20     	; 0x1be0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
        uint8_t mask = pgm_read_byte(&premask[mod]);
        // adjust the mask if we're not going to reach the end of this byte
        if (h < mod)
          mask &= (0XFF >> (mod - h));

        switch (color) {
    1bcc:	01 30       	cpi	r16, 0x01	; 1
    1bce:	11 05       	cpc	r17, r1
    1bd0:	08 f0       	brcs	.+2      	; 0x1bd4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    1bd2:	49 c0       	rjmp	.+146    	; 0x1c66 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14e>
        case SSD1306_WHITE:
          *pBuf |= mask;
          break;
        case SSD1306_BLACK:
          *pBuf &= ~mask;
    1bd4:	e0 95       	com	r30
    1bd6:	8c 91       	ld	r24, X
    1bd8:	e8 23       	and	r30, r24
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
          break;
        case SSD1306_INVERSE:
          *pBuf ^= mask;
    1bdc:	8c 91       	ld	r24, X
    1bde:	e8 27       	eor	r30, r24
    1be0:	ec 93       	st	X, r30
          break;
        }
        pBuf += WIDTH;
      }

      if (h >= mod) { // More to go?
    1be2:	94 17       	cp	r25, r20
    1be4:	08 f4       	brcc	.+2      	; 0x1be8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd0>
    1be6:	46 c0       	rjmp	.+140    	; 0x1c74 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
          break;
        case SSD1306_INVERSE:
          *pBuf ^= mask;
          break;
        }
        pBuf += WIDTH;
    1be8:	2c 81       	ldd	r18, Y+4	; 0x04
    1bea:	3d 81       	ldd	r19, Y+5	; 0x05
    1bec:	a2 0f       	add	r26, r18
    1bee:	b3 1f       	adc	r27, r19
      }

      if (h >= mod) { // More to go?
        h -= mod;
    1bf0:	e9 2f       	mov	r30, r25
    1bf2:	e4 1b       	sub	r30, r20
        // Write solid bytes while we can - effectively 8 rows at a time
        if (h >= 8) {
    1bf4:	e8 30       	cpi	r30, 0x08	; 8
    1bf6:	f8 f0       	brcs	.+62     	; 0x1c36 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11e>
          if (color == SSD1306_INVERSE) {
    1bf8:	02 30       	cpi	r16, 0x02	; 2
    1bfa:	11 05       	cpc	r17, r1
    1bfc:	61 f4       	brne	.+24     	; 0x1c16 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xfe>
    1bfe:	8e 2f       	mov	r24, r30
            // separate copy of the code so we don't impact performance of
            // black/white write version with an extra comparison per loop
            do {
              *pBuf ^= 0xFF; // Invert byte
    1c00:	9c 91       	ld	r25, X
    1c02:	90 95       	com	r25
    1c04:	9c 93       	st	X, r25
              pBuf += WIDTH; // Advance pointer 8 rows
    1c06:	2c 81       	ldd	r18, Y+4	; 0x04
    1c08:	3d 81       	ldd	r19, Y+5	; 0x05
    1c0a:	a2 0f       	add	r26, r18
    1c0c:	b3 1f       	adc	r27, r19
              h -= 8;        // Subtract 8 rows from height
    1c0e:	88 50       	subi	r24, 0x08	; 8
            } while (h >= 8);
    1c10:	88 30       	cpi	r24, 0x08	; 8
    1c12:	b0 f7       	brcc	.-20     	; 0x1c00 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xe8>
    1c14:	0f c0       	rjmp	.+30     	; 0x1c34 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11c>
          } else {
            // store a local value to work with
            uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	01 15       	cp	r16, r1
    1c1a:	11 05       	cpc	r17, r1
    1c1c:	09 f4       	brne	.+2      	; 0x1c20 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x108>
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	81 95       	neg	r24
    1c22:	9e 2f       	mov	r25, r30
            do {
              *pBuf = val;   // Set byte
    1c24:	8c 93       	st	X, r24
              pBuf += WIDTH; // Advance pointer 8 rows
    1c26:	2c 81       	ldd	r18, Y+4	; 0x04
    1c28:	3d 81       	ldd	r19, Y+5	; 0x05
    1c2a:	a2 0f       	add	r26, r18
    1c2c:	b3 1f       	adc	r27, r19
              h -= 8;        // Subtract 8 rows from height
    1c2e:	98 50       	subi	r25, 0x08	; 8
            } while (h >= 8);
    1c30:	98 30       	cpi	r25, 0x08	; 8
    1c32:	c0 f7       	brcc	.-16     	; 0x1c24 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x10c>
    1c34:	e7 70       	andi	r30, 0x07	; 7
          }
        }

        if (h) { // Do the final partial byte, if necessary
    1c36:	ee 23       	and	r30, r30
    1c38:	e9 f0       	breq	.+58     	; 0x1c74 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
          // uint8_t mask = (1 << mod) - 1;
          // note - lookup table results in a nearly 10% performance
          // improvement in fill* functions
          static const uint8_t PROGMEM postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
          uint8_t mask = pgm_read_byte(&postmask[mod]);
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	ee 5f       	subi	r30, 0xFE	; 254
    1c3e:	f8 4f       	sbci	r31, 0xF8	; 248
    1c40:	e4 91       	lpm	r30, Z
          switch (color) {
    1c42:	01 30       	cpi	r16, 0x01	; 1
    1c44:	11 05       	cpc	r17, r1
    1c46:	39 f0       	breq	.+14     	; 0x1c56 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x13e>
    1c48:	48 f0       	brcs	.+18     	; 0x1c5c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x144>
    1c4a:	02 30       	cpi	r16, 0x02	; 2
    1c4c:	11 05       	cpc	r17, r1
    1c4e:	91 f4       	brne	.+36     	; 0x1c74 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
            break;
          case SSD1306_BLACK:
            *pBuf &= ~mask;
            break;
          case SSD1306_INVERSE:
            *pBuf ^= mask;
    1c50:	8c 91       	ld	r24, X
    1c52:	e8 27       	eor	r30, r24
    1c54:	06 c0       	rjmp	.+12     	; 0x1c62 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
          static const uint8_t PROGMEM postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
          uint8_t mask = pgm_read_byte(&postmask[mod]);
          switch (color) {
          case SSD1306_WHITE:
            *pBuf |= mask;
    1c56:	8c 91       	ld	r24, X
    1c58:	e8 2b       	or	r30, r24
    1c5a:	03 c0       	rjmp	.+6      	; 0x1c62 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
            break;
          case SSD1306_BLACK:
            *pBuf &= ~mask;
    1c5c:	e0 95       	com	r30
    1c5e:	8c 91       	ld	r24, X
    1c60:	e8 23       	and	r30, r24
            break;
          case SSD1306_INVERSE:
            *pBuf ^= mask;
    1c62:	ec 93       	st	X, r30
          }
        }
      }
    } // endif positive height
  }   // endif x in bounds
}
    1c64:	07 c0       	rjmp	.+14     	; 0x1c74 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
        uint8_t mask = pgm_read_byte(&premask[mod]);
        // adjust the mask if we're not going to reach the end of this byte
        if (h < mod)
          mask &= (0XFF >> (mod - h));

        switch (color) {
    1c66:	02 30       	cpi	r16, 0x02	; 2
    1c68:	11 05       	cpc	r17, r1
    1c6a:	09 f4       	brne	.+2      	; 0x1c6e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x156>
    1c6c:	b7 cf       	rjmp	.-146    	; 0x1bdc <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
          break;
        case SSD1306_INVERSE:
          *pBuf ^= mask;
          break;
        }
        pBuf += WIDTH;
    1c6e:	ae 0d       	add	r26, r14
    1c70:	bf 1d       	adc	r27, r15
    1c72:	be cf       	rjmp	.-132    	; 0x1bf0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
          }
        }
      }
    } // endif positive height
  }   // endif x in bounds
}
    1c74:	df 91       	pop	r29
    1c76:	cf 91       	pop	r28
    1c78:	1f 91       	pop	r17
    1c7a:	0f 91       	pop	r16
    1c7c:	ff 90       	pop	r15
    1c7e:	ef 90       	pop	r14
    1c80:	08 95       	ret

00001c82 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                     uint16_t color) {
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
  bool bSwap = false;
  switch (rotation) {
    1c86:	dc 01       	movw	r26, r24
    1c88:	56 96       	adiw	r26, 0x16	; 22
    1c8a:	ec 91       	ld	r30, X
    1c8c:	56 97       	sbiw	r26, 0x16	; 22
    1c8e:	e2 30       	cpi	r30, 0x02	; 2
    1c90:	61 f0       	breq	.+24     	; 0x1caa <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x28>
    1c92:	e3 30       	cpi	r30, 0x03	; 3
    1c94:	09 f1       	breq	.+66     	; 0x1cd8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x56>
    1c96:	e1 30       	cpi	r30, 0x01	; 1
    1c98:	79 f5       	brne	.+94     	; 0x1cf8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x76>
  case 1:
    // 90 degree rotation, swap x & y for rotation, then invert x
    bSwap = true;
    ssd1306_swap(x, y);
    x = WIDTH - x - 1;
    1c9a:	14 96       	adiw	r26, 0x04	; 4
    1c9c:	ed 91       	ld	r30, X+
    1c9e:	fc 91       	ld	r31, X
    1ca0:	15 97       	sbiw	r26, 0x05	; 5
    1ca2:	e4 1b       	sub	r30, r20
    1ca4:	f5 0b       	sbc	r31, r21
    1ca6:	31 97       	sbiw	r30, 0x01	; 1
    break;
    1ca8:	23 c0       	rjmp	.+70     	; 0x1cf0 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x6e>
  case 2:
    // 180 degree rotation, invert x and y, then shift y around for height.
    x = WIDTH - x - 1;
    1caa:	dc 01       	movw	r26, r24
    1cac:	14 96       	adiw	r26, 0x04	; 4
    1cae:	ed 91       	ld	r30, X+
    1cb0:	fc 91       	ld	r31, X
    1cb2:	15 97       	sbiw	r26, 0x05	; 5
    1cb4:	df 01       	movw	r26, r30
    1cb6:	a6 1b       	sub	r26, r22
    1cb8:	b7 0b       	sbc	r27, r23
    1cba:	bd 01       	movw	r22, r26
    y = HEIGHT - y - 1;
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	16 96       	adiw	r26, 0x06	; 6
    1cc0:	ed 91       	ld	r30, X+
    1cc2:	fc 91       	ld	r31, X
    1cc4:	17 97       	sbiw	r26, 0x07	; 7
    1cc6:	df 01       	movw	r26, r30
    1cc8:	a4 1b       	sub	r26, r20
    1cca:	b5 0b       	sbc	r27, r21
    1ccc:	ad 01       	movw	r20, r26
    1cce:	41 50       	subi	r20, 0x01	; 1
    1cd0:	51 09       	sbc	r21, r1
    x -= (w - 1);
    1cd2:	62 1b       	sub	r22, r18
    1cd4:	73 0b       	sbc	r23, r19
    break;
    1cd6:	10 c0       	rjmp	.+32     	; 0x1cf8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x76>
  case 3:
    // 270 degree rotation, swap x & y for rotation,
    // then invert y and adjust y for w (not to become h)
    bSwap = true;
    ssd1306_swap(x, y);
    1cd8:	fa 01       	movw	r30, r20
    y = HEIGHT - y - 1;
    1cda:	dc 01       	movw	r26, r24
    1cdc:	16 96       	adiw	r26, 0x06	; 6
    1cde:	4d 91       	ld	r20, X+
    1ce0:	5c 91       	ld	r21, X
    1ce2:	17 97       	sbiw	r26, 0x07	; 7
    1ce4:	da 01       	movw	r26, r20
    1ce6:	a6 1b       	sub	r26, r22
    1ce8:	b7 0b       	sbc	r27, r23
    1cea:	bd 01       	movw	r22, r26
    y -= (w - 1);
    1cec:	62 1b       	sub	r22, r18
    1cee:	73 0b       	sbc	r23, r19
    break;
  }

  if (bSwap)
    drawFastVLineInternal(x, y, w, color);
    1cf0:	ab 01       	movw	r20, r22
    1cf2:	bf 01       	movw	r22, r30
    1cf4:	11 df       	rcall	.-478    	; 0x1b18 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    1cf6:	01 c0       	rjmp	.+2      	; 0x1cfa <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x78>
  else
    drawFastHLineInternal(x, y, w, color);
    1cf8:	9f de       	rcall	.-706    	; 0x1a38 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    1cfa:	1f 91       	pop	r17
}
    1cfc:	0f 91       	pop	r16
    1cfe:	08 95       	ret

00001d00 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>:
    1d00:	0f 93       	push	r16
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                     uint16_t color) {
    1d02:	1f 93       	push	r17
  bool bSwap = false;
  switch (rotation) {
    1d04:	dc 01       	movw	r26, r24
    1d06:	56 96       	adiw	r26, 0x16	; 22
    1d08:	ec 91       	ld	r30, X
    1d0a:	56 97       	sbiw	r26, 0x16	; 22
    1d0c:	e2 30       	cpi	r30, 0x02	; 2
    1d0e:	69 f0       	breq	.+26     	; 0x1d2a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2a>
    1d10:	e3 30       	cpi	r30, 0x03	; 3
    1d12:	11 f1       	breq	.+68     	; 0x1d58 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x58>
    1d14:	e1 30       	cpi	r30, 0x01	; 1
    1d16:	81 f5       	brne	.+96     	; 0x1d78 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x78>
  case 1:
    // 90 degree rotation, swap x & y for rotation,
    // then invert x and adjust x for h (now to become w)
    bSwap = true;
    ssd1306_swap(x, y);
    x = WIDTH - x - 1;
    1d18:	14 96       	adiw	r26, 0x04	; 4
    1d1a:	ed 91       	ld	r30, X+
    1d1c:	fc 91       	ld	r31, X
    1d1e:	15 97       	sbiw	r26, 0x05	; 5
    1d20:	e4 1b       	sub	r30, r20
    1d22:	f5 0b       	sbc	r31, r21
    x -= (h - 1);
    1d24:	e2 1b       	sub	r30, r18
    1d26:	f3 0b       	sbc	r31, r19
    break;
    1d28:	23 c0       	rjmp	.+70     	; 0x1d70 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x70>
  case 2:
    // 180 degree rotation, invert x and y, then shift y around for height.
    x = WIDTH - x - 1;
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	14 96       	adiw	r26, 0x04	; 4
    1d2e:	ed 91       	ld	r30, X+
    1d30:	fc 91       	ld	r31, X
    1d32:	15 97       	sbiw	r26, 0x05	; 5
    1d34:	df 01       	movw	r26, r30
    1d36:	a6 1b       	sub	r26, r22
    1d38:	b7 0b       	sbc	r27, r23
    1d3a:	bd 01       	movw	r22, r26
    1d3c:	61 50       	subi	r22, 0x01	; 1
    1d3e:	71 09       	sbc	r23, r1
    y = HEIGHT - y - 1;
    1d40:	dc 01       	movw	r26, r24
    1d42:	16 96       	adiw	r26, 0x06	; 6
    1d44:	ed 91       	ld	r30, X+
    1d46:	fc 91       	ld	r31, X
    1d48:	17 97       	sbiw	r26, 0x07	; 7
    1d4a:	df 01       	movw	r26, r30
    1d4c:	a4 1b       	sub	r26, r20
    1d4e:	b5 0b       	sbc	r27, r21
    1d50:	ad 01       	movw	r20, r26
    y -= (h - 1);
    1d52:	42 1b       	sub	r20, r18
    1d54:	53 0b       	sbc	r21, r19
    break;
    1d56:	10 c0       	rjmp	.+32     	; 0x1d78 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x78>
  case 3:
    // 270 degree rotation, swap x & y for rotation, then invert y
    bSwap = true;
    ssd1306_swap(x, y);
    1d58:	fa 01       	movw	r30, r20
    y = HEIGHT - y - 1;
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	16 96       	adiw	r26, 0x06	; 6
    1d5e:	4d 91       	ld	r20, X+
    1d60:	5c 91       	ld	r21, X
    1d62:	17 97       	sbiw	r26, 0x07	; 7
    1d64:	da 01       	movw	r26, r20
    1d66:	a6 1b       	sub	r26, r22
    1d68:	b7 0b       	sbc	r27, r23
    1d6a:	bd 01       	movw	r22, r26
    1d6c:	61 50       	subi	r22, 0x01	; 1
    1d6e:	71 09       	sbc	r23, r1
    break;
  }

  if (bSwap)
    drawFastHLineInternal(x, y, h, color);
    1d70:	ab 01       	movw	r20, r22
    1d72:	bf 01       	movw	r22, r30
    1d74:	61 de       	rcall	.-830    	; 0x1a38 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    1d76:	01 c0       	rjmp	.+2      	; 0x1d7a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7a>
  else
    drawFastVLineInternal(x, y, h, color);
    1d78:	cf de       	rcall	.-610    	; 0x1b18 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    1d7a:	1f 91       	pop	r17
}
    1d7c:	0f 91       	pop	r16
    1d7e:	08 95       	ret

00001d80 <_ZN3DHTC1Ehhh>:
    1d80:	dc 01       	movw	r26, r24
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
    1d82:	15 96       	adiw	r26, 0x05	; 5
    1d84:	6c 93       	st	X, r22
    1d86:	15 97       	sbiw	r26, 0x05	; 5
    1d88:	16 96       	adiw	r26, 0x06	; 6
    1d8a:	4c 93       	st	X, r20
    1d8c:	16 97       	sbiw	r26, 0x06	; 6
    1d8e:	70 e0       	ldi	r23, 0x00	; 0
    1d90:	fb 01       	movw	r30, r22
    1d92:	e8 5a       	subi	r30, 0xA8	; 168
    1d94:	f8 4f       	sbci	r31, 0xF8	; 248
    1d96:	e4 91       	lpm	r30, Z
    1d98:	17 96       	adiw	r26, 0x07	; 7
    1d9a:	ec 93       	st	X, r30
    1d9c:	17 97       	sbiw	r26, 0x07	; 7
    1d9e:	fb 01       	movw	r30, r22
    1da0:	e2 56       	subi	r30, 0x62	; 98
    1da2:	f8 4f       	sbci	r31, 0xF8	; 248
    1da4:	64 91       	lpm	r22, Z
    1da6:	18 96       	adiw	r26, 0x08	; 8
    1da8:	6c 93       	st	X, r22
    1daa:	18 97       	sbiw	r26, 0x08	; 8
    1dac:	40 e8       	ldi	r20, 0x80	; 128
    1dae:	5e e3       	ldi	r21, 0x3E	; 62
    1db0:	60 e0       	ldi	r22, 0x00	; 0
    1db2:	70 e0       	ldi	r23, 0x00	; 0
    1db4:	1d 96       	adiw	r26, 0x0d	; 13
    1db6:	4d 93       	st	X+, r20
    1db8:	5d 93       	st	X+, r21
    1dba:	6d 93       	st	X+, r22
    1dbc:	7c 93       	st	X, r23
    1dbe:	50 97       	sbiw	r26, 0x10	; 16
    1dc0:	08 95       	ret

00001dc2 <_ZN3DHT5beginEh>:
    1dc2:	1f 93       	push	r17
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
    1dc8:	ec 01       	movw	r28, r24
    1dca:	16 2f       	mov	r17, r22
    1dcc:	62 e0       	ldi	r22, 0x02	; 2
    1dce:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd0:	0e 94 8a 1a 	call	0x3514	; 0x3514 <pinMode>
    1dd4:	0e 94 5e 19 	call	0x32bc	; 0x32bc <millis>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	80 5d       	subi	r24, 0xD0	; 208
    1dde:	97 40       	sbci	r25, 0x07	; 7
    1de0:	a1 09       	sbc	r26, r1
    1de2:	b1 09       	sbc	r27, r1
    1de4:	89 87       	std	Y+9, r24	; 0x09
    1de6:	9a 87       	std	Y+10, r25	; 0x0a
    1de8:	ab 87       	std	Y+11, r26	; 0x0b
    1dea:	bc 87       	std	Y+12, r27	; 0x0c
    1dec:	1a 8b       	std	Y+18, r17	; 0x12
    1dee:	df 91       	pop	r29
    1df0:	cf 91       	pop	r28
    1df2:	1f 91       	pop	r17
    1df4:	08 95       	ret

00001df6 <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    1df6:	cf 92       	push	r12
    1df8:	df 92       	push	r13
    1dfa:	ef 92       	push	r14
    1dfc:	ff 92       	push	r15
    1dfe:	1f 93       	push	r17
    1e00:	cf 93       	push	r28
    1e02:	df 93       	push	r29
    1e04:	ec 01       	movw	r28, r24
    1e06:	1f 81       	ldd	r17, Y+7	; 0x07
  uint16_t count = 0; // To work fast enough on slower AVR boards
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
    1e08:	66 23       	and	r22, r22
    1e0a:	11 f0       	breq	.+4      	; 0x1e10 <_ZN3DHT11expectPulseEb+0x1a>
    1e0c:	91 2f       	mov	r25, r17
    1e0e:	01 c0       	rjmp	.+2      	; 0x1e12 <_ZN3DHT11expectPulseEb+0x1c>
    1e10:	90 e0       	ldi	r25, 0x00	; 0
  while ((*portInputRegister(_port) & _bit) == portState) {
    1e12:	28 85       	ldd	r18, Y+8	; 0x08
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	22 0f       	add	r18, r18
    1e18:	33 1f       	adc	r19, r19
    1e1a:	2c 51       	subi	r18, 0x1C	; 28
    1e1c:	38 4f       	sbci	r19, 0xF8	; 248
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
    1e1e:	a0 e0       	ldi	r26, 0x00	; 0
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
  while ((*portInputRegister(_port) & _bit) == portState) {
    1e22:	f9 01       	movw	r30, r18
    1e24:	45 91       	lpm	r20, Z+
    1e26:	54 91       	lpm	r21, Z
    1e28:	fa 01       	movw	r30, r20
    1e2a:	80 81       	ld	r24, Z
    1e2c:	81 23       	and	r24, r17
    1e2e:	ad 01       	movw	r20, r26
    1e30:	60 e0       	ldi	r22, 0x00	; 0
    1e32:	70 e0       	ldi	r23, 0x00	; 0
    1e34:	98 13       	cpse	r25, r24
    1e36:	0f c0       	rjmp	.+30     	; 0x1e56 <_ZN3DHT11expectPulseEb+0x60>
    if (count++ >= _maxcycles) {
    1e38:	11 96       	adiw	r26, 0x01	; 1
    1e3a:	cd 84       	ldd	r12, Y+13	; 0x0d
    1e3c:	de 84       	ldd	r13, Y+14	; 0x0e
    1e3e:	ef 84       	ldd	r14, Y+15	; 0x0f
    1e40:	f8 88       	ldd	r15, Y+16	; 0x10
    1e42:	4c 15       	cp	r20, r12
    1e44:	5d 05       	cpc	r21, r13
    1e46:	6e 05       	cpc	r22, r14
    1e48:	7f 05       	cpc	r23, r15
    1e4a:	58 f3       	brcs	.-42     	; 0x1e22 <_ZN3DHT11expectPulseEb+0x2c>
      return TIMEOUT; // Exceeded timeout, fail.
    1e4c:	3f ef       	ldi	r19, 0xFF	; 255
    1e4e:	2f ef       	ldi	r18, 0xFF	; 255
    1e50:	8f ef       	ldi	r24, 0xFF	; 255
    1e52:	9f ef       	ldi	r25, 0xFF	; 255
    1e54:	03 c0       	rjmp	.+6      	; 0x1e5c <_ZN3DHT11expectPulseEb+0x66>
      return TIMEOUT; // Exceeded timeout, fail.
    }
  }
#endif

  return count;
    1e56:	3a 2f       	mov	r19, r26
    1e58:	25 2f       	mov	r18, r21
    1e5a:	cb 01       	movw	r24, r22
}
    1e5c:	63 2f       	mov	r22, r19
    1e5e:	72 2f       	mov	r23, r18
    1e60:	df 91       	pop	r29
    1e62:	cf 91       	pop	r28
    1e64:	1f 91       	pop	r17
    1e66:	ff 90       	pop	r15
    1e68:	ef 90       	pop	r14
    1e6a:	df 90       	pop	r13
    1e6c:	cf 90       	pop	r12
    1e6e:	08 95       	ret

00001e70 <_ZN3DHT4readEb>:
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
    1e70:	8f 92       	push	r8
    1e72:	9f 92       	push	r9
    1e74:	af 92       	push	r10
    1e76:	bf 92       	push	r11
    1e78:	cf 92       	push	r12
    1e7a:	df 92       	push	r13
    1e7c:	ef 92       	push	r14
    1e7e:	ff 92       	push	r15
    1e80:	0f 93       	push	r16
    1e82:	1f 93       	push	r17
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	c0 54       	subi	r28, 0x40	; 64
    1e8e:	d1 40       	sbci	r29, 0x01	; 1
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	de bf       	out	0x3e, r29	; 62
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	cd bf       	out	0x3d, r28	; 61
    1e9a:	8c 01       	movw	r16, r24
    1e9c:	f6 2e       	mov	r15, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
    1e9e:	0e 94 5e 19 	call	0x32bc	; 0x32bc <millis>
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
    1ea2:	f1 10       	cpse	r15, r1
    1ea4:	16 c0       	rjmp	.+44     	; 0x1ed2 <_ZN3DHT4readEb+0x62>
    1ea6:	f8 01       	movw	r30, r16
    1ea8:	c1 84       	ldd	r12, Z+9	; 0x09
    1eaa:	d2 84       	ldd	r13, Z+10	; 0x0a
    1eac:	e3 84       	ldd	r14, Z+11	; 0x0b
    1eae:	f4 84       	ldd	r15, Z+12	; 0x0c
    1eb0:	9b 01       	movw	r18, r22
    1eb2:	ac 01       	movw	r20, r24
    1eb4:	2c 19       	sub	r18, r12
    1eb6:	3d 09       	sbc	r19, r13
    1eb8:	4e 09       	sbc	r20, r14
    1eba:	5f 09       	sbc	r21, r15
    1ebc:	69 01       	movw	r12, r18
    1ebe:	7a 01       	movw	r14, r20
    1ec0:	30 ed       	ldi	r19, 0xD0	; 208
    1ec2:	c3 16       	cp	r12, r19
    1ec4:	37 e0       	ldi	r19, 0x07	; 7
    1ec6:	d3 06       	cpc	r13, r19
    1ec8:	e1 04       	cpc	r14, r1
    1eca:	f1 04       	cpc	r15, r1
    1ecc:	10 f4       	brcc	.+4      	; 0x1ed2 <_ZN3DHT4readEb+0x62>
    return _lastresult; // return last correct measurement
    1ece:	81 89       	ldd	r24, Z+17	; 0x11
    1ed0:	b6 c0       	rjmp	.+364    	; 0x203e <__DATA_REGION_LENGTH__+0x3e>
  }
  _lastreadtime = currenttime;
    1ed2:	f8 01       	movw	r30, r16
    1ed4:	61 87       	std	Z+9, r22	; 0x09
    1ed6:	72 87       	std	Z+10, r23	; 0x0a
    1ed8:	83 87       	std	Z+11, r24	; 0x0b
    1eda:	94 87       	std	Z+12, r25	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    1edc:	14 82       	std	Z+4, r1	; 0x04
    1ede:	13 82       	std	Z+3, r1	; 0x03
    1ee0:	12 82       	std	Z+2, r1	; 0x02
    1ee2:	11 82       	std	Z+1, r1	; 0x01
    1ee4:	10 82       	st	Z, r1
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
    1ee6:	62 e0       	ldi	r22, 0x02	; 2
    1ee8:	85 81       	ldd	r24, Z+5	; 0x05
    1eea:	0e 94 8a 1a 	call	0x3514	; 0x3514 <pinMode>
  delay(1);
    1eee:	61 e0       	ldi	r22, 0x01	; 1
    1ef0:	70 e0       	ldi	r23, 0x00	; 0
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	0e 94 8f 19 	call	0x331e	; 0x331e <delay>

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
    1efa:	61 e0       	ldi	r22, 0x01	; 1
    1efc:	f8 01       	movw	r30, r16
    1efe:	85 81       	ldd	r24, Z+5	; 0x05
    1f00:	0e 94 8a 1a 	call	0x3514	; 0x3514 <pinMode>
  digitalWrite(_pin, LOW);
    1f04:	60 e0       	ldi	r22, 0x00	; 0
    1f06:	f8 01       	movw	r30, r16
    1f08:	85 81       	ldd	r24, Z+5	; 0x05
    1f0a:	0e 94 c6 1a 	call	0x358c	; 0x358c <digitalWrite>
  switch (_type) {
    1f0e:	f8 01       	movw	r30, r16
    1f10:	86 81       	ldd	r24, Z+6	; 0x06
    1f12:	85 51       	subi	r24, 0x15	; 21
    1f14:	82 30       	cpi	r24, 0x02	; 2
    1f16:	28 f4       	brcc	.+10     	; 0x1f22 <_ZN3DHT4readEb+0xb2>
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
    1f18:	8c e4       	ldi	r24, 0x4C	; 76
    1f1a:	94 e0       	ldi	r25, 0x04	; 4
    1f1c:	0e 94 c8 19 	call	0x3390	; 0x3390 <delayMicroseconds>
    break;
    1f20:	06 c0       	rjmp	.+12     	; 0x1f2e <_ZN3DHT4readEb+0xbe>
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
    1f22:	64 e1       	ldi	r22, 0x14	; 20
    1f24:	70 e0       	ldi	r23, 0x00	; 0
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	0e 94 8f 19 	call	0x331e	; 0x331e <delay>
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
    1f2e:	62 e0       	ldi	r22, 0x02	; 2
    1f30:	f8 01       	movw	r30, r16
    1f32:	85 81       	ldd	r24, Z+5	; 0x05
    1f34:	0e 94 8a 1a 	call	0x3514	; 0x3514 <pinMode>

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
    1f38:	f8 01       	movw	r30, r16
    1f3a:	82 89       	ldd	r24, Z+18	; 0x12
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	0e 94 c8 19 	call	0x3390	; 0x3390 <delayMicroseconds>
 */
class InterruptLock {
public:
  InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    noInterrupts();
    1f42:	f8 94       	cli
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
    1f44:	60 e0       	ldi	r22, 0x00	; 0
    1f46:	c8 01       	movw	r24, r16
    1f48:	56 df       	rcall	.-340    	; 0x1df6 <_ZN3DHT11expectPulseEb>
    1f4a:	6f 3f       	cpi	r22, 0xFF	; 255
    1f4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f50:	9f 4f       	sbci	r25, 0xFF	; 255
    1f52:	21 f4       	brne	.+8      	; 0x1f5c <_ZN3DHT4readEb+0xec>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
    1f54:	f8 01       	movw	r30, r16
    1f56:	11 8a       	std	Z+17, r1	; 0x11
#endif
  }
  ~InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    interrupts();
    1f58:	78 94       	sei
    1f5a:	42 c0       	rjmp	.+132    	; 0x1fe0 <_ZN3DHT4readEb+0x170>
      return _lastresult;
    }
    if (expectPulse(HIGH) == TIMEOUT) {
    1f5c:	61 e0       	ldi	r22, 0x01	; 1
    1f5e:	c8 01       	movw	r24, r16
    1f60:	4a df       	rcall	.-364    	; 0x1df6 <_ZN3DHT11expectPulseEb>
    1f62:	6f 3f       	cpi	r22, 0xFF	; 255
    1f64:	7f 4f       	sbci	r23, 0xFF	; 255
    1f66:	8f 4f       	sbci	r24, 0xFF	; 255
    1f68:	9f 4f       	sbci	r25, 0xFF	; 255
    1f6a:	a1 f3       	breq	.-24     	; 0x1f54 <_ZN3DHT4readEb+0xe4>
    1f6c:	9e 01       	movw	r18, r28
    1f6e:	2f 5f       	subi	r18, 0xFF	; 255
    1f70:	3f 4f       	sbci	r19, 0xFF	; 255
    1f72:	79 01       	movw	r14, r18
    1f74:	5e 01       	movw	r10, r28
    1f76:	3f eb       	ldi	r19, 0xBF	; 191
    1f78:	a3 1a       	sub	r10, r19
    1f7a:	3e ef       	ldi	r19, 0xFE	; 254
    1f7c:	b3 0a       	sbc	r11, r19
    1f7e:	67 01       	movw	r12, r14
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
      cycles[i] = expectPulse(LOW);
    1f80:	60 e0       	ldi	r22, 0x00	; 0
    1f82:	c8 01       	movw	r24, r16
    1f84:	38 df       	rcall	.-400    	; 0x1df6 <_ZN3DHT11expectPulseEb>
    1f86:	f6 01       	movw	r30, r12
    1f88:	60 83       	st	Z, r22
    1f8a:	71 83       	std	Z+1, r23	; 0x01
    1f8c:	82 83       	std	Z+2, r24	; 0x02
    1f8e:	93 83       	std	Z+3, r25	; 0x03
      cycles[i + 1] = expectPulse(HIGH);
    1f90:	61 e0       	ldi	r22, 0x01	; 1
    1f92:	c8 01       	movw	r24, r16
    1f94:	30 df       	rcall	.-416    	; 0x1df6 <_ZN3DHT11expectPulseEb>
    1f96:	f6 01       	movw	r30, r12
    1f98:	64 83       	std	Z+4, r22	; 0x04
    1f9a:	75 83       	std	Z+5, r23	; 0x05
    1f9c:	86 83       	std	Z+6, r24	; 0x06
    1f9e:	97 83       	std	Z+7, r25	; 0x07
    1fa0:	f8 e0       	ldi	r31, 0x08	; 8
    1fa2:	cf 0e       	add	r12, r31
    1fa4:	d1 1c       	adc	r13, r1
    1fa6:	ca 14       	cp	r12, r10
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    1fa8:	db 04       	cpc	r13, r11
    1faa:	51 f7       	brne	.-44     	; 0x1f80 <_ZN3DHT4readEb+0x110>
    1fac:	78 94       	sei
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	f7 01       	movw	r30, r14
    uint32_t lowCycles = cycles[2 * i];
    1fb4:	80 80       	ld	r8, Z
    1fb6:	91 80       	ldd	r9, Z+1	; 0x01
    1fb8:	a2 80       	ldd	r10, Z+2	; 0x02
    1fba:	b3 80       	ldd	r11, Z+3	; 0x03
    1fbc:	44 81       	ldd	r20, Z+4	; 0x04
    uint32_t highCycles = cycles[2 * i + 1];
    1fbe:	55 81       	ldd	r21, Z+5	; 0x05
    1fc0:	66 81       	ldd	r22, Z+6	; 0x06
    1fc2:	77 81       	ldd	r23, Z+7	; 0x07
    1fc4:	ff ef       	ldi	r31, 0xFF	; 255
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
    1fc6:	8f 16       	cp	r8, r31
    1fc8:	9f 06       	cpc	r9, r31
    1fca:	af 06       	cpc	r10, r31
    1fcc:	bf 06       	cpc	r11, r31
    1fce:	31 f0       	breq	.+12     	; 0x1fdc <_ZN3DHT4readEb+0x16c>
    1fd0:	4f 3f       	cpi	r20, 0xFF	; 255
    1fd2:	8f ef       	ldi	r24, 0xFF	; 255
    1fd4:	58 07       	cpc	r21, r24
    1fd6:	68 07       	cpc	r22, r24
    1fd8:	78 07       	cpc	r23, r24
    1fda:	21 f4       	brne	.+8      	; 0x1fe4 <_ZN3DHT4readEb+0x174>
    1fdc:	f8 01       	movw	r30, r16
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
    1fde:	11 8a       	std	Z+17, r1	; 0x11
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
      return _lastresult;
    1fe2:	2d c0       	rjmp	.+90     	; 0x203e <__DATA_REGION_LENGTH__+0x3e>
    1fe4:	f9 01       	movw	r30, r18
    }
    data[i / 8] <<= 1;
    1fe6:	83 e0       	ldi	r24, 0x03	; 3
    1fe8:	f5 95       	asr	r31
    1fea:	e7 95       	ror	r30
    1fec:	8a 95       	dec	r24
    1fee:	e1 f7       	brne	.-8      	; 0x1fe8 <_ZN3DHT4readEb+0x178>
    1ff0:	e0 0f       	add	r30, r16
    1ff2:	f1 1f       	adc	r31, r17
    1ff4:	80 81       	ld	r24, Z
    1ff6:	88 0f       	add	r24, r24
    1ff8:	84 16       	cp	r8, r20
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
    1ffa:	95 06       	cpc	r9, r21
    1ffc:	a6 06       	cpc	r10, r22
    1ffe:	b7 06       	cpc	r11, r23
    2000:	08 f4       	brcc	.+2      	; 0x2004 <__DATA_REGION_LENGTH__+0x4>
    2002:	81 60       	ori	r24, 0x01	; 1
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
    2004:	80 83       	st	Z, r24
    2006:	2f 5f       	subi	r18, 0xFF	; 255
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    2008:	3f 4f       	sbci	r19, 0xFF	; 255
    200a:	f8 e0       	ldi	r31, 0x08	; 8
    200c:	ef 0e       	add	r14, r31
    200e:	f1 1c       	adc	r15, r1
    2010:	28 32       	cpi	r18, 0x28	; 40
    2012:	31 05       	cpc	r19, r1
    2014:	71 f6       	brne	.-100    	; 0x1fb2 <_ZN3DHT4readEb+0x142>
    2016:	f8 01       	movw	r30, r16
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    2018:	24 81       	ldd	r18, Z+4	; 0x04
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 81       	ld	r20, Z
    201e:	81 81       	ldd	r24, Z+1	; 0x01
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	84 0f       	add	r24, r20
    2024:	91 1d       	adc	r25, r1
    2026:	42 81       	ldd	r20, Z+2	; 0x02
    2028:	84 0f       	add	r24, r20
    202a:	91 1d       	adc	r25, r1
    202c:	43 81       	ldd	r20, Z+3	; 0x03
    202e:	84 0f       	add	r24, r20
    2030:	91 1d       	adc	r25, r1
    2032:	99 27       	eor	r25, r25
    2034:	28 17       	cp	r18, r24
    2036:	39 07       	cpc	r19, r25
    2038:	89 f6       	brne	.-94     	; 0x1fdc <_ZN3DHT4readEb+0x16c>
    203a:	81 e0       	ldi	r24, 0x01	; 1
    _lastresult = true;
    203c:	81 8b       	std	Z+17, r24	; 0x11
    203e:	c0 5c       	subi	r28, 0xC0	; 192
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    return _lastresult;
  }
}
    2040:	de 4f       	sbci	r29, 0xFE	; 254
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	df 91       	pop	r29
    204e:	cf 91       	pop	r28
    2050:	1f 91       	pop	r17
    2052:	0f 91       	pop	r16
    2054:	ff 90       	pop	r15
    2056:	ef 90       	pop	r14
    2058:	df 90       	pop	r13
    205a:	cf 90       	pop	r12
    205c:	bf 90       	pop	r11
    205e:	af 90       	pop	r10
    2060:	9f 90       	pop	r9
    2062:	8f 90       	pop	r8
    2064:	08 95       	ret

00002066 <_ZN3DHT15readTemperatureEbb>:
    2066:	cf 92       	push	r12
 *					- false = Celcius
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
    2068:	df 92       	push	r13
    206a:	ef 92       	push	r14
    206c:	ff 92       	push	r15
    206e:	0f 93       	push	r16
    2070:	1f 93       	push	r17
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	8c 01       	movw	r16, r24
    2078:	c6 2f       	mov	r28, r22
  float f = NAN;

  if (read(force)) {
    207a:	64 2f       	mov	r22, r20
    207c:	f9 de       	rcall	.-526    	; 0x1e70 <_ZN3DHT4readEb>
    207e:	88 23       	and	r24, r24
    2080:	09 f4       	brne	.+2      	; 0x2084 <_ZN3DHT15readTemperatureEbb+0x1e>
    2082:	6b c0       	rjmp	.+214    	; 0x215a <_ZN3DHT15readTemperatureEbb+0xf4>
    switch (_type) {
    2084:	f8 01       	movw	r30, r16
    2086:	86 81       	ldd	r24, Z+6	; 0x06
    2088:	8c 30       	cpi	r24, 0x0C	; 12
    208a:	09 f4       	brne	.+2      	; 0x208e <_ZN3DHT15readTemperatureEbb+0x28>
    208c:	3e c0       	rjmp	.+124    	; 0x210a <_ZN3DHT15readTemperatureEbb+0xa4>
    208e:	18 f4       	brcc	.+6      	; 0x2096 <_ZN3DHT15readTemperatureEbb+0x30>
    2090:	8b 30       	cpi	r24, 0x0B	; 11
    2092:	b9 f0       	breq	.+46     	; 0x20c2 <_ZN3DHT15readTemperatureEbb+0x5c>
    2094:	62 c0       	rjmp	.+196    	; 0x215a <_ZN3DHT15readTemperatureEbb+0xf4>
    2096:	85 51       	subi	r24, 0x15	; 21
    2098:	82 30       	cpi	r24, 0x02	; 2
    209a:	08 f0       	brcs	.+2      	; 0x209e <_ZN3DHT15readTemperatureEbb+0x38>
    209c:	5e c0       	rjmp	.+188    	; 0x215a <_ZN3DHT15readTemperatureEbb+0xf4>
        f = convertCtoF(f);
      }
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
    209e:	f8 01       	movw	r30, r16
    20a0:	d2 81       	ldd	r29, Z+2	; 0x02
      f *= 0.1;
    20a2:	6d 2f       	mov	r22, r29
    20a4:	6f 77       	andi	r22, 0x7F	; 127
    20a6:	70 e0       	ldi	r23, 0x00	; 0
    20a8:	76 2f       	mov	r23, r22
    20aa:	66 27       	eor	r22, r22
    20ac:	83 81       	ldd	r24, Z+3	; 0x03
    20ae:	68 2b       	or	r22, r24
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	df d4       	rcall	.+2494   	; 0x2a74 <__floatunsisf>
    20b6:	2d ec       	ldi	r18, 0xCD	; 205
    20b8:	3c ec       	ldi	r19, 0xCC	; 204
    20ba:	4c ec       	ldi	r20, 0xCC	; 204
    20bc:	5d e3       	ldi	r21, 0x3D	; 61
    20be:	68 d5       	rcall	.+2768   	; 0x2b90 <__mulsf3>
    20c0:	3d c0       	rjmp	.+122    	; 0x213c <_ZN3DHT15readTemperatureEbb+0xd6>
  float f = NAN;

  if (read(force)) {
    switch (_type) {
    case DHT11:
      f = data[2];
    20c2:	f8 01       	movw	r30, r16
    20c4:	62 81       	ldd	r22, Z+2	; 0x02
    20c6:	70 e0       	ldi	r23, 0x00	; 0
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	d3 d4       	rcall	.+2470   	; 0x2a74 <__floatunsisf>
    20ce:	6b 01       	movw	r12, r22
    20d0:	7c 01       	movw	r14, r24
      if (data[3] & 0x80) {
    20d2:	f8 01       	movw	r30, r16
    20d4:	d3 81       	ldd	r29, Z+3	; 0x03
    20d6:	d7 ff       	sbrs	r29, 7
    20d8:	09 c0       	rjmp	.+18     	; 0x20ec <_ZN3DHT15readTemperatureEbb+0x86>
        f = -1 - f;
    20da:	9b 01       	movw	r18, r22
    20dc:	ac 01       	movw	r20, r24
    20de:	60 e0       	ldi	r22, 0x00	; 0
    20e0:	70 e0       	ldi	r23, 0x00	; 0
    20e2:	80 e8       	ldi	r24, 0x80	; 128
    20e4:	9f eb       	ldi	r25, 0xBF	; 191
    20e6:	61 d4       	rcall	.+2242   	; 0x29aa <__subsf3>
    20e8:	6b 01       	movw	r12, r22
    20ea:	7c 01       	movw	r14, r24
      }
      f += (data[3] & 0x0f) * 0.1;
    20ec:	6d 2f       	mov	r22, r29
    20ee:	6f 70       	andi	r22, 0x0F	; 15
    20f0:	70 e0       	ldi	r23, 0x00	; 0
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	c0 d4       	rcall	.+2432   	; 0x2a78 <__floatsisf>
    20f8:	2d ec       	ldi	r18, 0xCD	; 205
    20fa:	3c ec       	ldi	r19, 0xCC	; 204
    20fc:	4c ec       	ldi	r20, 0xCC	; 204
    20fe:	5d e3       	ldi	r21, 0x3D	; 61
    2100:	47 d5       	rcall	.+2702   	; 0x2b90 <__mulsf3>
    2102:	a7 01       	movw	r20, r14
    2104:	96 01       	movw	r18, r12
    2106:	52 d4       	rcall	.+2212   	; 0x29ac <__addsf3>
    2108:	1b c0       	rjmp	.+54     	; 0x2140 <_ZN3DHT15readTemperatureEbb+0xda>
      if (S) {
        f = convertCtoF(f);
      }
      break;
    case DHT12:
      f = data[2];
    210a:	f8 01       	movw	r30, r16
    210c:	d2 81       	ldd	r29, Z+2	; 0x02
      f += (data[3] & 0x0f) * 0.1;
    210e:	63 81       	ldd	r22, Z+3	; 0x03
    2110:	6f 70       	andi	r22, 0x0F	; 15
    2112:	70 e0       	ldi	r23, 0x00	; 0
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	af d4       	rcall	.+2398   	; 0x2a78 <__floatsisf>
    211a:	2d ec       	ldi	r18, 0xCD	; 205
    211c:	3c ec       	ldi	r19, 0xCC	; 204
    211e:	4c ec       	ldi	r20, 0xCC	; 204
    2120:	5d e3       	ldi	r21, 0x3D	; 61
    2122:	36 d5       	rcall	.+2668   	; 0x2b90 <__mulsf3>
    2124:	6b 01       	movw	r12, r22
    2126:	7c 01       	movw	r14, r24
    2128:	6d 2f       	mov	r22, r29
    212a:	70 e0       	ldi	r23, 0x00	; 0
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	a1 d4       	rcall	.+2370   	; 0x2a74 <__floatunsisf>
    2132:	9b 01       	movw	r18, r22
    2134:	ac 01       	movw	r20, r24
    2136:	c7 01       	movw	r24, r14
    2138:	b6 01       	movw	r22, r12
    213a:	38 d4       	rcall	.+2160   	; 0x29ac <__addsf3>
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
      f *= 0.1;
      if (data[2] & 0x80) {
    213c:	d7 fd       	sbrc	r29, 7
        f *= -1;
      }
      if (S) {
    213e:	90 58       	subi	r25, 0x80	; 128
    2140:	cc 23       	and	r28, r28
 *  @brief  Converts Celcius to Fahrenheit
 *  @param  c
 *					value in Celcius
 *	@return float value in Fahrenheit
 */
float DHT::convertCtoF(float c) { return c * 1.8 + 32; }
    2142:	79 f0       	breq	.+30     	; 0x2162 <_ZN3DHT15readTemperatureEbb+0xfc>
    2144:	26 e6       	ldi	r18, 0x66	; 102
    2146:	36 e6       	ldi	r19, 0x66	; 102
    2148:	46 ee       	ldi	r20, 0xE6	; 230
    214a:	5f e3       	ldi	r21, 0x3F	; 63
    214c:	21 d5       	rcall	.+2626   	; 0x2b90 <__mulsf3>
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e0       	ldi	r20, 0x00	; 0
    2154:	52 e4       	ldi	r21, 0x42	; 66
    2156:	2a d4       	rcall	.+2132   	; 0x29ac <__addsf3>
    2158:	04 c0       	rjmp	.+8      	; 0x2162 <_ZN3DHT15readTemperatureEbb+0xfc>
    215a:	60 e0       	ldi	r22, 0x00	; 0
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
  float f = NAN;
    215c:	70 e0       	ldi	r23, 0x00	; 0
    215e:	80 ec       	ldi	r24, 0xC0	; 192
    2160:	9f e7       	ldi	r25, 0x7F	; 127
    2162:	df 91       	pop	r29
      }
      break;
    }
  }
  return f;
}
    2164:	cf 91       	pop	r28
    2166:	1f 91       	pop	r17
    2168:	0f 91       	pop	r16
    216a:	ff 90       	pop	r15
    216c:	ef 90       	pop	r14
    216e:	df 90       	pop	r13
    2170:	cf 90       	pop	r12
    2172:	08 95       	ret

00002174 <_ZN3DHT12readHumidityEb>:
    2174:	cf 92       	push	r12
 *  @brief  Read Humidity
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
    2176:	df 92       	push	r13
    2178:	ef 92       	push	r14
    217a:	ff 92       	push	r15
    217c:	cf 93       	push	r28
    217e:	df 93       	push	r29
    2180:	ec 01       	movw	r28, r24
  float f = NAN;
  if (read(force)) {
    2182:	76 de       	rcall	.-788    	; 0x1e70 <_ZN3DHT4readEb>
    2184:	88 23       	and	r24, r24
    2186:	69 f1       	breq	.+90     	; 0x21e2 <_ZN3DHT12readHumidityEb+0x6e>
    switch (_type) {
    2188:	8e 81       	ldd	r24, Y+6	; 0x06
    218a:	8b 30       	cpi	r24, 0x0B	; 11
    218c:	50 f1       	brcs	.+84     	; 0x21e2 <_ZN3DHT12readHumidityEb+0x6e>
    218e:	8d 30       	cpi	r24, 0x0D	; 13
    2190:	88 f0       	brcs	.+34     	; 0x21b4 <_ZN3DHT12readHumidityEb+0x40>
    2192:	85 51       	subi	r24, 0x15	; 21
    2194:	82 30       	cpi	r24, 0x02	; 2
    2196:	28 f5       	brcc	.+74     	; 0x21e2 <_ZN3DHT12readHumidityEb+0x6e>
    case DHT12:
      f = data[0] + data[1] * 0.1;
      break;
    case DHT22:
    case DHT21:
      f = ((word)data[0]) << 8 | data[1];
    2198:	68 81       	ld	r22, Y
    219a:	79 81       	ldd	r23, Y+1	; 0x01
    219c:	76 27       	eor	r23, r22
    219e:	67 27       	eor	r22, r23
    21a0:	76 27       	eor	r23, r22
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	66 d4       	rcall	.+2252   	; 0x2a74 <__floatunsisf>
      f *= 0.1;
    21a8:	2d ec       	ldi	r18, 0xCD	; 205
    21aa:	3c ec       	ldi	r19, 0xCC	; 204
    21ac:	4c ec       	ldi	r20, 0xCC	; 204
    21ae:	5d e3       	ldi	r21, 0x3D	; 61
    21b0:	ef d4       	rcall	.+2526   	; 0x2b90 <__mulsf3>
      break;
    21b2:	1b c0       	rjmp	.+54     	; 0x21ea <_ZN3DHT12readHumidityEb+0x76>
  float f = NAN;
  if (read(force)) {
    switch (_type) {
    case DHT11:
    case DHT12:
      f = data[0] + data[1] * 0.1;
    21b4:	69 81       	ldd	r22, Y+1	; 0x01
    21b6:	70 e0       	ldi	r23, 0x00	; 0
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	5d d4       	rcall	.+2234   	; 0x2a78 <__floatsisf>
    21be:	2d ec       	ldi	r18, 0xCD	; 205
    21c0:	3c ec       	ldi	r19, 0xCC	; 204
    21c2:	4c ec       	ldi	r20, 0xCC	; 204
    21c4:	5d e3       	ldi	r21, 0x3D	; 61
    21c6:	e4 d4       	rcall	.+2504   	; 0x2b90 <__mulsf3>
    21c8:	6b 01       	movw	r12, r22
    21ca:	7c 01       	movw	r14, r24
    21cc:	68 81       	ld	r22, Y
    21ce:	70 e0       	ldi	r23, 0x00	; 0
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	51 d4       	rcall	.+2210   	; 0x2a78 <__floatsisf>
    21d6:	9b 01       	movw	r18, r22
    21d8:	ac 01       	movw	r20, r24
    21da:	c7 01       	movw	r24, r14
    21dc:	b6 01       	movw	r22, r12
    21de:	e6 d3       	rcall	.+1996   	; 0x29ac <__addsf3>
    21e0:	04 c0       	rjmp	.+8      	; 0x21ea <_ZN3DHT12readHumidityEb+0x76>
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
  float f = NAN;
    21e2:	60 e0       	ldi	r22, 0x00	; 0
    21e4:	70 e0       	ldi	r23, 0x00	; 0
    21e6:	80 ec       	ldi	r24, 0xC0	; 192
    21e8:	9f e7       	ldi	r25, 0x7F	; 127
      f *= 0.1;
      break;
    }
  }
  return f;
}
    21ea:	df 91       	pop	r29
    21ec:	cf 91       	pop	r28
    21ee:	ff 90       	pop	r15
    21f0:	ef 90       	pop	r14
    21f2:	df 90       	pop	r13
    21f4:	cf 90       	pop	r12
    21f6:	08 95       	ret

000021f8 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    21f8:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <twi_state>
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	80 93 ab 05 	sts	0x05AB, r24	; 0x8005ab <twi_sendStop>
    2202:	10 92 aa 05 	sts	0x05AA, r1	; 0x8005aa <twi_inRepStart>
    2206:	61 e0       	ldi	r22, 0x01	; 1
    2208:	84 e1       	ldi	r24, 0x14	; 20
    220a:	0e 94 c6 1a 	call	0x358c	; 0x358c <digitalWrite>
    220e:	61 e0       	ldi	r22, 0x01	; 1
    2210:	85 e1       	ldi	r24, 0x15	; 21
    2212:	0e 94 c6 1a 	call	0x358c	; 0x358c <digitalWrite>
    2216:	e9 eb       	ldi	r30, 0xB9	; 185
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	8e 7f       	andi	r24, 0xFE	; 254
    221e:	80 83       	st	Z, r24
    2220:	80 81       	ld	r24, Z
    2222:	8d 7f       	andi	r24, 0xFD	; 253
    2224:	80 83       	st	Z, r24
    2226:	88 e4       	ldi	r24, 0x48	; 72
    2228:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    222c:	85 e4       	ldi	r24, 0x45	; 69
    222e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2232:	08 95       	ret

00002234 <twi_disable>:
    2234:	ec eb       	ldi	r30, 0xBC	; 188
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	8a 7b       	andi	r24, 0xBA	; 186
    223c:	80 83       	st	Z, r24
    223e:	60 e0       	ldi	r22, 0x00	; 0
    2240:	84 e1       	ldi	r24, 0x14	; 20
    2242:	0e 94 c6 1a 	call	0x358c	; 0x358c <digitalWrite>
    2246:	60 e0       	ldi	r22, 0x00	; 0
    2248:	85 e1       	ldi	r24, 0x15	; 21
    224a:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <digitalWrite>

0000224e <twi_setFrequency>:
    224e:	9b 01       	movw	r18, r22
    2250:	ac 01       	movw	r20, r24
    2252:	60 e0       	ldi	r22, 0x00	; 0
    2254:	74 e2       	ldi	r23, 0x24	; 36
    2256:	84 ef       	ldi	r24, 0xF4	; 244
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	0e 94 27 1c 	call	0x384e	; 0x384e <__udivmodsi4>
    225e:	da 01       	movw	r26, r20
    2260:	c9 01       	movw	r24, r18
    2262:	40 97       	sbiw	r24, 0x10	; 16
    2264:	a1 09       	sbc	r26, r1
    2266:	b1 09       	sbc	r27, r1
    2268:	b6 95       	lsr	r27
    226a:	a7 95       	ror	r26
    226c:	97 95       	ror	r25
    226e:	87 95       	ror	r24
    2270:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    2274:	08 95       	ret

00002276 <twi_transmit>:
    2276:	40 91 5c 05 	lds	r20, 0x055C	; 0x80055c <twi_txBufferLength>
    227a:	26 2f       	mov	r18, r22
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	24 0f       	add	r18, r20
    2280:	31 1d       	adc	r19, r1
    2282:	21 32       	cpi	r18, 0x21	; 33
    2284:	31 05       	cpc	r19, r1
    2286:	dc f4       	brge	.+54     	; 0x22be <twi_transmit+0x48>
    2288:	20 91 ad 05 	lds	r18, 0x05AD	; 0x8005ad <twi_state>
    228c:	24 30       	cpi	r18, 0x04	; 4
    228e:	c9 f4       	brne	.+50     	; 0x22c2 <twi_transmit+0x4c>
    2290:	fc 01       	movw	r30, r24
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	86 17       	cp	r24, r22
    2298:	58 f4       	brcc	.+22     	; 0x22b0 <twi_transmit+0x3a>
    229a:	30 91 5c 05 	lds	r19, 0x055C	; 0x80055c <twi_txBufferLength>
    229e:	21 91       	ld	r18, Z+
    22a0:	dc 01       	movw	r26, r24
    22a2:	a2 5a       	subi	r26, 0xA2	; 162
    22a4:	ba 4f       	sbci	r27, 0xFA	; 250
    22a6:	a3 0f       	add	r26, r19
    22a8:	b1 1d       	adc	r27, r1
    22aa:	2c 93       	st	X, r18
    22ac:	01 96       	adiw	r24, 0x01	; 1
    22ae:	f3 cf       	rjmp	.-26     	; 0x2296 <twi_transmit+0x20>
    22b0:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <twi_txBufferLength>
    22b4:	68 0f       	add	r22, r24
    22b6:	60 93 5c 05 	sts	0x055C, r22	; 0x80055c <twi_txBufferLength>
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	08 95       	ret
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	08 95       	ret
    22c2:	82 e0       	ldi	r24, 0x02	; 2
    22c4:	08 95       	ret

000022c6 <twi_attachSlaveRxEvent>:
    22c6:	90 93 a1 05 	sts	0x05A1, r25	; 0x8005a1 <twi_onSlaveReceive+0x1>
    22ca:	80 93 a0 05 	sts	0x05A0, r24	; 0x8005a0 <twi_onSlaveReceive>
    22ce:	08 95       	ret

000022d0 <twi_attachSlaveTxEvent>:
    22d0:	90 93 a3 05 	sts	0x05A3, r25	; 0x8005a3 <twi_onSlaveTransmit+0x1>
    22d4:	80 93 a2 05 	sts	0x05A2, r24	; 0x8005a2 <twi_onSlaveTransmit>
    22d8:	08 95       	ret

000022da <twi_releaseBus>:
    22da:	85 ec       	ldi	r24, 0xC5	; 197
    22dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    22e0:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <twi_state>
    22e4:	08 95       	ret

000022e6 <twi_handleTimeout>:
    22e6:	cf 93       	push	r28
    22e8:	df 93       	push	r29
    22ea:	91 e0       	ldi	r25, 0x01	; 1
    22ec:	90 93 a5 05 	sts	0x05A5, r25	; 0x8005a5 <twi_timed_out_flag>
    22f0:	88 23       	and	r24, r24
    22f2:	51 f0       	breq	.+20     	; 0x2308 <twi_handleTimeout+0x22>
    22f4:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    22f8:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    22fc:	9b df       	rcall	.-202    	; 0x2234 <twi_disable>
    22fe:	7c df       	rcall	.-264    	; 0x21f8 <twi_init>
    2300:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    2304:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    2308:	df 91       	pop	r29
    230a:	cf 91       	pop	r28
    230c:	08 95       	ret

0000230e <twi_writeTo>:
    230e:	4f 92       	push	r4
    2310:	5f 92       	push	r5
    2312:	6f 92       	push	r6
    2314:	7f 92       	push	r7
    2316:	8f 92       	push	r8
    2318:	9f 92       	push	r9
    231a:	af 92       	push	r10
    231c:	bf 92       	push	r11
    231e:	cf 92       	push	r12
    2320:	df 92       	push	r13
    2322:	ef 92       	push	r14
    2324:	ff 92       	push	r15
    2326:	0f 93       	push	r16
    2328:	1f 93       	push	r17
    232a:	cf 93       	push	r28
    232c:	df 93       	push	r29
    232e:	41 32       	cpi	r20, 0x21	; 33
    2330:	08 f0       	brcs	.+2      	; 0x2334 <twi_writeTo+0x26>
    2332:	bf c0       	rjmp	.+382    	; 0x24b2 <twi_writeTo+0x1a4>
    2334:	12 2f       	mov	r17, r18
    2336:	f4 2e       	mov	r15, r20
    2338:	d7 2e       	mov	r13, r23
    233a:	e6 2e       	mov	r14, r22
    233c:	d8 2f       	mov	r29, r24
    233e:	ca d7       	rcall	.+3988   	; 0x32d4 <micros>
    2340:	4b 01       	movw	r8, r22
    2342:	5c 01       	movw	r10, r24
    2344:	c0 91 ad 05 	lds	r28, 0x05AD	; 0x8005ad <twi_state>
    2348:	cc 23       	and	r28, r28
    234a:	09 f1       	breq	.+66     	; 0x238e <twi_writeTo+0x80>
    234c:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <twi_timeout_us>
    2350:	90 91 a7 05 	lds	r25, 0x05A7	; 0x8005a7 <twi_timeout_us+0x1>
    2354:	a0 91 a8 05 	lds	r26, 0x05A8	; 0x8005a8 <twi_timeout_us+0x2>
    2358:	b0 91 a9 05 	lds	r27, 0x05A9	; 0x8005a9 <twi_timeout_us+0x3>
    235c:	89 2b       	or	r24, r25
    235e:	8a 2b       	or	r24, r26
    2360:	8b 2b       	or	r24, r27
    2362:	81 f3       	breq	.-32     	; 0x2344 <twi_writeTo+0x36>
    2364:	b7 d7       	rcall	.+3950   	; 0x32d4 <micros>
    2366:	40 90 a6 05 	lds	r4, 0x05A6	; 0x8005a6 <twi_timeout_us>
    236a:	50 90 a7 05 	lds	r5, 0x05A7	; 0x8005a7 <twi_timeout_us+0x1>
    236e:	60 90 a8 05 	lds	r6, 0x05A8	; 0x8005a8 <twi_timeout_us+0x2>
    2372:	70 90 a9 05 	lds	r7, 0x05A9	; 0x8005a9 <twi_timeout_us+0x3>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	88 19       	sub	r24, r8
    237c:	99 09       	sbc	r25, r9
    237e:	aa 09       	sbc	r26, r10
    2380:	bb 09       	sbc	r27, r11
    2382:	48 16       	cp	r4, r24
    2384:	59 06       	cpc	r5, r25
    2386:	6a 06       	cpc	r6, r26
    2388:	7b 06       	cpc	r7, r27
    238a:	e0 f6       	brcc	.-72     	; 0x2344 <twi_writeTo+0x36>
    238c:	7f c0       	rjmp	.+254    	; 0x248c <twi_writeTo+0x17e>
    238e:	82 e0       	ldi	r24, 0x02	; 2
    2390:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <twi_state>
    2394:	00 93 ab 05 	sts	0x05AB, r16	; 0x8005ab <twi_sendStop>
    2398:	8f ef       	ldi	r24, 0xFF	; 255
    239a:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <twi_error>
    239e:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <twi_masterBufferIndex>
    23a2:	f0 92 7e 05 	sts	0x057E, r15	; 0x80057e <twi_masterBufferLength>
    23a6:	9e 2d       	mov	r25, r14
    23a8:	a0 e8       	ldi	r26, 0x80	; 128
    23aa:	b5 e0       	ldi	r27, 0x05	; 5
    23ac:	ee 2d       	mov	r30, r14
    23ae:	fd 2d       	mov	r31, r13
    23b0:	8e 2f       	mov	r24, r30
    23b2:	89 1b       	sub	r24, r25
    23b4:	8f 15       	cp	r24, r15
    23b6:	18 f4       	brcc	.+6      	; 0x23be <twi_writeTo+0xb0>
    23b8:	81 91       	ld	r24, Z+
    23ba:	8d 93       	st	X+, r24
    23bc:	f9 cf       	rjmp	.-14     	; 0x23b0 <twi_writeTo+0xa2>
    23be:	10 92 ac 05 	sts	0x05AC, r1	; 0x8005ac <twi_slarw>
    23c2:	90 91 ac 05 	lds	r25, 0x05AC	; 0x8005ac <twi_slarw>
    23c6:	dd 0f       	add	r29, r29
    23c8:	d9 2b       	or	r29, r25
    23ca:	d0 93 ac 05 	sts	0x05AC, r29	; 0x8005ac <twi_slarw>
    23ce:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <twi_inRepStart>
    23d2:	81 30       	cpi	r24, 0x01	; 1
    23d4:	79 f5       	brne	.+94     	; 0x2434 <twi_writeTo+0x126>
    23d6:	10 92 aa 05 	sts	0x05AA, r1	; 0x8005aa <twi_inRepStart>
    23da:	7c d7       	rcall	.+3832   	; 0x32d4 <micros>
    23dc:	6b 01       	movw	r12, r22
    23de:	7c 01       	movw	r14, r24
    23e0:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <twi_slarw>
    23e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    23e8:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <twi_timeout_us>
    23ec:	90 91 a7 05 	lds	r25, 0x05A7	; 0x8005a7 <twi_timeout_us+0x1>
    23f0:	a0 91 a8 05 	lds	r26, 0x05A8	; 0x8005a8 <twi_timeout_us+0x2>
    23f4:	b0 91 a9 05 	lds	r27, 0x05A9	; 0x8005a9 <twi_timeout_us+0x3>
    23f8:	89 2b       	or	r24, r25
    23fa:	8a 2b       	or	r24, r26
    23fc:	8b 2b       	or	r24, r27
    23fe:	a1 f0       	breq	.+40     	; 0x2428 <twi_writeTo+0x11a>
    2400:	69 d7       	rcall	.+3794   	; 0x32d4 <micros>
    2402:	80 90 a6 05 	lds	r8, 0x05A6	; 0x8005a6 <twi_timeout_us>
    2406:	90 90 a7 05 	lds	r9, 0x05A7	; 0x8005a7 <twi_timeout_us+0x1>
    240a:	a0 90 a8 05 	lds	r10, 0x05A8	; 0x8005a8 <twi_timeout_us+0x2>
    240e:	b0 90 a9 05 	lds	r11, 0x05A9	; 0x8005a9 <twi_timeout_us+0x3>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	8c 19       	sub	r24, r12
    2418:	9d 09       	sbc	r25, r13
    241a:	ae 09       	sbc	r26, r14
    241c:	bf 09       	sbc	r27, r15
    241e:	88 16       	cp	r8, r24
    2420:	99 06       	cpc	r9, r25
    2422:	aa 06       	cpc	r10, r26
    2424:	bb 06       	cpc	r11, r27
    2426:	90 f1       	brcs	.+100    	; 0x248c <twi_writeTo+0x17e>
    2428:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    242c:	83 fd       	sbrc	r24, 3
    242e:	d8 cf       	rjmp	.-80     	; 0x23e0 <twi_writeTo+0xd2>
    2430:	85 ec       	ldi	r24, 0xC5	; 197
    2432:	01 c0       	rjmp	.+2      	; 0x2436 <twi_writeTo+0x128>
    2434:	85 ee       	ldi	r24, 0xE5	; 229
    2436:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    243a:	4c d7       	rcall	.+3736   	; 0x32d4 <micros>
    243c:	6b 01       	movw	r12, r22
    243e:	7c 01       	movw	r14, r24
    2440:	11 23       	and	r17, r17
    2442:	49 f1       	breq	.+82     	; 0x2496 <twi_writeTo+0x188>
    2444:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <twi_state>
    2448:	82 30       	cpi	r24, 0x02	; 2
    244a:	29 f5       	brne	.+74     	; 0x2496 <twi_writeTo+0x188>
    244c:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <twi_timeout_us>
    2450:	90 91 a7 05 	lds	r25, 0x05A7	; 0x8005a7 <twi_timeout_us+0x1>
    2454:	a0 91 a8 05 	lds	r26, 0x05A8	; 0x8005a8 <twi_timeout_us+0x2>
    2458:	b0 91 a9 05 	lds	r27, 0x05A9	; 0x8005a9 <twi_timeout_us+0x3>
    245c:	89 2b       	or	r24, r25
    245e:	8a 2b       	or	r24, r26
    2460:	8b 2b       	or	r24, r27
    2462:	71 f3       	breq	.-36     	; 0x2440 <twi_writeTo+0x132>
    2464:	37 d7       	rcall	.+3694   	; 0x32d4 <micros>
    2466:	80 90 a6 05 	lds	r8, 0x05A6	; 0x8005a6 <twi_timeout_us>
    246a:	90 90 a7 05 	lds	r9, 0x05A7	; 0x8005a7 <twi_timeout_us+0x1>
    246e:	a0 90 a8 05 	lds	r10, 0x05A8	; 0x8005a8 <twi_timeout_us+0x2>
    2472:	b0 90 a9 05 	lds	r11, 0x05A9	; 0x8005a9 <twi_timeout_us+0x3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	8c 19       	sub	r24, r12
    247c:	9d 09       	sbc	r25, r13
    247e:	ae 09       	sbc	r26, r14
    2480:	bf 09       	sbc	r27, r15
    2482:	88 16       	cp	r8, r24
    2484:	99 06       	cpc	r9, r25
    2486:	aa 06       	cpc	r10, r26
    2488:	bb 06       	cpc	r11, r27
    248a:	d0 f6       	brcc	.-76     	; 0x2440 <twi_writeTo+0x132>
    248c:	80 91 a4 05 	lds	r24, 0x05A4	; 0x8005a4 <twi_do_reset_on_timeout>
    2490:	2a df       	rcall	.-428    	; 0x22e6 <twi_handleTimeout>
    2492:	c5 e0       	ldi	r28, 0x05	; 5
    2494:	13 c0       	rjmp	.+38     	; 0x24bc <twi_writeTo+0x1ae>
    2496:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <twi_error>
    249a:	8f 3f       	cpi	r24, 0xFF	; 255
    249c:	79 f0       	breq	.+30     	; 0x24bc <twi_writeTo+0x1ae>
    249e:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <twi_error>
    24a2:	80 32       	cpi	r24, 0x20	; 32
    24a4:	41 f0       	breq	.+16     	; 0x24b6 <twi_writeTo+0x1a8>
    24a6:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <twi_error>
    24aa:	80 33       	cpi	r24, 0x30	; 48
    24ac:	31 f0       	breq	.+12     	; 0x24ba <twi_writeTo+0x1ac>
    24ae:	c4 e0       	ldi	r28, 0x04	; 4
    24b0:	05 c0       	rjmp	.+10     	; 0x24bc <twi_writeTo+0x1ae>
    24b2:	c1 e0       	ldi	r28, 0x01	; 1
    24b4:	03 c0       	rjmp	.+6      	; 0x24bc <twi_writeTo+0x1ae>
    24b6:	c2 e0       	ldi	r28, 0x02	; 2
    24b8:	01 c0       	rjmp	.+2      	; 0x24bc <twi_writeTo+0x1ae>
    24ba:	c3 e0       	ldi	r28, 0x03	; 3
    24bc:	8c 2f       	mov	r24, r28
    24be:	df 91       	pop	r29
    24c0:	cf 91       	pop	r28
    24c2:	1f 91       	pop	r17
    24c4:	0f 91       	pop	r16
    24c6:	ff 90       	pop	r15
    24c8:	ef 90       	pop	r14
    24ca:	df 90       	pop	r13
    24cc:	cf 90       	pop	r12
    24ce:	bf 90       	pop	r11
    24d0:	af 90       	pop	r10
    24d2:	9f 90       	pop	r9
    24d4:	8f 90       	pop	r8
    24d6:	7f 90       	pop	r7
    24d8:	6f 90       	pop	r6
    24da:	5f 90       	pop	r5
    24dc:	4f 90       	pop	r4
    24de:	08 95       	ret

000024e0 <twi_stop>:
    24e0:	85 ed       	ldi	r24, 0xD5	; 213
    24e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    24e6:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <twi_timeout_us>
    24ea:	90 91 a7 05 	lds	r25, 0x05A7	; 0x8005a7 <twi_timeout_us+0x1>
    24ee:	a0 91 a8 05 	lds	r26, 0x05A8	; 0x8005a8 <twi_timeout_us+0x2>
    24f2:	b0 91 a9 05 	lds	r27, 0x05A9	; 0x8005a9 <twi_timeout_us+0x3>
    24f6:	07 96       	adiw	r24, 0x07	; 7
    24f8:	a1 1d       	adc	r26, r1
    24fa:	b1 1d       	adc	r27, r1
    24fc:	23 e0       	ldi	r18, 0x03	; 3
    24fe:	b6 95       	lsr	r27
    2500:	a7 95       	ror	r26
    2502:	97 95       	ror	r25
    2504:	87 95       	ror	r24
    2506:	2a 95       	dec	r18
    2508:	d1 f7       	brne	.-12     	; 0x24fe <twi_stop+0x1e>
    250a:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    250e:	24 ff       	sbrs	r18, 4
    2510:	1b c0       	rjmp	.+54     	; 0x2548 <twi_stop+0x68>
    2512:	40 91 a6 05 	lds	r20, 0x05A6	; 0x8005a6 <twi_timeout_us>
    2516:	50 91 a7 05 	lds	r21, 0x05A7	; 0x8005a7 <twi_timeout_us+0x1>
    251a:	60 91 a8 05 	lds	r22, 0x05A8	; 0x8005a8 <twi_timeout_us+0x2>
    251e:	70 91 a9 05 	lds	r23, 0x05A9	; 0x8005a9 <twi_timeout_us+0x3>
    2522:	45 2b       	or	r20, r21
    2524:	46 2b       	or	r20, r22
    2526:	47 2b       	or	r20, r23
    2528:	81 f3       	breq	.-32     	; 0x250a <twi_stop+0x2a>
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	a1 05       	cpc	r26, r1
    252e:	b1 05       	cpc	r27, r1
    2530:	41 f0       	breq	.+16     	; 0x2542 <twi_stop+0x62>
    2532:	25 e3       	ldi	r18, 0x35	; 53
    2534:	2a 95       	dec	r18
    2536:	f1 f7       	brne	.-4      	; 0x2534 <twi_stop+0x54>
    2538:	00 00       	nop
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	a1 09       	sbc	r26, r1
    253e:	b1 09       	sbc	r27, r1
    2540:	e4 cf       	rjmp	.-56     	; 0x250a <twi_stop+0x2a>
    2542:	80 91 a4 05 	lds	r24, 0x05A4	; 0x8005a4 <twi_do_reset_on_timeout>
    2546:	cf ce       	rjmp	.-610    	; 0x22e6 <twi_handleTimeout>
    2548:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <twi_state>
    254c:	08 95       	ret

0000254e <__vector_39>:

ISR(TWI_vect)
{
    254e:	1f 92       	push	r1
    2550:	0f 92       	push	r0
    2552:	0f b6       	in	r0, 0x3f	; 63
    2554:	0f 92       	push	r0
    2556:	11 24       	eor	r1, r1
    2558:	0b b6       	in	r0, 0x3b	; 59
    255a:	0f 92       	push	r0
    255c:	2f 93       	push	r18
    255e:	3f 93       	push	r19
    2560:	4f 93       	push	r20
    2562:	5f 93       	push	r21
    2564:	6f 93       	push	r22
    2566:	7f 93       	push	r23
    2568:	8f 93       	push	r24
    256a:	9f 93       	push	r25
    256c:	af 93       	push	r26
    256e:	bf 93       	push	r27
    2570:	ef 93       	push	r30
    2572:	ff 93       	push	r31
  switch(TW_STATUS){
    2574:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    2578:	88 7f       	andi	r24, 0xF8	; 248
    257a:	80 36       	cpi	r24, 0x60	; 96
    257c:	09 f4       	brne	.+2      	; 0x2580 <__vector_39+0x32>
    257e:	9d c0       	rjmp	.+314    	; 0x26ba <__vector_39+0x16c>
    2580:	70 f5       	brcc	.+92     	; 0x25de <__vector_39+0x90>
    2582:	88 32       	cpi	r24, 0x28	; 40
    2584:	09 f4       	brne	.+2      	; 0x2588 <__vector_39+0x3a>
    2586:	5c c0       	rjmp	.+184    	; 0x2640 <__vector_39+0xf2>
    2588:	90 f4       	brcc	.+36     	; 0x25ae <__vector_39+0x60>
    258a:	80 31       	cpi	r24, 0x10	; 16
    258c:	09 f4       	brne	.+2      	; 0x2590 <__vector_39+0x42>
    258e:	55 c0       	rjmp	.+170    	; 0x263a <__vector_39+0xec>
    2590:	38 f4       	brcc	.+14     	; 0x25a0 <__vector_39+0x52>
    2592:	88 23       	and	r24, r24
    2594:	09 f4       	brne	.+2      	; 0x2598 <__vector_39+0x4a>
    2596:	f3 c0       	rjmp	.+486    	; 0x277e <__vector_39+0x230>
    2598:	88 30       	cpi	r24, 0x08	; 8
    259a:	09 f4       	brne	.+2      	; 0x259e <__vector_39+0x50>
    259c:	4e c0       	rjmp	.+156    	; 0x263a <__vector_39+0xec>
    259e:	f2 c0       	rjmp	.+484    	; 0x2784 <__vector_39+0x236>
    25a0:	88 31       	cpi	r24, 0x18	; 24
    25a2:	09 f4       	brne	.+2      	; 0x25a6 <__vector_39+0x58>
    25a4:	4d c0       	rjmp	.+154    	; 0x2640 <__vector_39+0xf2>
    25a6:	80 32       	cpi	r24, 0x20	; 32
    25a8:	09 f4       	brne	.+2      	; 0x25ac <__vector_39+0x5e>
    25aa:	5e c0       	rjmp	.+188    	; 0x2668 <__vector_39+0x11a>
    25ac:	eb c0       	rjmp	.+470    	; 0x2784 <__vector_39+0x236>
    25ae:	80 34       	cpi	r24, 0x40	; 64
    25b0:	09 f4       	brne	.+2      	; 0x25b4 <__vector_39+0x66>
    25b2:	69 c0       	rjmp	.+210    	; 0x2686 <__vector_39+0x138>
    25b4:	50 f4       	brcc	.+20     	; 0x25ca <__vector_39+0x7c>
    25b6:	80 33       	cpi	r24, 0x30	; 48
    25b8:	09 f4       	brne	.+2      	; 0x25bc <__vector_39+0x6e>
    25ba:	56 c0       	rjmp	.+172    	; 0x2668 <__vector_39+0x11a>
    25bc:	88 33       	cpi	r24, 0x38	; 56
    25be:	09 f0       	breq	.+2      	; 0x25c2 <__vector_39+0x74>
    25c0:	e1 c0       	rjmp	.+450    	; 0x2784 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    25c2:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <twi_error>
      twi_releaseBus();
    25c6:	89 de       	rcall	.-750    	; 0x22da <twi_releaseBus>
      break;
    25c8:	dd c0       	rjmp	.+442    	; 0x2784 <__vector_39+0x236>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    25ca:	80 35       	cpi	r24, 0x50	; 80
    25cc:	09 f4       	brne	.+2      	; 0x25d0 <__vector_39+0x82>
    25ce:	4f c0       	rjmp	.+158    	; 0x266e <__vector_39+0x120>
    25d0:	88 35       	cpi	r24, 0x58	; 88
    25d2:	09 f4       	brne	.+2      	; 0x25d6 <__vector_39+0x88>
    25d4:	5d c0       	rjmp	.+186    	; 0x2690 <__vector_39+0x142>
    25d6:	88 34       	cpi	r24, 0x48	; 72
    25d8:	09 f0       	breq	.+2      	; 0x25dc <__vector_39+0x8e>
    25da:	d4 c0       	rjmp	.+424    	; 0x2784 <__vector_39+0x236>
    25dc:	d2 c0       	rjmp	.+420    	; 0x2782 <__vector_39+0x234>
    25de:	88 39       	cpi	r24, 0x98	; 152
    25e0:	09 f4       	brne	.+2      	; 0x25e4 <__vector_39+0x96>
    25e2:	c3 c0       	rjmp	.+390    	; 0x276a <__vector_39+0x21c>
    25e4:	a8 f4       	brcc	.+42     	; 0x2610 <__vector_39+0xc2>
    25e6:	88 37       	cpi	r24, 0x78	; 120
    25e8:	09 f4       	brne	.+2      	; 0x25ec <__vector_39+0x9e>
    25ea:	67 c0       	rjmp	.+206    	; 0x26ba <__vector_39+0x16c>
    25ec:	38 f4       	brcc	.+14     	; 0x25fc <__vector_39+0xae>
    25ee:	88 36       	cpi	r24, 0x68	; 104
    25f0:	09 f4       	brne	.+2      	; 0x25f4 <__vector_39+0xa6>
    25f2:	63 c0       	rjmp	.+198    	; 0x26ba <__vector_39+0x16c>
    25f4:	80 37       	cpi	r24, 0x70	; 112
    25f6:	09 f4       	brne	.+2      	; 0x25fa <__vector_39+0xac>
    25f8:	60 c0       	rjmp	.+192    	; 0x26ba <__vector_39+0x16c>
    25fa:	c4 c0       	rjmp	.+392    	; 0x2784 <__vector_39+0x236>
    25fc:	88 38       	cpi	r24, 0x88	; 136
    25fe:	09 f4       	brne	.+2      	; 0x2602 <__vector_39+0xb4>
    2600:	b4 c0       	rjmp	.+360    	; 0x276a <__vector_39+0x21c>
    2602:	80 39       	cpi	r24, 0x90	; 144
    2604:	09 f4       	brne	.+2      	; 0x2608 <__vector_39+0xba>
    2606:	5f c0       	rjmp	.+190    	; 0x26c6 <__vector_39+0x178>
    2608:	80 38       	cpi	r24, 0x80	; 128
    260a:	09 f0       	breq	.+2      	; 0x260e <__vector_39+0xc0>
    260c:	bb c0       	rjmp	.+374    	; 0x2784 <__vector_39+0x236>
    260e:	5b c0       	rjmp	.+182    	; 0x26c6 <__vector_39+0x178>
    2610:	80 3b       	cpi	r24, 0xB0	; 176
    2612:	09 f4       	brne	.+2      	; 0x2616 <__vector_39+0xc8>
    2614:	82 c0       	rjmp	.+260    	; 0x271a <__vector_39+0x1cc>
    2616:	38 f4       	brcc	.+14     	; 0x2626 <__vector_39+0xd8>
    2618:	80 3a       	cpi	r24, 0xA0	; 160
    261a:	09 f4       	brne	.+2      	; 0x261e <__vector_39+0xd0>
    261c:	66 c0       	rjmp	.+204    	; 0x26ea <__vector_39+0x19c>
    261e:	88 3a       	cpi	r24, 0xA8	; 168
    2620:	09 f4       	brne	.+2      	; 0x2624 <__vector_39+0xd6>
    2622:	7b c0       	rjmp	.+246    	; 0x271a <__vector_39+0x1cc>
    2624:	af c0       	rjmp	.+350    	; 0x2784 <__vector_39+0x236>
    2626:	80 3c       	cpi	r24, 0xC0	; 192
    2628:	09 f4       	brne	.+2      	; 0x262c <__vector_39+0xde>
    262a:	a3 c0       	rjmp	.+326    	; 0x2772 <__vector_39+0x224>
    262c:	88 3c       	cpi	r24, 0xC8	; 200
    262e:	09 f4       	brne	.+2      	; 0x2632 <__vector_39+0xe4>
    2630:	a0 c0       	rjmp	.+320    	; 0x2772 <__vector_39+0x224>
    2632:	88 3b       	cpi	r24, 0xB8	; 184
    2634:	09 f4       	brne	.+2      	; 0x2638 <__vector_39+0xea>
    2636:	86 c0       	rjmp	.+268    	; 0x2744 <__vector_39+0x1f6>
    2638:	a5 c0       	rjmp	.+330    	; 0x2784 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    263a:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <twi_slarw>
    263e:	10 c0       	rjmp	.+32     	; 0x2660 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2640:	90 91 7f 05 	lds	r25, 0x057F	; 0x80057f <twi_masterBufferIndex>
    2644:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <twi_masterBufferLength>
    2648:	98 17       	cp	r25, r24
    264a:	70 f5       	brcc	.+92     	; 0x26a8 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    264c:	e0 91 7f 05 	lds	r30, 0x057F	; 0x80057f <twi_masterBufferIndex>
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	8e 0f       	add	r24, r30
    2654:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <twi_masterBufferIndex>
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	e0 58       	subi	r30, 0x80	; 128
    265c:	fa 4f       	sbci	r31, 0xFA	; 250
    265e:	80 81       	ld	r24, Z
    2660:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2664:	85 ec       	ldi	r24, 0xC5	; 197
    2666:	82 c0       	rjmp	.+260    	; 0x276c <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2668:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <twi_error>
    266c:	8a c0       	rjmp	.+276    	; 0x2782 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    266e:	e0 91 7f 05 	lds	r30, 0x057F	; 0x80057f <twi_masterBufferIndex>
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	8e 0f       	add	r24, r30
    2676:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <twi_masterBufferIndex>
    267a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	e0 58       	subi	r30, 0x80	; 128
    2682:	fa 4f       	sbci	r31, 0xFA	; 250
    2684:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2686:	90 91 7f 05 	lds	r25, 0x057F	; 0x80057f <twi_masterBufferIndex>
    268a:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <twi_masterBufferLength>
    268e:	6a c0       	rjmp	.+212    	; 0x2764 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2690:	e0 91 7f 05 	lds	r30, 0x057F	; 0x80057f <twi_masterBufferIndex>
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	8e 0f       	add	r24, r30
    2698:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <twi_masterBufferIndex>
    269c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	e0 58       	subi	r30, 0x80	; 128
    26a4:	fa 4f       	sbci	r31, 0xFA	; 250
    26a6:	80 83       	st	Z, r24
      if (twi_sendStop){
    26a8:	80 91 ab 05 	lds	r24, 0x05AB	; 0x8005ab <twi_sendStop>
    26ac:	81 11       	cpse	r24, r1
    26ae:	69 c0       	rjmp	.+210    	; 0x2782 <__vector_39+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    26b6:	84 ea       	ldi	r24, 0xA4	; 164
    26b8:	5d c0       	rjmp	.+186    	; 0x2774 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    26ba:	83 e0       	ldi	r24, 0x03	; 3
    26bc:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    26c0:	10 92 3b 05 	sts	0x053B, r1	; 0x80053b <twi_rxBufferIndex>
    26c4:	cf cf       	rjmp	.-98     	; 0x2664 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    26c6:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <twi_rxBufferIndex>
    26ca:	80 32       	cpi	r24, 0x20	; 32
    26cc:	08 f0       	brcs	.+2      	; 0x26d0 <__vector_39+0x182>
    26ce:	4d c0       	rjmp	.+154    	; 0x276a <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    26d0:	e0 91 3b 05 	lds	r30, 0x053B	; 0x80053b <twi_rxBufferIndex>
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	8e 0f       	add	r24, r30
    26d8:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <twi_rxBufferIndex>
    26dc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	e4 5c       	subi	r30, 0xC4	; 196
    26e4:	fa 4f       	sbci	r31, 0xFA	; 250
    26e6:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    26e8:	bd cf       	rjmp	.-134    	; 0x2664 <__vector_39+0x116>
    26ea:	f7 dd       	rcall	.-1042   	; 0x22da <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    26ec:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <twi_rxBufferIndex>
    26f0:	80 32       	cpi	r24, 0x20	; 32
    26f2:	30 f4       	brcc	.+12     	; 0x2700 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    26f4:	e0 91 3b 05 	lds	r30, 0x053B	; 0x80053b <twi_rxBufferIndex>
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	e4 5c       	subi	r30, 0xC4	; 196
    26fc:	fa 4f       	sbci	r31, 0xFA	; 250
    26fe:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2700:	60 91 3b 05 	lds	r22, 0x053B	; 0x80053b <twi_rxBufferIndex>
    2704:	70 e0       	ldi	r23, 0x00	; 0
    2706:	e0 91 a0 05 	lds	r30, 0x05A0	; 0x8005a0 <twi_onSlaveReceive>
    270a:	f0 91 a1 05 	lds	r31, 0x05A1	; 0x8005a1 <twi_onSlaveReceive+0x1>
    270e:	8c e3       	ldi	r24, 0x3C	; 60
    2710:	95 e0       	ldi	r25, 0x05	; 5
    2712:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2714:	10 92 3b 05 	sts	0x053B, r1	; 0x80053b <twi_rxBufferIndex>
      break;
    2718:	35 c0       	rjmp	.+106    	; 0x2784 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    271a:	84 e0       	ldi	r24, 0x04	; 4
    271c:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2720:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2724:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2728:	e0 91 a2 05 	lds	r30, 0x05A2	; 0x8005a2 <twi_onSlaveTransmit>
    272c:	f0 91 a3 05 	lds	r31, 0x05A3	; 0x8005a3 <twi_onSlaveTransmit+0x1>
    2730:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2732:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <twi_txBufferLength>
    2736:	81 11       	cpse	r24, r1
    2738:	05 c0       	rjmp	.+10     	; 0x2744 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2740:	10 92 5e 05 	sts	0x055E, r1	; 0x80055e <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2744:	e0 91 5d 05 	lds	r30, 0x055D	; 0x80055d <twi_txBufferIndex>
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	8e 0f       	add	r24, r30
    274c:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <twi_txBufferIndex>
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	e2 5a       	subi	r30, 0xA2	; 162
    2754:	fa 4f       	sbci	r31, 0xFA	; 250
    2756:	80 81       	ld	r24, Z
    2758:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    275c:	90 91 5d 05 	lds	r25, 0x055D	; 0x80055d <twi_txBufferIndex>
    2760:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <twi_txBufferLength>
    2764:	98 17       	cp	r25, r24
    2766:	08 f4       	brcc	.+2      	; 0x276a <__vector_39+0x21c>
    2768:	7d cf       	rjmp	.-262    	; 0x2664 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    276a:	85 e8       	ldi	r24, 0x85	; 133
    276c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    2770:	09 c0       	rjmp	.+18     	; 0x2784 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2772:	85 ec       	ldi	r24, 0xC5	; 197
    2774:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2778:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <twi_state>
      break;
    277c:	03 c0       	rjmp	.+6      	; 0x2784 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    277e:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <twi_error>
      twi_stop();
    2782:	ae de       	rcall	.-676    	; 0x24e0 <twi_stop>
      break;
  }
}
    2784:	ff 91       	pop	r31
    2786:	ef 91       	pop	r30
    2788:	bf 91       	pop	r27
    278a:	af 91       	pop	r26
    278c:	9f 91       	pop	r25
    278e:	8f 91       	pop	r24
    2790:	7f 91       	pop	r23
    2792:	6f 91       	pop	r22
    2794:	5f 91       	pop	r21
    2796:	4f 91       	pop	r20
    2798:	3f 91       	pop	r19
    279a:	2f 91       	pop	r18
    279c:	0f 90       	pop	r0
    279e:	0b be       	out	0x3b, r0	; 59
    27a0:	0f 90       	pop	r0
    27a2:	0f be       	out	0x3f, r0	; 63
    27a4:	0f 90       	pop	r0
    27a6:	1f 90       	pop	r1
    27a8:	18 95       	reti

000027aa <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    27aa:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <_ZN7TwoWire14rxBufferLengthE>
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	20 91 e3 05 	lds	r18, 0x05E3	; 0x8005e3 <_ZN7TwoWire13rxBufferIndexE>
    27b4:	82 1b       	sub	r24, r18
    27b6:	91 09       	sbc	r25, r1
    27b8:	08 95       	ret

000027ba <_ZN7TwoWire4readEv>:
    27ba:	90 91 e3 05 	lds	r25, 0x05E3	; 0x8005e3 <_ZN7TwoWire13rxBufferIndexE>
    27be:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <_ZN7TwoWire14rxBufferLengthE>
    27c2:	98 17       	cp	r25, r24
    27c4:	50 f4       	brcc	.+20     	; 0x27da <_ZN7TwoWire4readEv+0x20>
    27c6:	e9 2f       	mov	r30, r25
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	ec 51       	subi	r30, 0x1C	; 28
    27cc:	fa 4f       	sbci	r31, 0xFA	; 250
    27ce:	20 81       	ld	r18, Z
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	9f 5f       	subi	r25, 0xFF	; 255
    27d4:	90 93 e3 05 	sts	0x05E3, r25	; 0x8005e3 <_ZN7TwoWire13rxBufferIndexE>
    27d8:	02 c0       	rjmp	.+4      	; 0x27de <_ZN7TwoWire4readEv+0x24>
    27da:	2f ef       	ldi	r18, 0xFF	; 255
    27dc:	3f ef       	ldi	r19, 0xFF	; 255
    27de:	c9 01       	movw	r24, r18
    27e0:	08 95       	ret

000027e2 <_ZN7TwoWire4peekEv>:
    27e2:	e0 91 e3 05 	lds	r30, 0x05E3	; 0x8005e3 <_ZN7TwoWire13rxBufferIndexE>
    27e6:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <_ZN7TwoWire14rxBufferLengthE>
    27ea:	e8 17       	cp	r30, r24
    27ec:	30 f4       	brcc	.+12     	; 0x27fa <_ZN7TwoWire4peekEv+0x18>
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	ec 51       	subi	r30, 0x1C	; 28
    27f2:	fa 4f       	sbci	r31, 0xFA	; 250
    27f4:	80 81       	ld	r24, Z
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	08 95       	ret
    27fa:	8f ef       	ldi	r24, 0xFF	; 255
    27fc:	9f ef       	ldi	r25, 0xFF	; 255
    27fe:	08 95       	ret

00002800 <_ZN7TwoWire5flushEv>:
    2800:	08 95       	ret

00002802 <_ZN7TwoWire16onReceiveServiceEPhi>:
    2802:	cf 93       	push	r28
    2804:	df 93       	push	r29
    2806:	ec 01       	movw	r28, r24
    2808:	e0 91 ba 05 	lds	r30, 0x05BA	; 0x8005ba <_ZN7TwoWire14user_onReceiveE>
    280c:	f0 91 bb 05 	lds	r31, 0x05BB	; 0x8005bb <_ZN7TwoWire14user_onReceiveE+0x1>
    2810:	30 97       	sbiw	r30, 0x00	; 0
    2812:	f1 f0       	breq	.+60     	; 0x2850 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2814:	90 91 e3 05 	lds	r25, 0x05E3	; 0x8005e3 <_ZN7TwoWire13rxBufferIndexE>
    2818:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <_ZN7TwoWire14rxBufferLengthE>
    281c:	98 17       	cp	r25, r24
    281e:	c0 f0       	brcs	.+48     	; 0x2850 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	29 2f       	mov	r18, r25
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	26 17       	cp	r18, r22
    2828:	37 07       	cpc	r19, r23
    282a:	54 f4       	brge	.+20     	; 0x2840 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    282c:	de 01       	movw	r26, r28
    282e:	a2 0f       	add	r26, r18
    2830:	b3 1f       	adc	r27, r19
    2832:	4c 91       	ld	r20, X
    2834:	d9 01       	movw	r26, r18
    2836:	ac 51       	subi	r26, 0x1C	; 28
    2838:	ba 4f       	sbci	r27, 0xFA	; 250
    283a:	4c 93       	st	X, r20
    283c:	9f 5f       	subi	r25, 0xFF	; 255
    283e:	f1 cf       	rjmp	.-30     	; 0x2822 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2840:	10 92 e3 05 	sts	0x05E3, r1	; 0x8005e3 <_ZN7TwoWire13rxBufferIndexE>
    2844:	60 93 e2 05 	sts	0x05E2, r22	; 0x8005e2 <_ZN7TwoWire14rxBufferLengthE>
    2848:	cb 01       	movw	r24, r22
    284a:	df 91       	pop	r29
    284c:	cf 91       	pop	r28
    284e:	19 94       	eijmp
    2850:	df 91       	pop	r29
    2852:	cf 91       	pop	r28
    2854:	08 95       	ret

00002856 <_ZN7TwoWire16onRequestServiceEv>:
    2856:	e0 91 bc 05 	lds	r30, 0x05BC	; 0x8005bc <_ZN7TwoWire14user_onRequestE>
    285a:	f0 91 bd 05 	lds	r31, 0x05BD	; 0x8005bd <_ZN7TwoWire14user_onRequestE+0x1>
    285e:	30 97       	sbiw	r30, 0x00	; 0
    2860:	29 f0       	breq	.+10     	; 0x286c <_ZN7TwoWire16onRequestServiceEv+0x16>
    2862:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <_ZN7TwoWire13txBufferIndexE>
    2866:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    286a:	19 94       	eijmp
    286c:	08 95       	ret

0000286e <_ZN7TwoWire5writeEPKhj>:
    286e:	cf 92       	push	r12
    2870:	df 92       	push	r13
    2872:	ef 92       	push	r14
    2874:	ff 92       	push	r15
    2876:	0f 93       	push	r16
    2878:	1f 93       	push	r17
    287a:	cf 93       	push	r28
    287c:	df 93       	push	r29
    287e:	7c 01       	movw	r14, r24
    2880:	cb 01       	movw	r24, r22
    2882:	8a 01       	movw	r16, r20
    2884:	20 91 be 05 	lds	r18, 0x05BE	; 0x8005be <_ZN7TwoWire12transmittingE>
    2888:	22 23       	and	r18, r18
    288a:	89 f0       	breq	.+34     	; 0x28ae <_ZN7TwoWire5writeEPKhj+0x40>
    288c:	eb 01       	movw	r28, r22
    288e:	6b 01       	movw	r12, r22
    2890:	c4 0e       	add	r12, r20
    2892:	d5 1e       	adc	r13, r21
    2894:	cc 15       	cp	r28, r12
    2896:	dd 05       	cpc	r29, r13
    2898:	61 f0       	breq	.+24     	; 0x28b2 <_ZN7TwoWire5writeEPKhj+0x44>
    289a:	69 91       	ld	r22, Y+
    289c:	d7 01       	movw	r26, r14
    289e:	ed 91       	ld	r30, X+
    28a0:	fc 91       	ld	r31, X
    28a2:	01 90       	ld	r0, Z+
    28a4:	f0 81       	ld	r31, Z
    28a6:	e0 2d       	mov	r30, r0
    28a8:	c7 01       	movw	r24, r14
    28aa:	19 95       	eicall
    28ac:	f3 cf       	rjmp	.-26     	; 0x2894 <_ZN7TwoWire5writeEPKhj+0x26>
    28ae:	64 2f       	mov	r22, r20
    28b0:	e2 dc       	rcall	.-1596   	; 0x2276 <twi_transmit>
    28b2:	c8 01       	movw	r24, r16
    28b4:	df 91       	pop	r29
    28b6:	cf 91       	pop	r28
    28b8:	1f 91       	pop	r17
    28ba:	0f 91       	pop	r16
    28bc:	ff 90       	pop	r15
    28be:	ef 90       	pop	r14
    28c0:	df 90       	pop	r13
    28c2:	cf 90       	pop	r12
    28c4:	08 95       	ret

000028c6 <_ZN7TwoWire5writeEh>:
    28c6:	cf 93       	push	r28
    28c8:	df 93       	push	r29
    28ca:	1f 92       	push	r1
    28cc:	cd b7       	in	r28, 0x3d	; 61
    28ce:	de b7       	in	r29, 0x3e	; 62
    28d0:	69 83       	std	Y+1, r22	; 0x01
    28d2:	20 91 be 05 	lds	r18, 0x05BE	; 0x8005be <_ZN7TwoWire12transmittingE>
    28d6:	22 23       	and	r18, r18
    28d8:	d1 f0       	breq	.+52     	; 0x290e <_ZN7TwoWire5writeEh+0x48>
    28da:	20 91 bf 05 	lds	r18, 0x05BF	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    28de:	20 32       	cpi	r18, 0x20	; 32
    28e0:	40 f0       	brcs	.+16     	; 0x28f2 <_ZN7TwoWire5writeEh+0x2c>
    28e2:	21 e0       	ldi	r18, 0x01	; 1
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	fc 01       	movw	r30, r24
    28e8:	33 83       	std	Z+3, r19	; 0x03
    28ea:	22 83       	std	Z+2, r18	; 0x02
    28ec:	80 e0       	ldi	r24, 0x00	; 0
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	14 c0       	rjmp	.+40     	; 0x291a <_ZN7TwoWire5writeEh+0x54>
    28f2:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <_ZN7TwoWire13txBufferIndexE>
    28f6:	e8 2f       	mov	r30, r24
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	ef 53       	subi	r30, 0x3F	; 63
    28fc:	fa 4f       	sbci	r31, 0xFA	; 250
    28fe:	99 81       	ldd	r25, Y+1	; 0x01
    2900:	90 83       	st	Z, r25
    2902:	8f 5f       	subi	r24, 0xFF	; 255
    2904:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <_ZN7TwoWire13txBufferIndexE>
    2908:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    290c:	04 c0       	rjmp	.+8      	; 0x2916 <_ZN7TwoWire5writeEh+0x50>
    290e:	61 e0       	ldi	r22, 0x01	; 1
    2910:	ce 01       	movw	r24, r28
    2912:	01 96       	adiw	r24, 0x01	; 1
    2914:	b0 dc       	rcall	.-1696   	; 0x2276 <twi_transmit>
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	0f 90       	pop	r0
    291c:	df 91       	pop	r29
    291e:	cf 91       	pop	r28
    2920:	08 95       	ret

00002922 <_ZN7TwoWireC1Ev>:
    2922:	fc 01       	movw	r30, r24
    2924:	13 82       	std	Z+3, r1	; 0x03
    2926:	12 82       	std	Z+2, r1	; 0x02
    2928:	88 ee       	ldi	r24, 0xE8	; 232
    292a:	93 e0       	ldi	r25, 0x03	; 3
    292c:	a0 e0       	ldi	r26, 0x00	; 0
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	84 83       	std	Z+4, r24	; 0x04
    2932:	95 83       	std	Z+5, r25	; 0x05
    2934:	a6 83       	std	Z+6, r26	; 0x06
    2936:	b7 83       	std	Z+7, r27	; 0x07
    2938:	85 eb       	ldi	r24, 0xB5	; 181
    293a:	94 e0       	ldi	r25, 0x04	; 4
    293c:	91 83       	std	Z+1, r25	; 0x01
    293e:	80 83       	st	Z, r24
    2940:	08 95       	ret

00002942 <_ZN7TwoWire5beginEv>:
    2942:	10 92 e3 05 	sts	0x05E3, r1	; 0x8005e3 <_ZN7TwoWire13rxBufferIndexE>
    2946:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <_ZN7TwoWire14rxBufferLengthE>
    294a:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <_ZN7TwoWire13txBufferIndexE>
    294e:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    2952:	52 dc       	rcall	.-1884   	; 0x21f8 <twi_init>
    2954:	8b e2       	ldi	r24, 0x2B	; 43
    2956:	94 e1       	ldi	r25, 0x14	; 20
    2958:	bb dc       	rcall	.-1674   	; 0x22d0 <twi_attachSlaveTxEvent>
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	94 e1       	ldi	r25, 0x14	; 20
    295e:	b3 cc       	rjmp	.-1690   	; 0x22c6 <twi_attachSlaveRxEvent>

00002960 <_ZN7TwoWire8setClockEm>:
    2960:	cb 01       	movw	r24, r22
    2962:	ba 01       	movw	r22, r20
    2964:	74 cc       	rjmp	.-1816   	; 0x224e <twi_setFrequency>

00002966 <_ZN7TwoWire17beginTransmissionEh>:
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <_ZN7TwoWire12transmittingE>
    296c:	60 93 e1 05 	sts	0x05E1, r22	; 0x8005e1 <_ZN7TwoWire9txAddressE>
    2970:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <_ZN7TwoWire13txBufferIndexE>
    2974:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    2978:	08 95       	ret

0000297a <_ZN7TwoWire17beginTransmissionEi>:
    297a:	f5 cf       	rjmp	.-22     	; 0x2966 <_ZN7TwoWire17beginTransmissionEh>

0000297c <_ZN7TwoWire15endTransmissionEh>:
    297c:	0f 93       	push	r16
    297e:	06 2f       	mov	r16, r22
    2980:	21 e0       	ldi	r18, 0x01	; 1
    2982:	40 91 bf 05 	lds	r20, 0x05BF	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    2986:	61 ec       	ldi	r22, 0xC1	; 193
    2988:	75 e0       	ldi	r23, 0x05	; 5
    298a:	80 91 e1 05 	lds	r24, 0x05E1	; 0x8005e1 <_ZN7TwoWire9txAddressE>
    298e:	bf dc       	rcall	.-1666   	; 0x230e <twi_writeTo>
    2990:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <_ZN7TwoWire13txBufferIndexE>
    2994:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <_ZN7TwoWire14txBufferLengthE>
    2998:	10 92 be 05 	sts	0x05BE, r1	; 0x8005be <_ZN7TwoWire12transmittingE>
    299c:	0f 91       	pop	r16
    299e:	08 95       	ret

000029a0 <_ZN7TwoWire15endTransmissionEv>:
    29a0:	61 e0       	ldi	r22, 0x01	; 1
    29a2:	ec cf       	rjmp	.-40     	; 0x297c <_ZN7TwoWire15endTransmissionEh>

000029a4 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    29a4:	8e ea       	ldi	r24, 0xAE	; 174
    29a6:	95 e0       	ldi	r25, 0x05	; 5
    29a8:	bc cf       	rjmp	.-136    	; 0x2922 <_ZN7TwoWireC1Ev>

000029aa <__subsf3>:
    29aa:	50 58       	subi	r21, 0x80	; 128

000029ac <__addsf3>:
    29ac:	bb 27       	eor	r27, r27
    29ae:	aa 27       	eor	r26, r26
    29b0:	0e d0       	rcall	.+28     	; 0x29ce <__addsf3x>
    29b2:	b4 c0       	rjmp	.+360    	; 0x2b1c <__fp_round>
    29b4:	a5 d0       	rcall	.+330    	; 0x2b00 <__fp_pscA>
    29b6:	30 f0       	brcs	.+12     	; 0x29c4 <__addsf3+0x18>
    29b8:	aa d0       	rcall	.+340    	; 0x2b0e <__fp_pscB>
    29ba:	20 f0       	brcs	.+8      	; 0x29c4 <__addsf3+0x18>
    29bc:	31 f4       	brne	.+12     	; 0x29ca <__addsf3+0x1e>
    29be:	9f 3f       	cpi	r25, 0xFF	; 255
    29c0:	11 f4       	brne	.+4      	; 0x29c6 <__addsf3+0x1a>
    29c2:	1e f4       	brtc	.+6      	; 0x29ca <__addsf3+0x1e>
    29c4:	9a c0       	rjmp	.+308    	; 0x2afa <__fp_nan>
    29c6:	0e f4       	brtc	.+2      	; 0x29ca <__addsf3+0x1e>
    29c8:	e0 95       	com	r30
    29ca:	e7 fb       	bst	r30, 7
    29cc:	90 c0       	rjmp	.+288    	; 0x2aee <__fp_inf>

000029ce <__addsf3x>:
    29ce:	e9 2f       	mov	r30, r25
    29d0:	b6 d0       	rcall	.+364    	; 0x2b3e <__fp_split3>
    29d2:	80 f3       	brcs	.-32     	; 0x29b4 <__addsf3+0x8>
    29d4:	ba 17       	cp	r27, r26
    29d6:	62 07       	cpc	r22, r18
    29d8:	73 07       	cpc	r23, r19
    29da:	84 07       	cpc	r24, r20
    29dc:	95 07       	cpc	r25, r21
    29de:	18 f0       	brcs	.+6      	; 0x29e6 <__addsf3x+0x18>
    29e0:	71 f4       	brne	.+28     	; 0x29fe <__addsf3x+0x30>
    29e2:	9e f5       	brtc	.+102    	; 0x2a4a <__addsf3x+0x7c>
    29e4:	ce c0       	rjmp	.+412    	; 0x2b82 <__fp_zero>
    29e6:	0e f4       	brtc	.+2      	; 0x29ea <__addsf3x+0x1c>
    29e8:	e0 95       	com	r30
    29ea:	0b 2e       	mov	r0, r27
    29ec:	ba 2f       	mov	r27, r26
    29ee:	a0 2d       	mov	r26, r0
    29f0:	0b 01       	movw	r0, r22
    29f2:	b9 01       	movw	r22, r18
    29f4:	90 01       	movw	r18, r0
    29f6:	0c 01       	movw	r0, r24
    29f8:	ca 01       	movw	r24, r20
    29fa:	a0 01       	movw	r20, r0
    29fc:	11 24       	eor	r1, r1
    29fe:	ff 27       	eor	r31, r31
    2a00:	59 1b       	sub	r21, r25
    2a02:	99 f0       	breq	.+38     	; 0x2a2a <__addsf3x+0x5c>
    2a04:	59 3f       	cpi	r21, 0xF9	; 249
    2a06:	50 f4       	brcc	.+20     	; 0x2a1c <__addsf3x+0x4e>
    2a08:	50 3e       	cpi	r21, 0xE0	; 224
    2a0a:	68 f1       	brcs	.+90     	; 0x2a66 <__addsf3x+0x98>
    2a0c:	1a 16       	cp	r1, r26
    2a0e:	f0 40       	sbci	r31, 0x00	; 0
    2a10:	a2 2f       	mov	r26, r18
    2a12:	23 2f       	mov	r18, r19
    2a14:	34 2f       	mov	r19, r20
    2a16:	44 27       	eor	r20, r20
    2a18:	58 5f       	subi	r21, 0xF8	; 248
    2a1a:	f3 cf       	rjmp	.-26     	; 0x2a02 <__addsf3x+0x34>
    2a1c:	46 95       	lsr	r20
    2a1e:	37 95       	ror	r19
    2a20:	27 95       	ror	r18
    2a22:	a7 95       	ror	r26
    2a24:	f0 40       	sbci	r31, 0x00	; 0
    2a26:	53 95       	inc	r21
    2a28:	c9 f7       	brne	.-14     	; 0x2a1c <__addsf3x+0x4e>
    2a2a:	7e f4       	brtc	.+30     	; 0x2a4a <__addsf3x+0x7c>
    2a2c:	1f 16       	cp	r1, r31
    2a2e:	ba 0b       	sbc	r27, r26
    2a30:	62 0b       	sbc	r22, r18
    2a32:	73 0b       	sbc	r23, r19
    2a34:	84 0b       	sbc	r24, r20
    2a36:	ba f0       	brmi	.+46     	; 0x2a66 <__addsf3x+0x98>
    2a38:	91 50       	subi	r25, 0x01	; 1
    2a3a:	a1 f0       	breq	.+40     	; 0x2a64 <__addsf3x+0x96>
    2a3c:	ff 0f       	add	r31, r31
    2a3e:	bb 1f       	adc	r27, r27
    2a40:	66 1f       	adc	r22, r22
    2a42:	77 1f       	adc	r23, r23
    2a44:	88 1f       	adc	r24, r24
    2a46:	c2 f7       	brpl	.-16     	; 0x2a38 <__addsf3x+0x6a>
    2a48:	0e c0       	rjmp	.+28     	; 0x2a66 <__addsf3x+0x98>
    2a4a:	ba 0f       	add	r27, r26
    2a4c:	62 1f       	adc	r22, r18
    2a4e:	73 1f       	adc	r23, r19
    2a50:	84 1f       	adc	r24, r20
    2a52:	48 f4       	brcc	.+18     	; 0x2a66 <__addsf3x+0x98>
    2a54:	87 95       	ror	r24
    2a56:	77 95       	ror	r23
    2a58:	67 95       	ror	r22
    2a5a:	b7 95       	ror	r27
    2a5c:	f7 95       	ror	r31
    2a5e:	9e 3f       	cpi	r25, 0xFE	; 254
    2a60:	08 f0       	brcs	.+2      	; 0x2a64 <__addsf3x+0x96>
    2a62:	b3 cf       	rjmp	.-154    	; 0x29ca <__addsf3+0x1e>
    2a64:	93 95       	inc	r25
    2a66:	88 0f       	add	r24, r24
    2a68:	08 f0       	brcs	.+2      	; 0x2a6c <__addsf3x+0x9e>
    2a6a:	99 27       	eor	r25, r25
    2a6c:	ee 0f       	add	r30, r30
    2a6e:	97 95       	ror	r25
    2a70:	87 95       	ror	r24
    2a72:	08 95       	ret

00002a74 <__floatunsisf>:
    2a74:	e8 94       	clt
    2a76:	09 c0       	rjmp	.+18     	; 0x2a8a <__floatsisf+0x12>

00002a78 <__floatsisf>:
    2a78:	97 fb       	bst	r25, 7
    2a7a:	3e f4       	brtc	.+14     	; 0x2a8a <__floatsisf+0x12>
    2a7c:	90 95       	com	r25
    2a7e:	80 95       	com	r24
    2a80:	70 95       	com	r23
    2a82:	61 95       	neg	r22
    2a84:	7f 4f       	sbci	r23, 0xFF	; 255
    2a86:	8f 4f       	sbci	r24, 0xFF	; 255
    2a88:	9f 4f       	sbci	r25, 0xFF	; 255
    2a8a:	99 23       	and	r25, r25
    2a8c:	a9 f0       	breq	.+42     	; 0x2ab8 <__floatsisf+0x40>
    2a8e:	f9 2f       	mov	r31, r25
    2a90:	96 e9       	ldi	r25, 0x96	; 150
    2a92:	bb 27       	eor	r27, r27
    2a94:	93 95       	inc	r25
    2a96:	f6 95       	lsr	r31
    2a98:	87 95       	ror	r24
    2a9a:	77 95       	ror	r23
    2a9c:	67 95       	ror	r22
    2a9e:	b7 95       	ror	r27
    2aa0:	f1 11       	cpse	r31, r1
    2aa2:	f8 cf       	rjmp	.-16     	; 0x2a94 <__floatsisf+0x1c>
    2aa4:	fa f4       	brpl	.+62     	; 0x2ae4 <__floatsisf+0x6c>
    2aa6:	bb 0f       	add	r27, r27
    2aa8:	11 f4       	brne	.+4      	; 0x2aae <__floatsisf+0x36>
    2aaa:	60 ff       	sbrs	r22, 0
    2aac:	1b c0       	rjmp	.+54     	; 0x2ae4 <__floatsisf+0x6c>
    2aae:	6f 5f       	subi	r22, 0xFF	; 255
    2ab0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab2:	8f 4f       	sbci	r24, 0xFF	; 255
    2ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ab6:	16 c0       	rjmp	.+44     	; 0x2ae4 <__floatsisf+0x6c>
    2ab8:	88 23       	and	r24, r24
    2aba:	11 f0       	breq	.+4      	; 0x2ac0 <__floatsisf+0x48>
    2abc:	96 e9       	ldi	r25, 0x96	; 150
    2abe:	11 c0       	rjmp	.+34     	; 0x2ae2 <__floatsisf+0x6a>
    2ac0:	77 23       	and	r23, r23
    2ac2:	21 f0       	breq	.+8      	; 0x2acc <__floatsisf+0x54>
    2ac4:	9e e8       	ldi	r25, 0x8E	; 142
    2ac6:	87 2f       	mov	r24, r23
    2ac8:	76 2f       	mov	r23, r22
    2aca:	05 c0       	rjmp	.+10     	; 0x2ad6 <__floatsisf+0x5e>
    2acc:	66 23       	and	r22, r22
    2ace:	71 f0       	breq	.+28     	; 0x2aec <__floatsisf+0x74>
    2ad0:	96 e8       	ldi	r25, 0x86	; 134
    2ad2:	86 2f       	mov	r24, r22
    2ad4:	70 e0       	ldi	r23, 0x00	; 0
    2ad6:	60 e0       	ldi	r22, 0x00	; 0
    2ad8:	2a f0       	brmi	.+10     	; 0x2ae4 <__floatsisf+0x6c>
    2ada:	9a 95       	dec	r25
    2adc:	66 0f       	add	r22, r22
    2ade:	77 1f       	adc	r23, r23
    2ae0:	88 1f       	adc	r24, r24
    2ae2:	da f7       	brpl	.-10     	; 0x2ada <__floatsisf+0x62>
    2ae4:	88 0f       	add	r24, r24
    2ae6:	96 95       	lsr	r25
    2ae8:	87 95       	ror	r24
    2aea:	97 f9       	bld	r25, 7
    2aec:	08 95       	ret

00002aee <__fp_inf>:
    2aee:	97 f9       	bld	r25, 7
    2af0:	9f 67       	ori	r25, 0x7F	; 127
    2af2:	80 e8       	ldi	r24, 0x80	; 128
    2af4:	70 e0       	ldi	r23, 0x00	; 0
    2af6:	60 e0       	ldi	r22, 0x00	; 0
    2af8:	08 95       	ret

00002afa <__fp_nan>:
    2afa:	9f ef       	ldi	r25, 0xFF	; 255
    2afc:	80 ec       	ldi	r24, 0xC0	; 192
    2afe:	08 95       	ret

00002b00 <__fp_pscA>:
    2b00:	00 24       	eor	r0, r0
    2b02:	0a 94       	dec	r0
    2b04:	16 16       	cp	r1, r22
    2b06:	17 06       	cpc	r1, r23
    2b08:	18 06       	cpc	r1, r24
    2b0a:	09 06       	cpc	r0, r25
    2b0c:	08 95       	ret

00002b0e <__fp_pscB>:
    2b0e:	00 24       	eor	r0, r0
    2b10:	0a 94       	dec	r0
    2b12:	12 16       	cp	r1, r18
    2b14:	13 06       	cpc	r1, r19
    2b16:	14 06       	cpc	r1, r20
    2b18:	05 06       	cpc	r0, r21
    2b1a:	08 95       	ret

00002b1c <__fp_round>:
    2b1c:	09 2e       	mov	r0, r25
    2b1e:	03 94       	inc	r0
    2b20:	00 0c       	add	r0, r0
    2b22:	11 f4       	brne	.+4      	; 0x2b28 <__fp_round+0xc>
    2b24:	88 23       	and	r24, r24
    2b26:	52 f0       	brmi	.+20     	; 0x2b3c <__fp_round+0x20>
    2b28:	bb 0f       	add	r27, r27
    2b2a:	40 f4       	brcc	.+16     	; 0x2b3c <__fp_round+0x20>
    2b2c:	bf 2b       	or	r27, r31
    2b2e:	11 f4       	brne	.+4      	; 0x2b34 <__fp_round+0x18>
    2b30:	60 ff       	sbrs	r22, 0
    2b32:	04 c0       	rjmp	.+8      	; 0x2b3c <__fp_round+0x20>
    2b34:	6f 5f       	subi	r22, 0xFF	; 255
    2b36:	7f 4f       	sbci	r23, 0xFF	; 255
    2b38:	8f 4f       	sbci	r24, 0xFF	; 255
    2b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b3c:	08 95       	ret

00002b3e <__fp_split3>:
    2b3e:	57 fd       	sbrc	r21, 7
    2b40:	90 58       	subi	r25, 0x80	; 128
    2b42:	44 0f       	add	r20, r20
    2b44:	55 1f       	adc	r21, r21
    2b46:	59 f0       	breq	.+22     	; 0x2b5e <__fp_splitA+0x10>
    2b48:	5f 3f       	cpi	r21, 0xFF	; 255
    2b4a:	71 f0       	breq	.+28     	; 0x2b68 <__fp_splitA+0x1a>
    2b4c:	47 95       	ror	r20

00002b4e <__fp_splitA>:
    2b4e:	88 0f       	add	r24, r24
    2b50:	97 fb       	bst	r25, 7
    2b52:	99 1f       	adc	r25, r25
    2b54:	61 f0       	breq	.+24     	; 0x2b6e <__fp_splitA+0x20>
    2b56:	9f 3f       	cpi	r25, 0xFF	; 255
    2b58:	79 f0       	breq	.+30     	; 0x2b78 <__fp_splitA+0x2a>
    2b5a:	87 95       	ror	r24
    2b5c:	08 95       	ret
    2b5e:	12 16       	cp	r1, r18
    2b60:	13 06       	cpc	r1, r19
    2b62:	14 06       	cpc	r1, r20
    2b64:	55 1f       	adc	r21, r21
    2b66:	f2 cf       	rjmp	.-28     	; 0x2b4c <__fp_split3+0xe>
    2b68:	46 95       	lsr	r20
    2b6a:	f1 df       	rcall	.-30     	; 0x2b4e <__fp_splitA>
    2b6c:	08 c0       	rjmp	.+16     	; 0x2b7e <__fp_splitA+0x30>
    2b6e:	16 16       	cp	r1, r22
    2b70:	17 06       	cpc	r1, r23
    2b72:	18 06       	cpc	r1, r24
    2b74:	99 1f       	adc	r25, r25
    2b76:	f1 cf       	rjmp	.-30     	; 0x2b5a <__fp_splitA+0xc>
    2b78:	86 95       	lsr	r24
    2b7a:	71 05       	cpc	r23, r1
    2b7c:	61 05       	cpc	r22, r1
    2b7e:	08 94       	sec
    2b80:	08 95       	ret

00002b82 <__fp_zero>:
    2b82:	e8 94       	clt

00002b84 <__fp_szero>:
    2b84:	bb 27       	eor	r27, r27
    2b86:	66 27       	eor	r22, r22
    2b88:	77 27       	eor	r23, r23
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	97 f9       	bld	r25, 7
    2b8e:	08 95       	ret

00002b90 <__mulsf3>:
    2b90:	0b d0       	rcall	.+22     	; 0x2ba8 <__mulsf3x>
    2b92:	c4 cf       	rjmp	.-120    	; 0x2b1c <__fp_round>
    2b94:	b5 df       	rcall	.-150    	; 0x2b00 <__fp_pscA>
    2b96:	28 f0       	brcs	.+10     	; 0x2ba2 <__mulsf3+0x12>
    2b98:	ba df       	rcall	.-140    	; 0x2b0e <__fp_pscB>
    2b9a:	18 f0       	brcs	.+6      	; 0x2ba2 <__mulsf3+0x12>
    2b9c:	95 23       	and	r25, r21
    2b9e:	09 f0       	breq	.+2      	; 0x2ba2 <__mulsf3+0x12>
    2ba0:	a6 cf       	rjmp	.-180    	; 0x2aee <__fp_inf>
    2ba2:	ab cf       	rjmp	.-170    	; 0x2afa <__fp_nan>
    2ba4:	11 24       	eor	r1, r1
    2ba6:	ee cf       	rjmp	.-36     	; 0x2b84 <__fp_szero>

00002ba8 <__mulsf3x>:
    2ba8:	ca df       	rcall	.-108    	; 0x2b3e <__fp_split3>
    2baa:	a0 f3       	brcs	.-24     	; 0x2b94 <__mulsf3+0x4>

00002bac <__mulsf3_pse>:
    2bac:	95 9f       	mul	r25, r21
    2bae:	d1 f3       	breq	.-12     	; 0x2ba4 <__mulsf3+0x14>
    2bb0:	95 0f       	add	r25, r21
    2bb2:	50 e0       	ldi	r21, 0x00	; 0
    2bb4:	55 1f       	adc	r21, r21
    2bb6:	62 9f       	mul	r22, r18
    2bb8:	f0 01       	movw	r30, r0
    2bba:	72 9f       	mul	r23, r18
    2bbc:	bb 27       	eor	r27, r27
    2bbe:	f0 0d       	add	r31, r0
    2bc0:	b1 1d       	adc	r27, r1
    2bc2:	63 9f       	mul	r22, r19
    2bc4:	aa 27       	eor	r26, r26
    2bc6:	f0 0d       	add	r31, r0
    2bc8:	b1 1d       	adc	r27, r1
    2bca:	aa 1f       	adc	r26, r26
    2bcc:	64 9f       	mul	r22, r20
    2bce:	66 27       	eor	r22, r22
    2bd0:	b0 0d       	add	r27, r0
    2bd2:	a1 1d       	adc	r26, r1
    2bd4:	66 1f       	adc	r22, r22
    2bd6:	82 9f       	mul	r24, r18
    2bd8:	22 27       	eor	r18, r18
    2bda:	b0 0d       	add	r27, r0
    2bdc:	a1 1d       	adc	r26, r1
    2bde:	62 1f       	adc	r22, r18
    2be0:	73 9f       	mul	r23, r19
    2be2:	b0 0d       	add	r27, r0
    2be4:	a1 1d       	adc	r26, r1
    2be6:	62 1f       	adc	r22, r18
    2be8:	83 9f       	mul	r24, r19
    2bea:	a0 0d       	add	r26, r0
    2bec:	61 1d       	adc	r22, r1
    2bee:	22 1f       	adc	r18, r18
    2bf0:	74 9f       	mul	r23, r20
    2bf2:	33 27       	eor	r19, r19
    2bf4:	a0 0d       	add	r26, r0
    2bf6:	61 1d       	adc	r22, r1
    2bf8:	23 1f       	adc	r18, r19
    2bfa:	84 9f       	mul	r24, r20
    2bfc:	60 0d       	add	r22, r0
    2bfe:	21 1d       	adc	r18, r1
    2c00:	82 2f       	mov	r24, r18
    2c02:	76 2f       	mov	r23, r22
    2c04:	6a 2f       	mov	r22, r26
    2c06:	11 24       	eor	r1, r1
    2c08:	9f 57       	subi	r25, 0x7F	; 127
    2c0a:	50 40       	sbci	r21, 0x00	; 0
    2c0c:	8a f0       	brmi	.+34     	; 0x2c30 <__mulsf3_pse+0x84>
    2c0e:	e1 f0       	breq	.+56     	; 0x2c48 <__mulsf3_pse+0x9c>
    2c10:	88 23       	and	r24, r24
    2c12:	4a f0       	brmi	.+18     	; 0x2c26 <__mulsf3_pse+0x7a>
    2c14:	ee 0f       	add	r30, r30
    2c16:	ff 1f       	adc	r31, r31
    2c18:	bb 1f       	adc	r27, r27
    2c1a:	66 1f       	adc	r22, r22
    2c1c:	77 1f       	adc	r23, r23
    2c1e:	88 1f       	adc	r24, r24
    2c20:	91 50       	subi	r25, 0x01	; 1
    2c22:	50 40       	sbci	r21, 0x00	; 0
    2c24:	a9 f7       	brne	.-22     	; 0x2c10 <__mulsf3_pse+0x64>
    2c26:	9e 3f       	cpi	r25, 0xFE	; 254
    2c28:	51 05       	cpc	r21, r1
    2c2a:	70 f0       	brcs	.+28     	; 0x2c48 <__mulsf3_pse+0x9c>
    2c2c:	60 cf       	rjmp	.-320    	; 0x2aee <__fp_inf>
    2c2e:	aa cf       	rjmp	.-172    	; 0x2b84 <__fp_szero>
    2c30:	5f 3f       	cpi	r21, 0xFF	; 255
    2c32:	ec f3       	brlt	.-6      	; 0x2c2e <__mulsf3_pse+0x82>
    2c34:	98 3e       	cpi	r25, 0xE8	; 232
    2c36:	dc f3       	brlt	.-10     	; 0x2c2e <__mulsf3_pse+0x82>
    2c38:	86 95       	lsr	r24
    2c3a:	77 95       	ror	r23
    2c3c:	67 95       	ror	r22
    2c3e:	b7 95       	ror	r27
    2c40:	f7 95       	ror	r31
    2c42:	e7 95       	ror	r30
    2c44:	9f 5f       	subi	r25, 0xFF	; 255
    2c46:	c1 f7       	brne	.-16     	; 0x2c38 <__mulsf3_pse+0x8c>
    2c48:	fe 2b       	or	r31, r30
    2c4a:	88 0f       	add	r24, r24
    2c4c:	91 1d       	adc	r25, r1
    2c4e:	96 95       	lsr	r25
    2c50:	87 95       	ror	r24
    2c52:	97 f9       	bld	r25, 7
    2c54:	08 95       	ret

00002c56 <__cxa_pure_virtual>:
    2c56:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <abort>

00002c5a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2c5a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2c5c:	91 8d       	ldd	r25, Z+25	; 0x19
    2c5e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2c60:	89 2f       	mov	r24, r25
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	80 5c       	subi	r24, 0xC0	; 192
    2c66:	9f 4f       	sbci	r25, 0xFF	; 255
    2c68:	82 1b       	sub	r24, r18
    2c6a:	91 09       	sbc	r25, r1
}
    2c6c:	8f 73       	andi	r24, 0x3F	; 63
    2c6e:	99 27       	eor	r25, r25
    2c70:	08 95       	ret

00002c72 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2c72:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2c74:	91 8d       	ldd	r25, Z+25	; 0x19
    2c76:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c78:	98 17       	cp	r25, r24
    2c7a:	31 f0       	breq	.+12     	; 0x2c88 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2c7c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c7e:	e8 0f       	add	r30, r24
    2c80:	f1 1d       	adc	r31, r1
    2c82:	85 8d       	ldd	r24, Z+29	; 0x1d
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2c88:	8f ef       	ldi	r24, 0xFF	; 255
    2c8a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2c8c:	08 95       	ret

00002c8e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    2c8e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2c90:	91 8d       	ldd	r25, Z+25	; 0x19
    2c92:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c94:	98 17       	cp	r25, r24
    2c96:	61 f0       	breq	.+24     	; 0x2cb0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2c98:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c9a:	df 01       	movw	r26, r30
    2c9c:	a8 0f       	add	r26, r24
    2c9e:	b1 1d       	adc	r27, r1
    2ca0:	5d 96       	adiw	r26, 0x1d	; 29
    2ca2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2ca4:	92 8d       	ldd	r25, Z+26	; 0x1a
    2ca6:	9f 5f       	subi	r25, 0xFF	; 255
    2ca8:	9f 73       	andi	r25, 0x3F	; 63
    2caa:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2cb0:	8f ef       	ldi	r24, 0xFF	; 255
    2cb2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2cb4:	08 95       	ret

00002cb6 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    2cb6:	fc 01       	movw	r30, r24
    2cb8:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    2cba:	44 8d       	ldd	r20, Z+28	; 0x1c
    2cbc:	25 2f       	mov	r18, r21
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	84 2f       	mov	r24, r20
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    2cc4:	82 1b       	sub	r24, r18
    2cc6:	93 0b       	sbc	r25, r19
    2cc8:	54 17       	cp	r21, r20
    2cca:	10 f0       	brcs	.+4      	; 0x2cd0 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    2ccc:	cf 96       	adiw	r24, 0x3f	; 63
    2cce:	08 95       	ret
  return tail - head - 1;
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
}
    2cd2:	08 95       	ret

00002cd4 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2cd4:	87 ef       	ldi	r24, 0xF7	; 247
    2cd6:	97 e1       	ldi	r25, 0x17	; 23
    2cd8:	89 2b       	or	r24, r25
    2cda:	39 f0       	breq	.+14     	; 0x2cea <_Z14serialEventRunv+0x16>
    2cdc:	80 e0       	ldi	r24, 0x00	; 0
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	89 2b       	or	r24, r25
    2ce2:	19 f0       	breq	.+6      	; 0x2cea <_Z14serialEventRunv+0x16>
    2ce4:	84 d1       	rcall	.+776    	; 0x2fee <_Z17Serial0_availablev>
    2ce6:	81 11       	cpse	r24, r1
    2ce8:	25 c0       	rjmp	.+74     	; 0x2d34 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    2cea:	80 e0       	ldi	r24, 0x00	; 0
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	89 2b       	or	r24, r25
    2cf0:	41 f0       	breq	.+16     	; 0x2d02 <_Z14serialEventRunv+0x2e>
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	89 2b       	or	r24, r25
    2cf8:	21 f0       	breq	.+8      	; 0x2d02 <_Z14serialEventRunv+0x2e>
    2cfa:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2cfe:	81 11       	cpse	r24, r1
    2d00:	1c c0       	rjmp	.+56     	; 0x2d3a <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	89 2b       	or	r24, r25
    2d08:	41 f0       	breq	.+16     	; 0x2d1a <_Z14serialEventRunv+0x46>
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	89 2b       	or	r24, r25
    2d10:	21 f0       	breq	.+8      	; 0x2d1a <_Z14serialEventRunv+0x46>
    2d12:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2d16:	81 11       	cpse	r24, r1
    2d18:	13 c0       	rjmp	.+38     	; 0x2d40 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	89 2b       	or	r24, r25
    2d20:	a1 f0       	breq	.+40     	; 0x2d4a <_Z14serialEventRunv+0x76>
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	89 2b       	or	r24, r25
    2d28:	81 f0       	breq	.+32     	; 0x2d4a <_Z14serialEventRunv+0x76>
    2d2a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2d2e:	81 11       	cpse	r24, r1
    2d30:	0a c0       	rjmp	.+20     	; 0x2d46 <_Z14serialEventRunv+0x72>
    2d32:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2d34:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2d38:	d8 cf       	rjmp	.-80     	; 0x2cea <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    2d3a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2d3e:	e1 cf       	rjmp	.-62     	; 0x2d02 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    2d40:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2d44:	ea cf       	rjmp	.-44     	; 0x2d1a <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    2d46:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2d4a:	08 95       	ret

00002d4c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2d4c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2d4e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2d50:	df 01       	movw	r26, r30
    2d52:	a8 0f       	add	r26, r24
    2d54:	b1 1d       	adc	r27, r1
    2d56:	a3 5a       	subi	r26, 0xA3	; 163
    2d58:	bf 4f       	sbci	r27, 0xFF	; 255
    2d5a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2d5c:	84 8d       	ldd	r24, Z+28	; 0x1c
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	01 96       	adiw	r24, 0x01	; 1
    2d62:	8f 73       	andi	r24, 0x3F	; 63
    2d64:	99 27       	eor	r25, r25
    2d66:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    2d68:	a6 89       	ldd	r26, Z+22	; 0x16
    2d6a:	b7 89       	ldd	r27, Z+23	; 0x17
    2d6c:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2d6e:	a0 89       	ldd	r26, Z+16	; 0x10
    2d70:	b1 89       	ldd	r27, Z+17	; 0x11
    2d72:	8c 91       	ld	r24, X
    2d74:	83 70       	andi	r24, 0x03	; 3
    2d76:	80 64       	ori	r24, 0x40	; 64
    2d78:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    2d7a:	93 8d       	ldd	r25, Z+27	; 0x1b
    2d7c:	84 8d       	ldd	r24, Z+28	; 0x1c
    2d7e:	98 13       	cpse	r25, r24
    2d80:	06 c0       	rjmp	.+12     	; 0x2d8e <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2d82:	02 88       	ldd	r0, Z+18	; 0x12
    2d84:	f3 89       	ldd	r31, Z+19	; 0x13
    2d86:	e0 2d       	mov	r30, r0
    2d88:	80 81       	ld	r24, Z
    2d8a:	8f 7d       	andi	r24, 0xDF	; 223
    2d8c:	80 83       	st	Z, r24
    2d8e:	08 95       	ret

00002d90 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2d90:	ef 92       	push	r14
    2d92:	ff 92       	push	r15
    2d94:	0f 93       	push	r16
    2d96:	1f 93       	push	r17
    2d98:	cf 93       	push	r28
    2d9a:	df 93       	push	r29
    2d9c:	ec 01       	movw	r28, r24
  _written = true;
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2da2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2da4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2da6:	98 13       	cpse	r25, r24
    2da8:	05 c0       	rjmp	.+10     	; 0x2db4 <_ZN14HardwareSerial5writeEh+0x24>
    2daa:	e8 89       	ldd	r30, Y+16	; 0x10
    2dac:	f9 89       	ldd	r31, Y+17	; 0x11
    2dae:	80 81       	ld	r24, Z
    2db0:	85 fd       	sbrc	r24, 5
    2db2:	25 c0       	rjmp	.+74     	; 0x2dfe <_ZN14HardwareSerial5writeEh+0x6e>
    2db4:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2db6:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2db8:	10 e0       	ldi	r17, 0x00	; 0
    2dba:	0f 5f       	subi	r16, 0xFF	; 255
    2dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dbe:	0f 73       	andi	r16, 0x3F	; 63
    2dc0:	11 27       	eor	r17, r17
    2dc2:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2dc4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2dc6:	e8 12       	cpse	r14, r24
    2dc8:	0b c0       	rjmp	.+22     	; 0x2de0 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    2dca:	0f b6       	in	r0, 0x3f	; 63
    2dcc:	07 fc       	sbrc	r0, 7
    2dce:	fa cf       	rjmp	.-12     	; 0x2dc4 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2dd0:	e8 89       	ldd	r30, Y+16	; 0x10
    2dd2:	f9 89       	ldd	r31, Y+17	; 0x11
    2dd4:	80 81       	ld	r24, Z
    2dd6:	85 ff       	sbrs	r24, 5
    2dd8:	f5 cf       	rjmp	.-22     	; 0x2dc4 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    2dda:	ce 01       	movw	r24, r28
    2ddc:	b7 df       	rcall	.-146    	; 0x2d4c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2dde:	f2 cf       	rjmp	.-28     	; 0x2dc4 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2de0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2de2:	fe 01       	movw	r30, r28
    2de4:	e8 0f       	add	r30, r24
    2de6:	f1 1d       	adc	r31, r1
    2de8:	e3 5a       	subi	r30, 0xA3	; 163
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2dee:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2df0:	f8 94       	cli
    _tx_buffer_head = i;
    2df2:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    2df4:	ea 89       	ldd	r30, Y+18	; 0x12
    2df6:	fb 89       	ldd	r31, Y+19	; 0x13
    2df8:	80 81       	ld	r24, Z
    2dfa:	80 62       	ori	r24, 0x20	; 32
    2dfc:	0a c0       	rjmp	.+20     	; 0x2e12 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2dfe:	9f b7       	in	r25, 0x3f	; 63
    2e00:	f8 94       	cli
      *_udr = c;
    2e02:	ee 89       	ldd	r30, Y+22	; 0x16
    2e04:	ff 89       	ldd	r31, Y+23	; 0x17
    2e06:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2e08:	e8 89       	ldd	r30, Y+16	; 0x10
    2e0a:	f9 89       	ldd	r31, Y+17	; 0x11
    2e0c:	80 81       	ld	r24, Z
    2e0e:	83 70       	andi	r24, 0x03	; 3
    2e10:	80 64       	ori	r24, 0x40	; 64
    2e12:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2e14:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	df 91       	pop	r29
    2e1c:	cf 91       	pop	r28
    2e1e:	1f 91       	pop	r17
    2e20:	0f 91       	pop	r16
    2e22:	ff 90       	pop	r15
    2e24:	ef 90       	pop	r14
    2e26:	08 95       	ret

00002e28 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2e28:	cf 93       	push	r28
    2e2a:	df 93       	push	r29
    2e2c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2e2e:	88 8d       	ldd	r24, Y+24	; 0x18
    2e30:	88 23       	and	r24, r24
    2e32:	c1 f0       	breq	.+48     	; 0x2e64 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2e34:	ea 89       	ldd	r30, Y+18	; 0x12
    2e36:	fb 89       	ldd	r31, Y+19	; 0x13
    2e38:	80 81       	ld	r24, Z
    2e3a:	85 fd       	sbrc	r24, 5
    2e3c:	05 c0       	rjmp	.+10     	; 0x2e48 <_ZN14HardwareSerial5flushEv+0x20>
    2e3e:	a8 89       	ldd	r26, Y+16	; 0x10
    2e40:	b9 89       	ldd	r27, Y+17	; 0x11
    2e42:	8c 91       	ld	r24, X
    2e44:	86 fd       	sbrc	r24, 6
    2e46:	0e c0       	rjmp	.+28     	; 0x2e64 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2e48:	0f b6       	in	r0, 0x3f	; 63
    2e4a:	07 fc       	sbrc	r0, 7
    2e4c:	f5 cf       	rjmp	.-22     	; 0x2e38 <_ZN14HardwareSerial5flushEv+0x10>
    2e4e:	80 81       	ld	r24, Z
    2e50:	85 ff       	sbrs	r24, 5
    2e52:	f2 cf       	rjmp	.-28     	; 0x2e38 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2e54:	a8 89       	ldd	r26, Y+16	; 0x10
    2e56:	b9 89       	ldd	r27, Y+17	; 0x11
    2e58:	8c 91       	ld	r24, X
    2e5a:	85 ff       	sbrs	r24, 5
    2e5c:	ed cf       	rjmp	.-38     	; 0x2e38 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    2e5e:	ce 01       	movw	r24, r28
    2e60:	75 df       	rcall	.-278    	; 0x2d4c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2e62:	e8 cf       	rjmp	.-48     	; 0x2e34 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2e64:	df 91       	pop	r29
    2e66:	cf 91       	pop	r28
    2e68:	08 95       	ret

00002e6a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2e6a:	cf 92       	push	r12
    2e6c:	df 92       	push	r13
    2e6e:	ef 92       	push	r14
    2e70:	ff 92       	push	r15
    2e72:	1f 93       	push	r17
    2e74:	cf 93       	push	r28
    2e76:	df 93       	push	r29
    2e78:	ec 01       	movw	r28, r24
    2e7a:	6a 01       	movw	r12, r20
    2e7c:	7b 01       	movw	r14, r22
    2e7e:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2e80:	e8 89       	ldd	r30, Y+16	; 0x10
    2e82:	f9 89       	ldd	r31, Y+17	; 0x11
    2e84:	82 e0       	ldi	r24, 0x02	; 2
    2e86:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2e88:	41 15       	cp	r20, r1
    2e8a:	51 4e       	sbci	r21, 0xE1	; 225
    2e8c:	61 05       	cpc	r22, r1
    2e8e:	71 05       	cpc	r23, r1
    2e90:	a9 f0       	breq	.+42     	; 0x2ebc <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2e92:	60 e0       	ldi	r22, 0x00	; 0
    2e94:	79 e0       	ldi	r23, 0x09	; 9
    2e96:	8d e3       	ldi	r24, 0x3D	; 61
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	a7 01       	movw	r20, r14
    2e9c:	96 01       	movw	r18, r12
    2e9e:	d7 d4       	rcall	.+2478   	; 0x384e <__udivmodsi4>
    2ea0:	da 01       	movw	r26, r20
    2ea2:	c9 01       	movw	r24, r18
    2ea4:	01 97       	sbiw	r24, 0x01	; 1
    2ea6:	a1 09       	sbc	r26, r1
    2ea8:	b1 09       	sbc	r27, r1
    2eaa:	b6 95       	lsr	r27
    2eac:	a7 95       	ror	r26
    2eae:	97 95       	ror	r25
    2eb0:	87 95       	ror	r24
    2eb2:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2eb4:	21 15       	cp	r18, r1
    2eb6:	80 e1       	ldi	r24, 0x10	; 16
    2eb8:	38 07       	cpc	r19, r24
    2eba:	a0 f0       	brcs	.+40     	; 0x2ee4 <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    2ebc:	e8 89       	ldd	r30, Y+16	; 0x10
    2ebe:	f9 89       	ldd	r31, Y+17	; 0x11
    2ec0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2ec2:	60 e8       	ldi	r22, 0x80	; 128
    2ec4:	74 e8       	ldi	r23, 0x84	; 132
    2ec6:	8e e1       	ldi	r24, 0x1E	; 30
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	a7 01       	movw	r20, r14
    2ecc:	96 01       	movw	r18, r12
    2ece:	bf d4       	rcall	.+2430   	; 0x384e <__udivmodsi4>
    2ed0:	da 01       	movw	r26, r20
    2ed2:	c9 01       	movw	r24, r18
    2ed4:	01 97       	sbiw	r24, 0x01	; 1
    2ed6:	a1 09       	sbc	r26, r1
    2ed8:	b1 09       	sbc	r27, r1
    2eda:	b6 95       	lsr	r27
    2edc:	a7 95       	ror	r26
    2ede:	97 95       	ror	r25
    2ee0:	87 95       	ror	r24
    2ee2:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2ee4:	ec 85       	ldd	r30, Y+12	; 0x0c
    2ee6:	fd 85       	ldd	r31, Y+13	; 0x0d
    2ee8:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2eea:	ee 85       	ldd	r30, Y+14	; 0x0e
    2eec:	ff 85       	ldd	r31, Y+15	; 0x0f
    2eee:	20 83       	st	Z, r18

  _written = false;
    2ef0:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2ef2:	ec 89       	ldd	r30, Y+20	; 0x14
    2ef4:	fd 89       	ldd	r31, Y+21	; 0x15
    2ef6:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2ef8:	ea 89       	ldd	r30, Y+18	; 0x12
    2efa:	fb 89       	ldd	r31, Y+19	; 0x13
    2efc:	80 81       	ld	r24, Z
    2efe:	80 61       	ori	r24, 0x10	; 16
    2f00:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2f02:	ea 89       	ldd	r30, Y+18	; 0x12
    2f04:	fb 89       	ldd	r31, Y+19	; 0x13
    2f06:	80 81       	ld	r24, Z
    2f08:	88 60       	ori	r24, 0x08	; 8
    2f0a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2f0c:	ea 89       	ldd	r30, Y+18	; 0x12
    2f0e:	fb 89       	ldd	r31, Y+19	; 0x13
    2f10:	80 81       	ld	r24, Z
    2f12:	80 68       	ori	r24, 0x80	; 128
    2f14:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2f16:	ea 89       	ldd	r30, Y+18	; 0x12
    2f18:	fb 89       	ldd	r31, Y+19	; 0x13
    2f1a:	80 81       	ld	r24, Z
    2f1c:	8f 7d       	andi	r24, 0xDF	; 223
    2f1e:	80 83       	st	Z, r24
}
    2f20:	df 91       	pop	r29
    2f22:	cf 91       	pop	r28
    2f24:	1f 91       	pop	r17
    2f26:	ff 90       	pop	r15
    2f28:	ef 90       	pop	r14
    2f2a:	df 90       	pop	r13
    2f2c:	cf 90       	pop	r12
    2f2e:	08 95       	ret

00002f30 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2f30:	1f 92       	push	r1
    2f32:	0f 92       	push	r0
    2f34:	0f b6       	in	r0, 0x3f	; 63
    2f36:	0f 92       	push	r0
    2f38:	11 24       	eor	r1, r1
    2f3a:	0b b6       	in	r0, 0x3b	; 59
    2f3c:	0f 92       	push	r0
    2f3e:	2f 93       	push	r18
    2f40:	8f 93       	push	r24
    2f42:	9f 93       	push	r25
    2f44:	ef 93       	push	r30
    2f46:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2f48:	e0 91 14 06 	lds	r30, 0x0614	; 0x800614 <Serial+0x10>
    2f4c:	f0 91 15 06 	lds	r31, 0x0615	; 0x800615 <Serial+0x11>
    2f50:	80 81       	ld	r24, Z
    2f52:	e0 91 1a 06 	lds	r30, 0x061A	; 0x80061a <Serial+0x16>
    2f56:	f0 91 1b 06 	lds	r31, 0x061B	; 0x80061b <Serial+0x17>
    2f5a:	82 fd       	sbrc	r24, 2
    2f5c:	12 c0       	rjmp	.+36     	; 0x2f82 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2f5e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2f60:	80 91 1d 06 	lds	r24, 0x061D	; 0x80061d <Serial+0x19>
    2f64:	8f 5f       	subi	r24, 0xFF	; 255
    2f66:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2f68:	20 91 1e 06 	lds	r18, 0x061E	; 0x80061e <Serial+0x1a>
    2f6c:	82 17       	cp	r24, r18
    2f6e:	51 f0       	breq	.+20     	; 0x2f84 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    2f70:	e0 91 1d 06 	lds	r30, 0x061D	; 0x80061d <Serial+0x19>
    2f74:	f0 e0       	ldi	r31, 0x00	; 0
    2f76:	ec 5f       	subi	r30, 0xFC	; 252
    2f78:	f9 4f       	sbci	r31, 0xF9	; 249
    2f7a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2f7c:	80 93 1d 06 	sts	0x061D, r24	; 0x80061d <Serial+0x19>
    2f80:	01 c0       	rjmp	.+2      	; 0x2f84 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2f82:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2f84:	ff 91       	pop	r31
    2f86:	ef 91       	pop	r30
    2f88:	9f 91       	pop	r25
    2f8a:	8f 91       	pop	r24
    2f8c:	2f 91       	pop	r18
    2f8e:	0f 90       	pop	r0
    2f90:	0b be       	out	0x3b, r0	; 59
    2f92:	0f 90       	pop	r0
    2f94:	0f be       	out	0x3f, r0	; 63
    2f96:	0f 90       	pop	r0
    2f98:	1f 90       	pop	r1
    2f9a:	18 95       	reti

00002f9c <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2f9c:	1f 92       	push	r1
    2f9e:	0f 92       	push	r0
    2fa0:	0f b6       	in	r0, 0x3f	; 63
    2fa2:	0f 92       	push	r0
    2fa4:	11 24       	eor	r1, r1
    2fa6:	0b b6       	in	r0, 0x3b	; 59
    2fa8:	0f 92       	push	r0
    2faa:	2f 93       	push	r18
    2fac:	3f 93       	push	r19
    2fae:	4f 93       	push	r20
    2fb0:	5f 93       	push	r21
    2fb2:	6f 93       	push	r22
    2fb4:	7f 93       	push	r23
    2fb6:	8f 93       	push	r24
    2fb8:	9f 93       	push	r25
    2fba:	af 93       	push	r26
    2fbc:	bf 93       	push	r27
    2fbe:	ef 93       	push	r30
    2fc0:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2fc2:	84 e0       	ldi	r24, 0x04	; 4
    2fc4:	96 e0       	ldi	r25, 0x06	; 6
    2fc6:	c2 de       	rcall	.-636    	; 0x2d4c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2fc8:	ff 91       	pop	r31
    2fca:	ef 91       	pop	r30
    2fcc:	bf 91       	pop	r27
    2fce:	af 91       	pop	r26
    2fd0:	9f 91       	pop	r25
    2fd2:	8f 91       	pop	r24
    2fd4:	7f 91       	pop	r23
    2fd6:	6f 91       	pop	r22
    2fd8:	5f 91       	pop	r21
    2fda:	4f 91       	pop	r20
    2fdc:	3f 91       	pop	r19
    2fde:	2f 91       	pop	r18
    2fe0:	0f 90       	pop	r0
    2fe2:	0b be       	out	0x3b, r0	; 59
    2fe4:	0f 90       	pop	r0
    2fe6:	0f be       	out	0x3f, r0	; 63
    2fe8:	0f 90       	pop	r0
    2fea:	1f 90       	pop	r1
    2fec:	18 95       	reti

00002fee <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2fee:	84 e0       	ldi	r24, 0x04	; 4
    2ff0:	96 e0       	ldi	r25, 0x06	; 6
    2ff2:	33 de       	rcall	.-922    	; 0x2c5a <_ZN14HardwareSerial9availableEv>
    2ff4:	21 e0       	ldi	r18, 0x01	; 1
    2ff6:	89 2b       	or	r24, r25
    2ff8:	09 f4       	brne	.+2      	; 0x2ffc <_Z17Serial0_availablev+0xe>
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
}
    2ffc:	82 2f       	mov	r24, r18
    2ffe:	08 95       	ret

00003000 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3000:	e4 e0       	ldi	r30, 0x04	; 4
    3002:	f6 e0       	ldi	r31, 0x06	; 6
    3004:	13 82       	std	Z+3, r1	; 0x03
    3006:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    3008:	88 ee       	ldi	r24, 0xE8	; 232
    300a:	93 e0       	ldi	r25, 0x03	; 3
    300c:	a0 e0       	ldi	r26, 0x00	; 0
    300e:	b0 e0       	ldi	r27, 0x00	; 0
    3010:	84 83       	std	Z+4, r24	; 0x04
    3012:	95 83       	std	Z+5, r25	; 0x05
    3014:	a6 83       	std	Z+6, r26	; 0x06
    3016:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3018:	87 ec       	ldi	r24, 0xC7	; 199
    301a:	94 e0       	ldi	r25, 0x04	; 4
    301c:	91 83       	std	Z+1, r25	; 0x01
    301e:	80 83       	st	Z, r24
    3020:	85 ec       	ldi	r24, 0xC5	; 197
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	95 87       	std	Z+13, r25	; 0x0d
    3026:	84 87       	std	Z+12, r24	; 0x0c
    3028:	84 ec       	ldi	r24, 0xC4	; 196
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	97 87       	std	Z+15, r25	; 0x0f
    302e:	86 87       	std	Z+14, r24	; 0x0e
    3030:	80 ec       	ldi	r24, 0xC0	; 192
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	91 8b       	std	Z+17, r25	; 0x11
    3036:	80 8b       	std	Z+16, r24	; 0x10
    3038:	81 ec       	ldi	r24, 0xC1	; 193
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	93 8b       	std	Z+19, r25	; 0x13
    303e:	82 8b       	std	Z+18, r24	; 0x12
    3040:	82 ec       	ldi	r24, 0xC2	; 194
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	95 8b       	std	Z+21, r25	; 0x15
    3046:	84 8b       	std	Z+20, r24	; 0x14
    3048:	86 ec       	ldi	r24, 0xC6	; 198
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	97 8b       	std	Z+23, r25	; 0x17
    304e:	86 8b       	std	Z+22, r24	; 0x16
    3050:	11 8e       	std	Z+25, r1	; 0x19
    3052:	12 8e       	std	Z+26, r1	; 0x1a
    3054:	13 8e       	std	Z+27, r1	; 0x1b
    3056:	14 8e       	std	Z+28, r1	; 0x1c
    3058:	08 95       	ret

0000305a <initVariant>:
    305a:	08 95       	ret

0000305c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    305c:	a4 d1       	rcall	.+840    	; 0x33a6 <init>

	initVariant();
    305e:	fd df       	rcall	.-6      	; 0x305a <initVariant>
    3060:	0e 94 4f 04 	call	0x89e	; 0x89e <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3064:	ca e6       	ldi	r28, 0x6A	; 106
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3066:	d6 e1       	ldi	r29, 0x16	; 22
    3068:	0e 94 c5 04 	call	0x98a	; 0x98a <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    306c:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    306e:	e1 f3       	breq	.-8      	; 0x3068 <main+0xc>
    3070:	31 de       	rcall	.-926    	; 0x2cd4 <_Z14serialEventRunv>
    3072:	fa cf       	rjmp	.-12     	; 0x3068 <main+0xc>

00003074 <_ZN5Print5writeEPKhj>:
    3074:	cf 92       	push	r12
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    3076:	df 92       	push	r13
    3078:	ef 92       	push	r14
    307a:	ff 92       	push	r15
    307c:	0f 93       	push	r16
    307e:	1f 93       	push	r17
    3080:	cf 93       	push	r28
    3082:	df 93       	push	r29
    3084:	6c 01       	movw	r12, r24
    3086:	7a 01       	movw	r14, r20
    3088:	8b 01       	movw	r16, r22
    308a:	c0 e0       	ldi	r28, 0x00	; 0
    308c:	d0 e0       	ldi	r29, 0x00	; 0
    308e:	ce 15       	cp	r28, r14
    3090:	df 05       	cpc	r29, r15
    3092:	81 f0       	breq	.+32     	; 0x30b4 <_ZN5Print5writeEPKhj+0x40>
    3094:	d8 01       	movw	r26, r16
    3096:	6d 91       	ld	r22, X+
    3098:	8d 01       	movw	r16, r26
    309a:	d6 01       	movw	r26, r12
    309c:	ed 91       	ld	r30, X+
    309e:	fc 91       	ld	r31, X
    30a0:	01 90       	ld	r0, Z+
    30a2:	f0 81       	ld	r31, Z
    30a4:	e0 2d       	mov	r30, r0
    30a6:	c6 01       	movw	r24, r12
    30a8:	19 95       	eicall
    30aa:	89 2b       	or	r24, r25
    30ac:	11 f0       	breq	.+4      	; 0x30b2 <_ZN5Print5writeEPKhj+0x3e>
    30ae:	21 96       	adiw	r28, 0x01	; 1
    30b0:	ee cf       	rjmp	.-36     	; 0x308e <_ZN5Print5writeEPKhj+0x1a>
    30b2:	7e 01       	movw	r14, r28
    30b4:	c7 01       	movw	r24, r14
    30b6:	df 91       	pop	r29
    30b8:	cf 91       	pop	r28
    30ba:	1f 91       	pop	r17
    30bc:	0f 91       	pop	r16
    30be:	ff 90       	pop	r15
    30c0:	ef 90       	pop	r14
    30c2:	df 90       	pop	r13
    30c4:	cf 90       	pop	r12
    30c6:	08 95       	ret

000030c8 <_ZN5Print5writeEPKc>:
    30c8:	61 15       	cp	r22, r1
    30ca:	71 05       	cpc	r23, r1
    30cc:	79 f0       	breq	.+30     	; 0x30ec <_ZN5Print5writeEPKc+0x24>
    30ce:	fb 01       	movw	r30, r22
    30d0:	01 90       	ld	r0, Z+
    30d2:	00 20       	and	r0, r0
    30d4:	e9 f7       	brne	.-6      	; 0x30d0 <_ZN5Print5writeEPKc+0x8>
    30d6:	31 97       	sbiw	r30, 0x01	; 1
    30d8:	af 01       	movw	r20, r30
    30da:	46 1b       	sub	r20, r22
    30dc:	57 0b       	sbc	r21, r23
    30de:	dc 01       	movw	r26, r24
    30e0:	ed 91       	ld	r30, X+
    30e2:	fc 91       	ld	r31, X
    30e4:	02 80       	ldd	r0, Z+2	; 0x02
    30e6:	f3 81       	ldd	r31, Z+3	; 0x03
    30e8:	e0 2d       	mov	r30, r0
    30ea:	19 94       	eijmp
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	08 95       	ret

000030f2 <_ZN5Print5printERK6String>:
    30f2:	db 01       	movw	r26, r22
    30f4:	14 96       	adiw	r26, 0x04	; 4
    30f6:	4d 91       	ld	r20, X+
    30f8:	5c 91       	ld	r21, X
    30fa:	15 97       	sbiw	r26, 0x05	; 5
    30fc:	6d 91       	ld	r22, X+
    30fe:	7c 91       	ld	r23, X
    3100:	dc 01       	movw	r26, r24
    3102:	ed 91       	ld	r30, X+
    3104:	fc 91       	ld	r31, X
    3106:	02 80       	ldd	r0, Z+2	; 0x02
    3108:	f3 81       	ldd	r31, Z+3	; 0x03
    310a:	e0 2d       	mov	r30, r0
    310c:	19 94       	eijmp

0000310e <_ZN5Print5printEPKc>:
    310e:	dc cf       	rjmp	.-72     	; 0x30c8 <_ZN5Print5writeEPKc>

00003110 <_ZN5Print7printlnEv>:
    3110:	65 ed       	ldi	r22, 0xD5	; 213
    3112:	74 e0       	ldi	r23, 0x04	; 4
    3114:	d9 cf       	rjmp	.-78     	; 0x30c8 <_ZN5Print5writeEPKc>

00003116 <_ZN5Print7printlnERK6String>:
    3116:	0f 93       	push	r16
    3118:	1f 93       	push	r17
    311a:	cf 93       	push	r28
    311c:	df 93       	push	r29
    311e:	ec 01       	movw	r28, r24
    3120:	e8 df       	rcall	.-48     	; 0x30f2 <_ZN5Print5printERK6String>
    3122:	8c 01       	movw	r16, r24
    3124:	ce 01       	movw	r24, r28
    3126:	f4 df       	rcall	.-24     	; 0x3110 <_ZN5Print7printlnEv>
    3128:	80 0f       	add	r24, r16
    312a:	91 1f       	adc	r25, r17
    312c:	df 91       	pop	r29
    312e:	cf 91       	pop	r28
    3130:	1f 91       	pop	r17
    3132:	0f 91       	pop	r16
    3134:	08 95       	ret

00003136 <_ZN5Print7printlnEPKc>:
    3136:	0f 93       	push	r16
    3138:	1f 93       	push	r17
    313a:	cf 93       	push	r28
    313c:	df 93       	push	r29
    313e:	ec 01       	movw	r28, r24
    3140:	c3 df       	rcall	.-122    	; 0x30c8 <_ZN5Print5writeEPKc>
    3142:	8c 01       	movw	r16, r24
    3144:	ce 01       	movw	r24, r28
    3146:	e4 df       	rcall	.-56     	; 0x3110 <_ZN5Print7printlnEv>
    3148:	80 0f       	add	r24, r16
    314a:	91 1f       	adc	r25, r17
    314c:	df 91       	pop	r29
    314e:	cf 91       	pop	r28
    3150:	1f 91       	pop	r17
    3152:	0f 91       	pop	r16
    3154:	08 95       	ret

00003156 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    3156:	8f 92       	push	r8
    3158:	9f 92       	push	r9
    315a:	af 92       	push	r10
    315c:	bf 92       	push	r11
    315e:	ef 92       	push	r14
    3160:	ff 92       	push	r15
    3162:	0f 93       	push	r16
    3164:	1f 93       	push	r17
    3166:	cf 93       	push	r28
    3168:	df 93       	push	r29
    316a:	cd b7       	in	r28, 0x3d	; 61
    316c:	de b7       	in	r29, 0x3e	; 62
    316e:	a1 97       	sbiw	r28, 0x21	; 33
    3170:	0f b6       	in	r0, 0x3f	; 63
    3172:	f8 94       	cli
    3174:	de bf       	out	0x3e, r29	; 62
    3176:	0f be       	out	0x3f, r0	; 63
    3178:	cd bf       	out	0x3d, r28	; 61
    317a:	7c 01       	movw	r14, r24
    317c:	fa 01       	movw	r30, r20
    317e:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    3180:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    3182:	22 30       	cpi	r18, 0x02	; 2
    3184:	08 f4       	brcc	.+2      	; 0x3188 <_ZN5Print11printNumberEmh+0x32>
    3186:	2a e0       	ldi	r18, 0x0A	; 10
    3188:	8e 01       	movw	r16, r28
    318a:	0f 5d       	subi	r16, 0xDF	; 223
    318c:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    318e:	82 2e       	mov	r8, r18
    3190:	91 2c       	mov	r9, r1
    3192:	a1 2c       	mov	r10, r1
    3194:	b1 2c       	mov	r11, r1
    3196:	bf 01       	movw	r22, r30
    3198:	a5 01       	movw	r20, r10
    319a:	94 01       	movw	r18, r8
    319c:	58 d3       	rcall	.+1712   	; 0x384e <__udivmodsi4>
    n /= base;
    319e:	f9 01       	movw	r30, r18
    31a0:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    31a2:	01 50       	subi	r16, 0x01	; 1
    31a4:	11 09       	sbc	r17, r1
    31a6:	6a 30       	cpi	r22, 0x0A	; 10
    31a8:	10 f4       	brcc	.+4      	; 0x31ae <_ZN5Print11printNumberEmh+0x58>
    31aa:	60 5d       	subi	r22, 0xD0	; 208
    31ac:	01 c0       	rjmp	.+2      	; 0x31b0 <_ZN5Print11printNumberEmh+0x5a>
    31ae:	69 5c       	subi	r22, 0xC9	; 201
    31b0:	d8 01       	movw	r26, r16
    31b2:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    31b4:	23 2b       	or	r18, r19
    31b6:	24 2b       	or	r18, r20
    31b8:	25 2b       	or	r18, r21
    31ba:	69 f7       	brne	.-38     	; 0x3196 <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    31bc:	b8 01       	movw	r22, r16
    31be:	c7 01       	movw	r24, r14
    31c0:	83 df       	rcall	.-250    	; 0x30c8 <_ZN5Print5writeEPKc>
}
    31c2:	a1 96       	adiw	r28, 0x21	; 33
    31c4:	0f b6       	in	r0, 0x3f	; 63
    31c6:	f8 94       	cli
    31c8:	de bf       	out	0x3e, r29	; 62
    31ca:	0f be       	out	0x3f, r0	; 63
    31cc:	cd bf       	out	0x3d, r28	; 61
    31ce:	df 91       	pop	r29
    31d0:	cf 91       	pop	r28
    31d2:	1f 91       	pop	r17
    31d4:	0f 91       	pop	r16
    31d6:	ff 90       	pop	r15
    31d8:	ef 90       	pop	r14
    31da:	bf 90       	pop	r11
    31dc:	af 90       	pop	r10
    31de:	9f 90       	pop	r9
    31e0:	8f 90       	pop	r8
    31e2:	08 95       	ret

000031e4 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    31e4:	21 15       	cp	r18, r1
    31e6:	31 05       	cpc	r19, r1
    31e8:	41 f4       	brne	.+16     	; 0x31fa <_ZN5Print5printEmi+0x16>
    31ea:	dc 01       	movw	r26, r24
    31ec:	ed 91       	ld	r30, X+
    31ee:	fc 91       	ld	r31, X
    31f0:	01 90       	ld	r0, Z+
    31f2:	f0 81       	ld	r31, Z
    31f4:	e0 2d       	mov	r30, r0
    31f6:	64 2f       	mov	r22, r20
    31f8:	19 94       	eijmp
  else return printNumber(n, base);
    31fa:	ad cf       	rjmp	.-166    	; 0x3156 <_ZN5Print11printNumberEmh>

000031fc <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    31fc:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    31fe:	46 2f       	mov	r20, r22
    3200:	50 e0       	ldi	r21, 0x00	; 0
    3202:	60 e0       	ldi	r22, 0x00	; 0
    3204:	70 e0       	ldi	r23, 0x00	; 0
    3206:	ee cf       	rjmp	.-36     	; 0x31e4 <_ZN5Print5printEmi>

00003208 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    3208:	0f 93       	push	r16
    320a:	1f 93       	push	r17
    320c:	cf 93       	push	r28
    320e:	df 93       	push	r29
    3210:	ec 01       	movw	r28, r24
  size_t n = print(b, base);
    3212:	f4 df       	rcall	.-24     	; 0x31fc <_ZN5Print5printEhi>
    3214:	8c 01       	movw	r16, r24
  n += println();
    3216:	ce 01       	movw	r24, r28
    3218:	7b df       	rcall	.-266    	; 0x3110 <_ZN5Print7printlnEv>
  return n;
}
    321a:	80 0f       	add	r24, r16
    321c:	91 1f       	adc	r25, r17
    321e:	df 91       	pop	r29
    3220:	cf 91       	pop	r28
    3222:	1f 91       	pop	r17
    3224:	0f 91       	pop	r16
    3226:	08 95       	ret

00003228 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    3228:	1f 92       	push	r1
    322a:	0f 92       	push	r0
    322c:	0f b6       	in	r0, 0x3f	; 63
    322e:	0f 92       	push	r0
    3230:	11 24       	eor	r1, r1
    3232:	2f 93       	push	r18
    3234:	3f 93       	push	r19
    3236:	8f 93       	push	r24
    3238:	9f 93       	push	r25
    323a:	af 93       	push	r26
    323c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    323e:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <timer0_millis>
    3242:	90 91 a3 06 	lds	r25, 0x06A3	; 0x8006a3 <timer0_millis+0x1>
    3246:	a0 91 a4 06 	lds	r26, 0x06A4	; 0x8006a4 <timer0_millis+0x2>
    324a:	b0 91 a5 06 	lds	r27, 0x06A5	; 0x8006a5 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    324e:	30 91 a1 06 	lds	r19, 0x06A1	; 0x8006a1 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    3252:	23 e0       	ldi	r18, 0x03	; 3
    3254:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    3256:	2d 37       	cpi	r18, 0x7D	; 125
    3258:	20 f4       	brcc	.+8      	; 0x3262 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    325a:	01 96       	adiw	r24, 0x01	; 1
    325c:	a1 1d       	adc	r26, r1
    325e:	b1 1d       	adc	r27, r1
    3260:	05 c0       	rjmp	.+10     	; 0x326c <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    3262:	26 e8       	ldi	r18, 0x86	; 134
    3264:	23 0f       	add	r18, r19
		m += 1;
    3266:	02 96       	adiw	r24, 0x02	; 2
    3268:	a1 1d       	adc	r26, r1
    326a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    326c:	20 93 a1 06 	sts	0x06A1, r18	; 0x8006a1 <timer0_fract>
	timer0_millis = m;
    3270:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <timer0_millis>
    3274:	90 93 a3 06 	sts	0x06A3, r25	; 0x8006a3 <timer0_millis+0x1>
    3278:	a0 93 a4 06 	sts	0x06A4, r26	; 0x8006a4 <timer0_millis+0x2>
    327c:	b0 93 a5 06 	sts	0x06A5, r27	; 0x8006a5 <timer0_millis+0x3>
	timer0_overflow_count++;
    3280:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <timer0_overflow_count>
    3284:	90 91 a7 06 	lds	r25, 0x06A7	; 0x8006a7 <timer0_overflow_count+0x1>
    3288:	a0 91 a8 06 	lds	r26, 0x06A8	; 0x8006a8 <timer0_overflow_count+0x2>
    328c:	b0 91 a9 06 	lds	r27, 0x06A9	; 0x8006a9 <timer0_overflow_count+0x3>
    3290:	01 96       	adiw	r24, 0x01	; 1
    3292:	a1 1d       	adc	r26, r1
    3294:	b1 1d       	adc	r27, r1
    3296:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <timer0_overflow_count>
    329a:	90 93 a7 06 	sts	0x06A7, r25	; 0x8006a7 <timer0_overflow_count+0x1>
    329e:	a0 93 a8 06 	sts	0x06A8, r26	; 0x8006a8 <timer0_overflow_count+0x2>
    32a2:	b0 93 a9 06 	sts	0x06A9, r27	; 0x8006a9 <timer0_overflow_count+0x3>
}
    32a6:	bf 91       	pop	r27
    32a8:	af 91       	pop	r26
    32aa:	9f 91       	pop	r25
    32ac:	8f 91       	pop	r24
    32ae:	3f 91       	pop	r19
    32b0:	2f 91       	pop	r18
    32b2:	0f 90       	pop	r0
    32b4:	0f be       	out	0x3f, r0	; 63
    32b6:	0f 90       	pop	r0
    32b8:	1f 90       	pop	r1
    32ba:	18 95       	reti

000032bc <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    32bc:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    32be:	f8 94       	cli
	m = timer0_millis;
    32c0:	60 91 a2 06 	lds	r22, 0x06A2	; 0x8006a2 <timer0_millis>
    32c4:	70 91 a3 06 	lds	r23, 0x06A3	; 0x8006a3 <timer0_millis+0x1>
    32c8:	80 91 a4 06 	lds	r24, 0x06A4	; 0x8006a4 <timer0_millis+0x2>
    32cc:	90 91 a5 06 	lds	r25, 0x06A5	; 0x8006a5 <timer0_millis+0x3>
	SREG = oldSREG;
    32d0:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    32d2:	08 95       	ret

000032d4 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    32d4:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    32d6:	f8 94       	cli
	m = timer0_overflow_count;
    32d8:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <timer0_overflow_count>
    32dc:	90 91 a7 06 	lds	r25, 0x06A7	; 0x8006a7 <timer0_overflow_count+0x1>
    32e0:	a0 91 a8 06 	lds	r26, 0x06A8	; 0x8006a8 <timer0_overflow_count+0x2>
    32e4:	b0 91 a9 06 	lds	r27, 0x06A9	; 0x8006a9 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    32e8:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    32ea:	a8 9b       	sbis	0x15, 0	; 21
    32ec:	05 c0       	rjmp	.+10     	; 0x32f8 <micros+0x24>
    32ee:	2f 3f       	cpi	r18, 0xFF	; 255
    32f0:	19 f0       	breq	.+6      	; 0x32f8 <micros+0x24>
		m++;
    32f2:	01 96       	adiw	r24, 0x01	; 1
    32f4:	a1 1d       	adc	r26, r1
    32f6:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    32f8:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    32fa:	ba 2f       	mov	r27, r26
    32fc:	a9 2f       	mov	r26, r25
    32fe:	98 2f       	mov	r25, r24
    3300:	88 27       	eor	r24, r24
    3302:	82 0f       	add	r24, r18
    3304:	91 1d       	adc	r25, r1
    3306:	a1 1d       	adc	r26, r1
    3308:	b1 1d       	adc	r27, r1
    330a:	bc 01       	movw	r22, r24
    330c:	cd 01       	movw	r24, r26
    330e:	42 e0       	ldi	r20, 0x02	; 2
    3310:	66 0f       	add	r22, r22
    3312:	77 1f       	adc	r23, r23
    3314:	88 1f       	adc	r24, r24
    3316:	99 1f       	adc	r25, r25
    3318:	4a 95       	dec	r20
    331a:	d1 f7       	brne	.-12     	; 0x3310 <micros+0x3c>
}
    331c:	08 95       	ret

0000331e <delay>:

void delay(unsigned long ms)
{
    331e:	8f 92       	push	r8
    3320:	9f 92       	push	r9
    3322:	af 92       	push	r10
    3324:	bf 92       	push	r11
    3326:	cf 92       	push	r12
    3328:	df 92       	push	r13
    332a:	ef 92       	push	r14
    332c:	ff 92       	push	r15
    332e:	6b 01       	movw	r12, r22
    3330:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    3332:	d0 df       	rcall	.-96     	; 0x32d4 <micros>
    3334:	4b 01       	movw	r8, r22
    3336:	5c 01       	movw	r10, r24

	while (ms > 0) {
    3338:	c1 14       	cp	r12, r1
    333a:	d1 04       	cpc	r13, r1
    333c:	e1 04       	cpc	r14, r1
    333e:	f1 04       	cpc	r15, r1
		yield();
    3340:	f1 f0       	breq	.+60     	; 0x337e <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    3342:	84 d2       	rcall	.+1288   	; 0x384c <yield>
    3344:	c7 df       	rcall	.-114    	; 0x32d4 <micros>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	88 19       	sub	r24, r8
    334c:	99 09       	sbc	r25, r9
    334e:	aa 09       	sbc	r26, r10
    3350:	bb 09       	sbc	r27, r11
    3352:	88 3e       	cpi	r24, 0xE8	; 232
    3354:	93 40       	sbci	r25, 0x03	; 3
    3356:	a1 05       	cpc	r26, r1
    3358:	b1 05       	cpc	r27, r1
    335a:	70 f3       	brcs	.-36     	; 0x3338 <delay+0x1a>
			ms--;
    335c:	21 e0       	ldi	r18, 0x01	; 1
    335e:	c2 1a       	sub	r12, r18
    3360:	d1 08       	sbc	r13, r1
    3362:	e1 08       	sbc	r14, r1
    3364:	f1 08       	sbc	r15, r1
			start += 1000;
    3366:	88 ee       	ldi	r24, 0xE8	; 232
    3368:	88 0e       	add	r8, r24
    336a:	83 e0       	ldi	r24, 0x03	; 3
    336c:	98 1e       	adc	r9, r24
    336e:	a1 1c       	adc	r10, r1
    3370:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    3372:	c1 14       	cp	r12, r1
    3374:	d1 04       	cpc	r13, r1
    3376:	e1 04       	cpc	r14, r1
    3378:	f1 04       	cpc	r15, r1
    337a:	21 f7       	brne	.-56     	; 0x3344 <delay+0x26>
    337c:	dd cf       	rjmp	.-70     	; 0x3338 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    337e:	ff 90       	pop	r15
    3380:	ef 90       	pop	r14
    3382:	df 90       	pop	r13
    3384:	cf 90       	pop	r12
    3386:	bf 90       	pop	r11
    3388:	af 90       	pop	r10
    338a:	9f 90       	pop	r9
    338c:	8f 90       	pop	r8
    338e:	08 95       	ret

00003390 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    3390:	82 30       	cpi	r24, 0x02	; 2
    3392:	91 05       	cpc	r25, r1
    3394:	38 f0       	brcs	.+14     	; 0x33a4 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    3396:	88 0f       	add	r24, r24
    3398:	99 1f       	adc	r25, r25
    339a:	88 0f       	add	r24, r24
    339c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    339e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    33a0:	01 97       	sbiw	r24, 0x01	; 1
    33a2:	f1 f7       	brne	.-4      	; 0x33a0 <delayMicroseconds+0x10>
    33a4:	08 95       	ret

000033a6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    33a6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    33a8:	84 b5       	in	r24, 0x24	; 36
    33aa:	82 60       	ori	r24, 0x02	; 2
    33ac:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    33ae:	84 b5       	in	r24, 0x24	; 36
    33b0:	81 60       	ori	r24, 0x01	; 1
    33b2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    33b4:	85 b5       	in	r24, 0x25	; 37
    33b6:	82 60       	ori	r24, 0x02	; 2
    33b8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    33ba:	85 b5       	in	r24, 0x25	; 37
    33bc:	81 60       	ori	r24, 0x01	; 1
    33be:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    33c0:	ee e6       	ldi	r30, 0x6E	; 110
    33c2:	f0 e0       	ldi	r31, 0x00	; 0
    33c4:	80 81       	ld	r24, Z
    33c6:	81 60       	ori	r24, 0x01	; 1
    33c8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    33ca:	e1 e8       	ldi	r30, 0x81	; 129
    33cc:	f0 e0       	ldi	r31, 0x00	; 0
    33ce:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    33d0:	80 81       	ld	r24, Z
    33d2:	82 60       	ori	r24, 0x02	; 2
    33d4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    33d6:	80 81       	ld	r24, Z
    33d8:	81 60       	ori	r24, 0x01	; 1
    33da:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    33dc:	e0 e8       	ldi	r30, 0x80	; 128
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	80 81       	ld	r24, Z
    33e2:	81 60       	ori	r24, 0x01	; 1
    33e4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    33e6:	e1 eb       	ldi	r30, 0xB1	; 177
    33e8:	f0 e0       	ldi	r31, 0x00	; 0
    33ea:	80 81       	ld	r24, Z
    33ec:	84 60       	ori	r24, 0x04	; 4
    33ee:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    33f0:	e0 eb       	ldi	r30, 0xB0	; 176
    33f2:	f0 e0       	ldi	r31, 0x00	; 0
    33f4:	80 81       	ld	r24, Z
    33f6:	81 60       	ori	r24, 0x01	; 1
    33f8:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    33fa:	e1 e9       	ldi	r30, 0x91	; 145
    33fc:	f0 e0       	ldi	r31, 0x00	; 0
    33fe:	80 81       	ld	r24, Z
    3400:	82 60       	ori	r24, 0x02	; 2
    3402:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    3404:	80 81       	ld	r24, Z
    3406:	81 60       	ori	r24, 0x01	; 1
    3408:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    340a:	e0 e9       	ldi	r30, 0x90	; 144
    340c:	f0 e0       	ldi	r31, 0x00	; 0
    340e:	80 81       	ld	r24, Z
    3410:	81 60       	ori	r24, 0x01	; 1
    3412:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    3414:	e1 ea       	ldi	r30, 0xA1	; 161
    3416:	f0 e0       	ldi	r31, 0x00	; 0
    3418:	80 81       	ld	r24, Z
    341a:	82 60       	ori	r24, 0x02	; 2
    341c:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    341e:	80 81       	ld	r24, Z
    3420:	81 60       	ori	r24, 0x01	; 1
    3422:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    3424:	e0 ea       	ldi	r30, 0xA0	; 160
    3426:	f0 e0       	ldi	r31, 0x00	; 0
    3428:	80 81       	ld	r24, Z
    342a:	81 60       	ori	r24, 0x01	; 1
    342c:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    342e:	e1 e2       	ldi	r30, 0x21	; 33
    3430:	f1 e0       	ldi	r31, 0x01	; 1
    3432:	80 81       	ld	r24, Z
    3434:	82 60       	ori	r24, 0x02	; 2
    3436:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    3438:	80 81       	ld	r24, Z
    343a:	81 60       	ori	r24, 0x01	; 1
    343c:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    343e:	e0 e2       	ldi	r30, 0x20	; 32
    3440:	f1 e0       	ldi	r31, 0x01	; 1
    3442:	80 81       	ld	r24, Z
    3444:	81 60       	ori	r24, 0x01	; 1
    3446:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3448:	ea e7       	ldi	r30, 0x7A	; 122
    344a:	f0 e0       	ldi	r31, 0x00	; 0
    344c:	80 81       	ld	r24, Z
    344e:	84 60       	ori	r24, 0x04	; 4
    3450:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3452:	80 81       	ld	r24, Z
    3454:	82 60       	ori	r24, 0x02	; 2
    3456:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3458:	80 81       	ld	r24, Z
    345a:	81 60       	ori	r24, 0x01	; 1
    345c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    345e:	80 81       	ld	r24, Z
    3460:	80 68       	ori	r24, 0x80	; 128
    3462:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3464:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    3468:	08 95       	ret

0000346a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	fc 01       	movw	r30, r24
    346e:	31 97       	sbiw	r30, 0x01	; 1
    3470:	e2 31       	cpi	r30, 0x12	; 18
    3472:	f1 05       	cpc	r31, r1
    3474:	08 f0       	brcs	.+2      	; 0x3478 <turnOffPWM+0xe>
    3476:	4d c0       	rjmp	.+154    	; 0x3512 <turnOffPWM+0xa8>
    3478:	88 27       	eor	r24, r24
    347a:	ee 58       	subi	r30, 0x8E	; 142
    347c:	ff 4f       	sbci	r31, 0xFF	; 255
    347e:	8f 4f       	sbci	r24, 0xFF	; 255
    3480:	08 c2       	rjmp	.+1040   	; 0x3892 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3482:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    3486:	8f 77       	andi	r24, 0x7F	; 127
    3488:	03 c0       	rjmp	.+6      	; 0x3490 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    348a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    348e:	8f 7d       	andi	r24, 0xDF	; 223
    3490:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    3494:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    3496:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    349a:	87 7f       	andi	r24, 0xF7	; 247
    349c:	f9 cf       	rjmp	.-14     	; 0x3490 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    349e:	84 b5       	in	r24, 0x24	; 36
    34a0:	8f 77       	andi	r24, 0x7F	; 127
    34a2:	02 c0       	rjmp	.+4      	; 0x34a8 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    34a4:	84 b5       	in	r24, 0x24	; 36
    34a6:	8f 7d       	andi	r24, 0xDF	; 223
    34a8:	84 bd       	out	0x24, r24	; 36
    34aa:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    34ac:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    34b0:	8f 77       	andi	r24, 0x7F	; 127
    34b2:	03 c0       	rjmp	.+6      	; 0x34ba <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    34b4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    34b8:	8f 7d       	andi	r24, 0xDF	; 223
    34ba:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    34be:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    34c0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    34c4:	8f 77       	andi	r24, 0x7F	; 127
    34c6:	07 c0       	rjmp	.+14     	; 0x34d6 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    34c8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    34cc:	8f 7d       	andi	r24, 0xDF	; 223
    34ce:	03 c0       	rjmp	.+6      	; 0x34d6 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    34d0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    34d4:	87 7f       	andi	r24, 0xF7	; 247
    34d6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    34da:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    34dc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    34e0:	8f 77       	andi	r24, 0x7F	; 127
    34e2:	07 c0       	rjmp	.+14     	; 0x34f2 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    34e4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    34e8:	8f 7d       	andi	r24, 0xDF	; 223
    34ea:	03 c0       	rjmp	.+6      	; 0x34f2 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    34ec:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    34f0:	87 7f       	andi	r24, 0xF7	; 247
    34f2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    34f6:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    34f8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    34fc:	8f 77       	andi	r24, 0x7F	; 127
    34fe:	07 c0       	rjmp	.+14     	; 0x350e <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    3500:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    3504:	8f 7d       	andi	r24, 0xDF	; 223
    3506:	03 c0       	rjmp	.+6      	; 0x350e <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    3508:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    350c:	87 7f       	andi	r24, 0xF7	; 247
    350e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    3512:	08 95       	ret

00003514 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3514:	cf 93       	push	r28
    3516:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	fc 01       	movw	r30, r24
    351c:	e8 5a       	subi	r30, 0xA8	; 168
    351e:	f8 4f       	sbci	r31, 0xF8	; 248
    3520:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3522:	fc 01       	movw	r30, r24
    3524:	e2 56       	subi	r30, 0x62	; 98
    3526:	f8 4f       	sbci	r31, 0xF8	; 248
    3528:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    352a:	88 23       	and	r24, r24
    352c:	61 f1       	breq	.+88     	; 0x3586 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	88 0f       	add	r24, r24
    3532:	99 1f       	adc	r25, r25
    3534:	fc 01       	movw	r30, r24
    3536:	e8 5e       	subi	r30, 0xE8	; 232
    3538:	f7 4f       	sbci	r31, 0xF7	; 247
    353a:	c5 91       	lpm	r28, Z+
    353c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    353e:	fc 01       	movw	r30, r24
    3540:	e2 50       	subi	r30, 0x02	; 2
    3542:	f8 4f       	sbci	r31, 0xF8	; 248
    3544:	a5 91       	lpm	r26, Z+
    3546:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3548:	61 11       	cpse	r22, r1
    354a:	09 c0       	rjmp	.+18     	; 0x355e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    354c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    354e:	f8 94       	cli
		*reg &= ~bit;
    3550:	88 81       	ld	r24, Y
    3552:	20 95       	com	r18
    3554:	82 23       	and	r24, r18
    3556:	88 83       	st	Y, r24
		*out &= ~bit;
    3558:	ec 91       	ld	r30, X
    355a:	2e 23       	and	r18, r30
    355c:	0b c0       	rjmp	.+22     	; 0x3574 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    355e:	62 30       	cpi	r22, 0x02	; 2
    3560:	61 f4       	brne	.+24     	; 0x357a <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3562:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3564:	f8 94       	cli
		*reg &= ~bit;
    3566:	88 81       	ld	r24, Y
    3568:	32 2f       	mov	r19, r18
    356a:	30 95       	com	r19
    356c:	83 23       	and	r24, r19
    356e:	88 83       	st	Y, r24
		*out |= bit;
    3570:	ec 91       	ld	r30, X
    3572:	2e 2b       	or	r18, r30
    3574:	2c 93       	st	X, r18
		SREG = oldSREG;
    3576:	9f bf       	out	0x3f, r25	; 63
    3578:	06 c0       	rjmp	.+12     	; 0x3586 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    357a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    357c:	f8 94       	cli
		*reg |= bit;
    357e:	e8 81       	ld	r30, Y
    3580:	2e 2b       	or	r18, r30
    3582:	28 83       	st	Y, r18
		SREG = oldSREG;
    3584:	8f bf       	out	0x3f, r24	; 63
	}
}
    3586:	df 91       	pop	r29
    3588:	cf 91       	pop	r28
    358a:	08 95       	ret

0000358c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    358c:	1f 93       	push	r17
    358e:	cf 93       	push	r28
    3590:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3592:	28 2f       	mov	r18, r24
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	f9 01       	movw	r30, r18
    3598:	ee 5e       	subi	r30, 0xEE	; 238
    359a:	f8 4f       	sbci	r31, 0xF8	; 248
    359c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    359e:	f9 01       	movw	r30, r18
    35a0:	e8 5a       	subi	r30, 0xA8	; 168
    35a2:	f8 4f       	sbci	r31, 0xF8	; 248
    35a4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    35a6:	f9 01       	movw	r30, r18
    35a8:	e2 56       	subi	r30, 0x62	; 98
    35aa:	f8 4f       	sbci	r31, 0xF8	; 248
    35ac:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    35ae:	cc 23       	and	r28, r28
    35b0:	b9 f0       	breq	.+46     	; 0x35e0 <digitalWrite+0x54>
    35b2:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    35b4:	81 11       	cpse	r24, r1
    35b6:	59 df       	rcall	.-334    	; 0x346a <turnOffPWM>

	out = portOutputRegister(port);
    35b8:	ec 2f       	mov	r30, r28
    35ba:	f0 e0       	ldi	r31, 0x00	; 0
    35bc:	ee 0f       	add	r30, r30
    35be:	ff 1f       	adc	r31, r31
    35c0:	e2 50       	subi	r30, 0x02	; 2
    35c2:	f8 4f       	sbci	r31, 0xF8	; 248
    35c4:	a5 91       	lpm	r26, Z+
    35c6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    35c8:	9f b7       	in	r25, 0x3f	; 63
	cli();
    35ca:	f8 94       	cli

	if (val == LOW) {
    35cc:	11 11       	cpse	r17, r1
    35ce:	04 c0       	rjmp	.+8      	; 0x35d8 <digitalWrite+0x4c>
		*out &= ~bit;
    35d0:	8c 91       	ld	r24, X
    35d2:	d0 95       	com	r29
    35d4:	d8 23       	and	r29, r24
    35d6:	02 c0       	rjmp	.+4      	; 0x35dc <digitalWrite+0x50>
	} else {
		*out |= bit;
    35d8:	ec 91       	ld	r30, X
    35da:	de 2b       	or	r29, r30
    35dc:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    35de:	9f bf       	out	0x3f, r25	; 63
}
    35e0:	df 91       	pop	r29
    35e2:	cf 91       	pop	r28
    35e4:	1f 91       	pop	r17
    35e6:	08 95       	ret

000035e8 <_ZN6StringD1Ev>:
	unsigned int newlen = len + length;
	if (!reserve(newlen)) return 0;
	strcpy_P(buffer + len, (const char *) str);
	len = newlen;
	return 1;
}
    35e8:	fc 01       	movw	r30, r24
    35ea:	80 81       	ld	r24, Z
    35ec:	91 81       	ldd	r25, Z+1	; 0x01
    35ee:	00 97       	sbiw	r24, 0x00	; 0
    35f0:	09 f0       	breq	.+2      	; 0x35f4 <_ZN6StringD1Ev+0xc>
    35f2:	0e c2       	rjmp	.+1052   	; 0x3a10 <free>
    35f4:	08 95       	ret

000035f6 <_ZN6String10invalidateEv>:
    35f6:	cf 93       	push	r28
    35f8:	df 93       	push	r29
    35fa:	ec 01       	movw	r28, r24
    35fc:	88 81       	ld	r24, Y
    35fe:	99 81       	ldd	r25, Y+1	; 0x01
    3600:	00 97       	sbiw	r24, 0x00	; 0
    3602:	09 f0       	breq	.+2      	; 0x3606 <_ZN6String10invalidateEv+0x10>
    3604:	05 d2       	rcall	.+1034   	; 0x3a10 <free>
    3606:	19 82       	std	Y+1, r1	; 0x01
    3608:	18 82       	st	Y, r1
    360a:	1d 82       	std	Y+5, r1	; 0x05
    360c:	1c 82       	std	Y+4, r1	; 0x04
    360e:	1b 82       	std	Y+3, r1	; 0x03
    3610:	1a 82       	std	Y+2, r1	; 0x02
    3612:	df 91       	pop	r29
    3614:	cf 91       	pop	r28
    3616:	08 95       	ret

00003618 <_ZN6String12changeBufferEj>:
    3618:	0f 93       	push	r16
    361a:	1f 93       	push	r17
    361c:	cf 93       	push	r28
    361e:	df 93       	push	r29
    3620:	ec 01       	movw	r28, r24
    3622:	8b 01       	movw	r16, r22
    3624:	6f 5f       	subi	r22, 0xFF	; 255
    3626:	7f 4f       	sbci	r23, 0xFF	; 255
    3628:	88 81       	ld	r24, Y
    362a:	99 81       	ldd	r25, Y+1	; 0x01
    362c:	7a d2       	rcall	.+1268   	; 0x3b22 <realloc>
    362e:	00 97       	sbiw	r24, 0x00	; 0
    3630:	31 f0       	breq	.+12     	; 0x363e <_ZN6String12changeBufferEj+0x26>
    3632:	99 83       	std	Y+1, r25	; 0x01
    3634:	88 83       	st	Y, r24
    3636:	1b 83       	std	Y+3, r17	; 0x03
    3638:	0a 83       	std	Y+2, r16	; 0x02
    363a:	81 e0       	ldi	r24, 0x01	; 1
    363c:	01 c0       	rjmp	.+2      	; 0x3640 <_ZN6String12changeBufferEj+0x28>
    363e:	80 e0       	ldi	r24, 0x00	; 0
    3640:	df 91       	pop	r29
    3642:	cf 91       	pop	r28
    3644:	1f 91       	pop	r17
    3646:	0f 91       	pop	r16
    3648:	08 95       	ret

0000364a <_ZN6String7reserveEj>:
    364a:	cf 93       	push	r28
    364c:	df 93       	push	r29
    364e:	ec 01       	movw	r28, r24
    3650:	88 81       	ld	r24, Y
    3652:	99 81       	ldd	r25, Y+1	; 0x01
    3654:	89 2b       	or	r24, r25
    3656:	29 f0       	breq	.+10     	; 0x3662 <_ZN6String7reserveEj+0x18>
    3658:	8a 81       	ldd	r24, Y+2	; 0x02
    365a:	9b 81       	ldd	r25, Y+3	; 0x03
    365c:	86 17       	cp	r24, r22
    365e:	97 07       	cpc	r25, r23
    3660:	58 f4       	brcc	.+22     	; 0x3678 <_ZN6String7reserveEj+0x2e>
    3662:	ce 01       	movw	r24, r28
    3664:	d9 df       	rcall	.-78     	; 0x3618 <_ZN6String12changeBufferEj>
    3666:	88 23       	and	r24, r24
    3668:	41 f0       	breq	.+16     	; 0x367a <_ZN6String7reserveEj+0x30>
    366a:	8c 81       	ldd	r24, Y+4	; 0x04
    366c:	9d 81       	ldd	r25, Y+5	; 0x05
    366e:	89 2b       	or	r24, r25
    3670:	19 f4       	brne	.+6      	; 0x3678 <_ZN6String7reserveEj+0x2e>
    3672:	e8 81       	ld	r30, Y
    3674:	f9 81       	ldd	r31, Y+1	; 0x01
    3676:	10 82       	st	Z, r1
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	df 91       	pop	r29
    367c:	cf 91       	pop	r28
    367e:	08 95       	ret

00003680 <_ZN6String4copyEPKcj>:
    3680:	ef 92       	push	r14
    3682:	ff 92       	push	r15
    3684:	0f 93       	push	r16
    3686:	1f 93       	push	r17
    3688:	cf 93       	push	r28
    368a:	df 93       	push	r29
    368c:	ec 01       	movw	r28, r24
    368e:	7b 01       	movw	r14, r22
    3690:	8a 01       	movw	r16, r20
    3692:	ba 01       	movw	r22, r20
    3694:	da df       	rcall	.-76     	; 0x364a <_ZN6String7reserveEj>
    3696:	81 11       	cpse	r24, r1
    3698:	03 c0       	rjmp	.+6      	; 0x36a0 <_ZN6String4copyEPKcj+0x20>
    369a:	ce 01       	movw	r24, r28
    369c:	ac df       	rcall	.-168    	; 0x35f6 <_ZN6String10invalidateEv>
    369e:	06 c0       	rjmp	.+12     	; 0x36ac <_ZN6String4copyEPKcj+0x2c>
    36a0:	1d 83       	std	Y+5, r17	; 0x05
    36a2:	0c 83       	std	Y+4, r16	; 0x04
    36a4:	b7 01       	movw	r22, r14
    36a6:	88 81       	ld	r24, Y
    36a8:	99 81       	ldd	r25, Y+1	; 0x01
    36aa:	28 d3       	rcall	.+1616   	; 0x3cfc <strcpy>
    36ac:	ce 01       	movw	r24, r28
    36ae:	df 91       	pop	r29
    36b0:	cf 91       	pop	r28
    36b2:	1f 91       	pop	r17
    36b4:	0f 91       	pop	r16
    36b6:	ff 90       	pop	r15
    36b8:	ef 90       	pop	r14
    36ba:	08 95       	ret

000036bc <_ZN6StringC1EPKc>:
    36bc:	fc 01       	movw	r30, r24
    36be:	11 82       	std	Z+1, r1	; 0x01
    36c0:	10 82       	st	Z, r1
    36c2:	13 82       	std	Z+3, r1	; 0x03
    36c4:	12 82       	std	Z+2, r1	; 0x02
    36c6:	15 82       	std	Z+5, r1	; 0x05
    36c8:	14 82       	std	Z+4, r1	; 0x04
    36ca:	61 15       	cp	r22, r1
    36cc:	71 05       	cpc	r23, r1
    36ce:	49 f0       	breq	.+18     	; 0x36e2 <_ZN6StringC1EPKc+0x26>
    36d0:	fb 01       	movw	r30, r22
    36d2:	01 90       	ld	r0, Z+
    36d4:	00 20       	and	r0, r0
    36d6:	e9 f7       	brne	.-6      	; 0x36d2 <_ZN6StringC1EPKc+0x16>
    36d8:	31 97       	sbiw	r30, 0x01	; 1
    36da:	af 01       	movw	r20, r30
    36dc:	46 1b       	sub	r20, r22
    36de:	57 0b       	sbc	r21, r23
    36e0:	cf cf       	rjmp	.-98     	; 0x3680 <_ZN6String4copyEPKcj>
    36e2:	08 95       	ret

000036e4 <_ZN6StringaSERKS_>:
    36e4:	cf 93       	push	r28
    36e6:	df 93       	push	r29
    36e8:	ec 01       	movw	r28, r24
    36ea:	fb 01       	movw	r30, r22
    36ec:	86 17       	cp	r24, r22
    36ee:	97 07       	cpc	r25, r23
    36f0:	51 f0       	breq	.+20     	; 0x3706 <_ZN6StringaSERKS_+0x22>
    36f2:	60 81       	ld	r22, Z
    36f4:	71 81       	ldd	r23, Z+1	; 0x01
    36f6:	61 15       	cp	r22, r1
    36f8:	71 05       	cpc	r23, r1
    36fa:	21 f0       	breq	.+8      	; 0x3704 <_ZN6StringaSERKS_+0x20>
    36fc:	44 81       	ldd	r20, Z+4	; 0x04
    36fe:	55 81       	ldd	r21, Z+5	; 0x05
    3700:	bf df       	rcall	.-130    	; 0x3680 <_ZN6String4copyEPKcj>
    3702:	01 c0       	rjmp	.+2      	; 0x3706 <_ZN6StringaSERKS_+0x22>
    3704:	78 df       	rcall	.-272    	; 0x35f6 <_ZN6String10invalidateEv>
    3706:	ce 01       	movw	r24, r28
    3708:	df 91       	pop	r29
    370a:	cf 91       	pop	r28
    370c:	08 95       	ret

0000370e <_ZN6StringC1ERKS_>:
    370e:	fc 01       	movw	r30, r24
    3710:	11 82       	std	Z+1, r1	; 0x01
    3712:	10 82       	st	Z, r1
    3714:	13 82       	std	Z+3, r1	; 0x03
    3716:	12 82       	std	Z+2, r1	; 0x02
    3718:	15 82       	std	Z+5, r1	; 0x05
    371a:	14 82       	std	Z+4, r1	; 0x04
    371c:	e3 cf       	rjmp	.-58     	; 0x36e4 <_ZN6StringaSERKS_>

0000371e <_ZN6StringaSEPKc>:
    371e:	cf 93       	push	r28
    3720:	df 93       	push	r29
    3722:	ec 01       	movw	r28, r24
    3724:	61 15       	cp	r22, r1
    3726:	71 05       	cpc	r23, r1
    3728:	51 f0       	breq	.+20     	; 0x373e <_ZN6StringaSEPKc+0x20>
    372a:	fb 01       	movw	r30, r22
    372c:	01 90       	ld	r0, Z+
    372e:	00 20       	and	r0, r0
    3730:	e9 f7       	brne	.-6      	; 0x372c <_ZN6StringaSEPKc+0xe>
    3732:	31 97       	sbiw	r30, 0x01	; 1
    3734:	af 01       	movw	r20, r30
    3736:	46 1b       	sub	r20, r22
    3738:	57 0b       	sbc	r21, r23
    373a:	a2 df       	rcall	.-188    	; 0x3680 <_ZN6String4copyEPKcj>
    373c:	01 c0       	rjmp	.+2      	; 0x3740 <_ZN6StringaSEPKc+0x22>
    373e:	5b df       	rcall	.-330    	; 0x35f6 <_ZN6String10invalidateEv>
    3740:	ce 01       	movw	r24, r28
    3742:	df 91       	pop	r29
    3744:	cf 91       	pop	r28
    3746:	08 95       	ret

00003748 <_ZN6StringC1Efh>:
    3748:	ef 92       	push	r14
    374a:	ff 92       	push	r15
    374c:	0f 93       	push	r16
    374e:	1f 93       	push	r17
    3750:	cf 93       	push	r28
    3752:	df 93       	push	r29
    3754:	cd b7       	in	r28, 0x3d	; 61
    3756:	de b7       	in	r29, 0x3e	; 62
    3758:	a1 97       	sbiw	r28, 0x21	; 33
    375a:	0f b6       	in	r0, 0x3f	; 63
    375c:	f8 94       	cli
    375e:	de bf       	out	0x3e, r29	; 62
    3760:	0f be       	out	0x3f, r0	; 63
    3762:	cd bf       	out	0x3d, r28	; 61
    3764:	7c 01       	movw	r14, r24
    3766:	cb 01       	movw	r24, r22
    3768:	ba 01       	movw	r22, r20
    376a:	f7 01       	movw	r30, r14
    376c:	11 82       	std	Z+1, r1	; 0x01
    376e:	10 82       	st	Z, r1
    3770:	13 82       	std	Z+3, r1	; 0x03
    3772:	12 82       	std	Z+2, r1	; 0x02
    3774:	15 82       	std	Z+5, r1	; 0x05
    3776:	14 82       	std	Z+4, r1	; 0x04
    3778:	42 e0       	ldi	r20, 0x02	; 2
    377a:	42 0f       	add	r20, r18
    377c:	8e 01       	movw	r16, r28
    377e:	0f 5f       	subi	r16, 0xFF	; 255
    3780:	1f 4f       	sbci	r17, 0xFF	; 255
    3782:	8f d0       	rcall	.+286    	; 0x38a2 <dtostrf>
    3784:	bc 01       	movw	r22, r24
    3786:	c7 01       	movw	r24, r14
    3788:	ca df       	rcall	.-108    	; 0x371e <_ZN6StringaSEPKc>
    378a:	a1 96       	adiw	r28, 0x21	; 33
    378c:	0f b6       	in	r0, 0x3f	; 63
    378e:	f8 94       	cli
    3790:	de bf       	out	0x3e, r29	; 62
    3792:	0f be       	out	0x3f, r0	; 63
    3794:	cd bf       	out	0x3d, r28	; 61
    3796:	df 91       	pop	r29
    3798:	cf 91       	pop	r28
    379a:	1f 91       	pop	r17
    379c:	0f 91       	pop	r16
    379e:	ff 90       	pop	r15
    37a0:	ef 90       	pop	r14
    37a2:	08 95       	ret

000037a4 <_ZN6String6concatEPKcj>:
    37a4:	ef 92       	push	r14
    37a6:	ff 92       	push	r15
    37a8:	0f 93       	push	r16
    37aa:	1f 93       	push	r17
    37ac:	cf 93       	push	r28
    37ae:	df 93       	push	r29
    37b0:	61 15       	cp	r22, r1
    37b2:	71 05       	cpc	r23, r1
    37b4:	11 f4       	brne	.+4      	; 0x37ba <_ZN6String6concatEPKcj+0x16>
    37b6:	80 e0       	ldi	r24, 0x00	; 0
    37b8:	1a c0       	rjmp	.+52     	; 0x37ee <_ZN6String6concatEPKcj+0x4a>
    37ba:	41 15       	cp	r20, r1
    37bc:	51 05       	cpc	r21, r1
    37be:	b1 f0       	breq	.+44     	; 0x37ec <_ZN6String6concatEPKcj+0x48>
    37c0:	7b 01       	movw	r14, r22
    37c2:	ec 01       	movw	r28, r24
    37c4:	8c 81       	ldd	r24, Y+4	; 0x04
    37c6:	9d 81       	ldd	r25, Y+5	; 0x05
    37c8:	8a 01       	movw	r16, r20
    37ca:	08 0f       	add	r16, r24
    37cc:	19 1f       	adc	r17, r25
    37ce:	b8 01       	movw	r22, r16
    37d0:	ce 01       	movw	r24, r28
    37d2:	3b df       	rcall	.-394    	; 0x364a <_ZN6String7reserveEj>
    37d4:	88 23       	and	r24, r24
    37d6:	79 f3       	breq	.-34     	; 0x37b6 <_ZN6String6concatEPKcj+0x12>
    37d8:	28 81       	ld	r18, Y
    37da:	39 81       	ldd	r19, Y+1	; 0x01
    37dc:	8c 81       	ldd	r24, Y+4	; 0x04
    37de:	9d 81       	ldd	r25, Y+5	; 0x05
    37e0:	b7 01       	movw	r22, r14
    37e2:	82 0f       	add	r24, r18
    37e4:	93 1f       	adc	r25, r19
    37e6:	8a d2       	rcall	.+1300   	; 0x3cfc <strcpy>
    37e8:	1d 83       	std	Y+5, r17	; 0x05
    37ea:	0c 83       	std	Y+4, r16	; 0x04
    37ec:	81 e0       	ldi	r24, 0x01	; 1
    37ee:	df 91       	pop	r29
    37f0:	cf 91       	pop	r28
    37f2:	1f 91       	pop	r17
    37f4:	0f 91       	pop	r16
    37f6:	ff 90       	pop	r15
    37f8:	ef 90       	pop	r14
    37fa:	08 95       	ret

000037fc <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    37fc:	cf 93       	push	r28
    37fe:	df 93       	push	r29
    3800:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    3802:	fb 01       	movw	r30, r22
    3804:	44 81       	ldd	r20, Z+4	; 0x04
    3806:	55 81       	ldd	r21, Z+5	; 0x05
    3808:	60 81       	ld	r22, Z
    380a:	71 81       	ldd	r23, Z+1	; 0x01
    380c:	cb df       	rcall	.-106    	; 0x37a4 <_ZN6String6concatEPKcj>
    380e:	81 11       	cpse	r24, r1
    3810:	02 c0       	rjmp	.+4      	; 0x3816 <_ZplRK15StringSumHelperRK6String+0x1a>
    3812:	ce 01       	movw	r24, r28
    3814:	f0 de       	rcall	.-544    	; 0x35f6 <_ZN6String10invalidateEv>
	return a;
}
    3816:	ce 01       	movw	r24, r28
    3818:	df 91       	pop	r29
    381a:	cf 91       	pop	r28
    381c:	08 95       	ret

0000381e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    381e:	cf 93       	push	r28
    3820:	df 93       	push	r29
    3822:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    3824:	61 15       	cp	r22, r1
    3826:	71 05       	cpc	r23, r1
    3828:	59 f0       	breq	.+22     	; 0x3840 <_ZplRK15StringSumHelperPKc+0x22>
    382a:	fb 01       	movw	r30, r22
    382c:	01 90       	ld	r0, Z+
    382e:	00 20       	and	r0, r0
    3830:	e9 f7       	brne	.-6      	; 0x382c <_ZplRK15StringSumHelperPKc+0xe>
    3832:	31 97       	sbiw	r30, 0x01	; 1
    3834:	af 01       	movw	r20, r30
    3836:	46 1b       	sub	r20, r22
    3838:	57 0b       	sbc	r21, r23
    383a:	b4 df       	rcall	.-152    	; 0x37a4 <_ZN6String6concatEPKcj>
    383c:	81 11       	cpse	r24, r1
    383e:	02 c0       	rjmp	.+4      	; 0x3844 <_ZplRK15StringSumHelperPKc+0x26>
    3840:	ce 01       	movw	r24, r28
    3842:	d9 de       	rcall	.-590    	; 0x35f6 <_ZN6String10invalidateEv>
	return a;
}
    3844:	ce 01       	movw	r24, r28
    3846:	df 91       	pop	r29
    3848:	cf 91       	pop	r28
    384a:	08 95       	ret

0000384c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    384c:	08 95       	ret

0000384e <__udivmodsi4>:
    384e:	a1 e2       	ldi	r26, 0x21	; 33
    3850:	1a 2e       	mov	r1, r26
    3852:	aa 1b       	sub	r26, r26
    3854:	bb 1b       	sub	r27, r27
    3856:	fd 01       	movw	r30, r26
    3858:	0d c0       	rjmp	.+26     	; 0x3874 <__udivmodsi4_ep>

0000385a <__udivmodsi4_loop>:
    385a:	aa 1f       	adc	r26, r26
    385c:	bb 1f       	adc	r27, r27
    385e:	ee 1f       	adc	r30, r30
    3860:	ff 1f       	adc	r31, r31
    3862:	a2 17       	cp	r26, r18
    3864:	b3 07       	cpc	r27, r19
    3866:	e4 07       	cpc	r30, r20
    3868:	f5 07       	cpc	r31, r21
    386a:	20 f0       	brcs	.+8      	; 0x3874 <__udivmodsi4_ep>
    386c:	a2 1b       	sub	r26, r18
    386e:	b3 0b       	sbc	r27, r19
    3870:	e4 0b       	sbc	r30, r20
    3872:	f5 0b       	sbc	r31, r21

00003874 <__udivmodsi4_ep>:
    3874:	66 1f       	adc	r22, r22
    3876:	77 1f       	adc	r23, r23
    3878:	88 1f       	adc	r24, r24
    387a:	99 1f       	adc	r25, r25
    387c:	1a 94       	dec	r1
    387e:	69 f7       	brne	.-38     	; 0x385a <__udivmodsi4_loop>
    3880:	60 95       	com	r22
    3882:	70 95       	com	r23
    3884:	80 95       	com	r24
    3886:	90 95       	com	r25
    3888:	9b 01       	movw	r18, r22
    388a:	ac 01       	movw	r20, r24
    388c:	bd 01       	movw	r22, r26
    388e:	cf 01       	movw	r24, r30
    3890:	08 95       	ret

00003892 <__tablejump2__>:
    3892:	ee 0f       	add	r30, r30
    3894:	ff 1f       	adc	r31, r31
    3896:	88 1f       	adc	r24, r24
    3898:	8b bf       	out	0x3b, r24	; 59
    389a:	07 90       	elpm	r0, Z+
    389c:	f6 91       	elpm	r31, Z
    389e:	e0 2d       	mov	r30, r0
    38a0:	19 94       	eijmp

000038a2 <dtostrf>:
    38a2:	ef 92       	push	r14
    38a4:	0f 93       	push	r16
    38a6:	1f 93       	push	r17
    38a8:	cf 93       	push	r28
    38aa:	df 93       	push	r29
    38ac:	e8 01       	movw	r28, r16
    38ae:	47 fd       	sbrc	r20, 7
    38b0:	02 c0       	rjmp	.+4      	; 0x38b6 <dtostrf+0x14>
    38b2:	34 e0       	ldi	r19, 0x04	; 4
    38b4:	01 c0       	rjmp	.+2      	; 0x38b8 <dtostrf+0x16>
    38b6:	34 e1       	ldi	r19, 0x14	; 20
    38b8:	04 2e       	mov	r0, r20
    38ba:	00 0c       	add	r0, r0
    38bc:	55 0b       	sbc	r21, r21
    38be:	57 ff       	sbrs	r21, 7
    38c0:	03 c0       	rjmp	.+6      	; 0x38c8 <dtostrf+0x26>
    38c2:	51 95       	neg	r21
    38c4:	41 95       	neg	r20
    38c6:	51 09       	sbc	r21, r1
    38c8:	e3 2e       	mov	r14, r19
    38ca:	02 2f       	mov	r16, r18
    38cc:	24 2f       	mov	r18, r20
    38ce:	ae 01       	movw	r20, r28
    38d0:	1c d2       	rcall	.+1080   	; 0x3d0a <dtoa_prf>
    38d2:	ce 01       	movw	r24, r28
    38d4:	df 91       	pop	r29
    38d6:	cf 91       	pop	r28
    38d8:	1f 91       	pop	r17
    38da:	0f 91       	pop	r16
    38dc:	ef 90       	pop	r14
    38de:	08 95       	ret

000038e0 <malloc>:
    38e0:	0f 93       	push	r16
    38e2:	1f 93       	push	r17
    38e4:	cf 93       	push	r28
    38e6:	df 93       	push	r29
    38e8:	82 30       	cpi	r24, 0x02	; 2
    38ea:	91 05       	cpc	r25, r1
    38ec:	10 f4       	brcc	.+4      	; 0x38f2 <malloc+0x12>
    38ee:	82 e0       	ldi	r24, 0x02	; 2
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <__flp>
    38f6:	f0 91 ad 06 	lds	r31, 0x06AD	; 0x8006ad <__flp+0x1>
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	a0 e0       	ldi	r26, 0x00	; 0
    3900:	b0 e0       	ldi	r27, 0x00	; 0
    3902:	30 97       	sbiw	r30, 0x00	; 0
    3904:	19 f1       	breq	.+70     	; 0x394c <malloc+0x6c>
    3906:	40 81       	ld	r20, Z
    3908:	51 81       	ldd	r21, Z+1	; 0x01
    390a:	02 81       	ldd	r16, Z+2	; 0x02
    390c:	13 81       	ldd	r17, Z+3	; 0x03
    390e:	48 17       	cp	r20, r24
    3910:	59 07       	cpc	r21, r25
    3912:	c8 f0       	brcs	.+50     	; 0x3946 <malloc+0x66>
    3914:	84 17       	cp	r24, r20
    3916:	95 07       	cpc	r25, r21
    3918:	69 f4       	brne	.+26     	; 0x3934 <malloc+0x54>
    391a:	10 97       	sbiw	r26, 0x00	; 0
    391c:	31 f0       	breq	.+12     	; 0x392a <malloc+0x4a>
    391e:	12 96       	adiw	r26, 0x02	; 2
    3920:	0c 93       	st	X, r16
    3922:	12 97       	sbiw	r26, 0x02	; 2
    3924:	13 96       	adiw	r26, 0x03	; 3
    3926:	1c 93       	st	X, r17
    3928:	27 c0       	rjmp	.+78     	; 0x3978 <malloc+0x98>
    392a:	00 93 ac 06 	sts	0x06AC, r16	; 0x8006ac <__flp>
    392e:	10 93 ad 06 	sts	0x06AD, r17	; 0x8006ad <__flp+0x1>
    3932:	22 c0       	rjmp	.+68     	; 0x3978 <malloc+0x98>
    3934:	21 15       	cp	r18, r1
    3936:	31 05       	cpc	r19, r1
    3938:	19 f0       	breq	.+6      	; 0x3940 <malloc+0x60>
    393a:	42 17       	cp	r20, r18
    393c:	53 07       	cpc	r21, r19
    393e:	18 f4       	brcc	.+6      	; 0x3946 <malloc+0x66>
    3940:	9a 01       	movw	r18, r20
    3942:	bd 01       	movw	r22, r26
    3944:	ef 01       	movw	r28, r30
    3946:	df 01       	movw	r26, r30
    3948:	f8 01       	movw	r30, r16
    394a:	db cf       	rjmp	.-74     	; 0x3902 <malloc+0x22>
    394c:	21 15       	cp	r18, r1
    394e:	31 05       	cpc	r19, r1
    3950:	f9 f0       	breq	.+62     	; 0x3990 <malloc+0xb0>
    3952:	28 1b       	sub	r18, r24
    3954:	39 0b       	sbc	r19, r25
    3956:	24 30       	cpi	r18, 0x04	; 4
    3958:	31 05       	cpc	r19, r1
    395a:	80 f4       	brcc	.+32     	; 0x397c <malloc+0x9c>
    395c:	8a 81       	ldd	r24, Y+2	; 0x02
    395e:	9b 81       	ldd	r25, Y+3	; 0x03
    3960:	61 15       	cp	r22, r1
    3962:	71 05       	cpc	r23, r1
    3964:	21 f0       	breq	.+8      	; 0x396e <malloc+0x8e>
    3966:	fb 01       	movw	r30, r22
    3968:	93 83       	std	Z+3, r25	; 0x03
    396a:	82 83       	std	Z+2, r24	; 0x02
    396c:	04 c0       	rjmp	.+8      	; 0x3976 <malloc+0x96>
    396e:	90 93 ad 06 	sts	0x06AD, r25	; 0x8006ad <__flp+0x1>
    3972:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <__flp>
    3976:	fe 01       	movw	r30, r28
    3978:	32 96       	adiw	r30, 0x02	; 2
    397a:	44 c0       	rjmp	.+136    	; 0x3a04 <malloc+0x124>
    397c:	fe 01       	movw	r30, r28
    397e:	e2 0f       	add	r30, r18
    3980:	f3 1f       	adc	r31, r19
    3982:	81 93       	st	Z+, r24
    3984:	91 93       	st	Z+, r25
    3986:	22 50       	subi	r18, 0x02	; 2
    3988:	31 09       	sbc	r19, r1
    398a:	39 83       	std	Y+1, r19	; 0x01
    398c:	28 83       	st	Y, r18
    398e:	3a c0       	rjmp	.+116    	; 0x3a04 <malloc+0x124>
    3990:	20 91 aa 06 	lds	r18, 0x06AA	; 0x8006aa <__brkval>
    3994:	30 91 ab 06 	lds	r19, 0x06AB	; 0x8006ab <__brkval+0x1>
    3998:	23 2b       	or	r18, r19
    399a:	41 f4       	brne	.+16     	; 0x39ac <malloc+0xcc>
    399c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    39a0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    39a4:	30 93 ab 06 	sts	0x06AB, r19	; 0x8006ab <__brkval+0x1>
    39a8:	20 93 aa 06 	sts	0x06AA, r18	; 0x8006aa <__brkval>
    39ac:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    39b0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    39b4:	21 15       	cp	r18, r1
    39b6:	31 05       	cpc	r19, r1
    39b8:	41 f4       	brne	.+16     	; 0x39ca <malloc+0xea>
    39ba:	2d b7       	in	r18, 0x3d	; 61
    39bc:	3e b7       	in	r19, 0x3e	; 62
    39be:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    39c2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    39c6:	24 1b       	sub	r18, r20
    39c8:	35 0b       	sbc	r19, r21
    39ca:	e0 91 aa 06 	lds	r30, 0x06AA	; 0x8006aa <__brkval>
    39ce:	f0 91 ab 06 	lds	r31, 0x06AB	; 0x8006ab <__brkval+0x1>
    39d2:	e2 17       	cp	r30, r18
    39d4:	f3 07       	cpc	r31, r19
    39d6:	a0 f4       	brcc	.+40     	; 0x3a00 <malloc+0x120>
    39d8:	2e 1b       	sub	r18, r30
    39da:	3f 0b       	sbc	r19, r31
    39dc:	28 17       	cp	r18, r24
    39de:	39 07       	cpc	r19, r25
    39e0:	78 f0       	brcs	.+30     	; 0x3a00 <malloc+0x120>
    39e2:	ac 01       	movw	r20, r24
    39e4:	4e 5f       	subi	r20, 0xFE	; 254
    39e6:	5f 4f       	sbci	r21, 0xFF	; 255
    39e8:	24 17       	cp	r18, r20
    39ea:	35 07       	cpc	r19, r21
    39ec:	48 f0       	brcs	.+18     	; 0x3a00 <malloc+0x120>
    39ee:	4e 0f       	add	r20, r30
    39f0:	5f 1f       	adc	r21, r31
    39f2:	50 93 ab 06 	sts	0x06AB, r21	; 0x8006ab <__brkval+0x1>
    39f6:	40 93 aa 06 	sts	0x06AA, r20	; 0x8006aa <__brkval>
    39fa:	81 93       	st	Z+, r24
    39fc:	91 93       	st	Z+, r25
    39fe:	02 c0       	rjmp	.+4      	; 0x3a04 <malloc+0x124>
    3a00:	e0 e0       	ldi	r30, 0x00	; 0
    3a02:	f0 e0       	ldi	r31, 0x00	; 0
    3a04:	cf 01       	movw	r24, r30
    3a06:	df 91       	pop	r29
    3a08:	cf 91       	pop	r28
    3a0a:	1f 91       	pop	r17
    3a0c:	0f 91       	pop	r16
    3a0e:	08 95       	ret

00003a10 <free>:
    3a10:	cf 93       	push	r28
    3a12:	df 93       	push	r29
    3a14:	00 97       	sbiw	r24, 0x00	; 0
    3a16:	09 f4       	brne	.+2      	; 0x3a1a <free+0xa>
    3a18:	81 c0       	rjmp	.+258    	; 0x3b1c <free+0x10c>
    3a1a:	fc 01       	movw	r30, r24
    3a1c:	32 97       	sbiw	r30, 0x02	; 2
    3a1e:	13 82       	std	Z+3, r1	; 0x03
    3a20:	12 82       	std	Z+2, r1	; 0x02
    3a22:	a0 91 ac 06 	lds	r26, 0x06AC	; 0x8006ac <__flp>
    3a26:	b0 91 ad 06 	lds	r27, 0x06AD	; 0x8006ad <__flp+0x1>
    3a2a:	10 97       	sbiw	r26, 0x00	; 0
    3a2c:	81 f4       	brne	.+32     	; 0x3a4e <free+0x3e>
    3a2e:	20 81       	ld	r18, Z
    3a30:	31 81       	ldd	r19, Z+1	; 0x01
    3a32:	82 0f       	add	r24, r18
    3a34:	93 1f       	adc	r25, r19
    3a36:	20 91 aa 06 	lds	r18, 0x06AA	; 0x8006aa <__brkval>
    3a3a:	30 91 ab 06 	lds	r19, 0x06AB	; 0x8006ab <__brkval+0x1>
    3a3e:	28 17       	cp	r18, r24
    3a40:	39 07       	cpc	r19, r25
    3a42:	51 f5       	brne	.+84     	; 0x3a98 <free+0x88>
    3a44:	f0 93 ab 06 	sts	0x06AB, r31	; 0x8006ab <__brkval+0x1>
    3a48:	e0 93 aa 06 	sts	0x06AA, r30	; 0x8006aa <__brkval>
    3a4c:	67 c0       	rjmp	.+206    	; 0x3b1c <free+0x10c>
    3a4e:	ed 01       	movw	r28, r26
    3a50:	20 e0       	ldi	r18, 0x00	; 0
    3a52:	30 e0       	ldi	r19, 0x00	; 0
    3a54:	ce 17       	cp	r28, r30
    3a56:	df 07       	cpc	r29, r31
    3a58:	40 f4       	brcc	.+16     	; 0x3a6a <free+0x5a>
    3a5a:	4a 81       	ldd	r20, Y+2	; 0x02
    3a5c:	5b 81       	ldd	r21, Y+3	; 0x03
    3a5e:	9e 01       	movw	r18, r28
    3a60:	41 15       	cp	r20, r1
    3a62:	51 05       	cpc	r21, r1
    3a64:	f1 f0       	breq	.+60     	; 0x3aa2 <free+0x92>
    3a66:	ea 01       	movw	r28, r20
    3a68:	f5 cf       	rjmp	.-22     	; 0x3a54 <free+0x44>
    3a6a:	d3 83       	std	Z+3, r29	; 0x03
    3a6c:	c2 83       	std	Z+2, r28	; 0x02
    3a6e:	40 81       	ld	r20, Z
    3a70:	51 81       	ldd	r21, Z+1	; 0x01
    3a72:	84 0f       	add	r24, r20
    3a74:	95 1f       	adc	r25, r21
    3a76:	c8 17       	cp	r28, r24
    3a78:	d9 07       	cpc	r29, r25
    3a7a:	59 f4       	brne	.+22     	; 0x3a92 <free+0x82>
    3a7c:	88 81       	ld	r24, Y
    3a7e:	99 81       	ldd	r25, Y+1	; 0x01
    3a80:	84 0f       	add	r24, r20
    3a82:	95 1f       	adc	r25, r21
    3a84:	02 96       	adiw	r24, 0x02	; 2
    3a86:	91 83       	std	Z+1, r25	; 0x01
    3a88:	80 83       	st	Z, r24
    3a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a8c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a8e:	93 83       	std	Z+3, r25	; 0x03
    3a90:	82 83       	std	Z+2, r24	; 0x02
    3a92:	21 15       	cp	r18, r1
    3a94:	31 05       	cpc	r19, r1
    3a96:	29 f4       	brne	.+10     	; 0x3aa2 <free+0x92>
    3a98:	f0 93 ad 06 	sts	0x06AD, r31	; 0x8006ad <__flp+0x1>
    3a9c:	e0 93 ac 06 	sts	0x06AC, r30	; 0x8006ac <__flp>
    3aa0:	3d c0       	rjmp	.+122    	; 0x3b1c <free+0x10c>
    3aa2:	e9 01       	movw	r28, r18
    3aa4:	fb 83       	std	Y+3, r31	; 0x03
    3aa6:	ea 83       	std	Y+2, r30	; 0x02
    3aa8:	49 91       	ld	r20, Y+
    3aaa:	59 91       	ld	r21, Y+
    3aac:	c4 0f       	add	r28, r20
    3aae:	d5 1f       	adc	r29, r21
    3ab0:	ec 17       	cp	r30, r28
    3ab2:	fd 07       	cpc	r31, r29
    3ab4:	61 f4       	brne	.+24     	; 0x3ace <free+0xbe>
    3ab6:	80 81       	ld	r24, Z
    3ab8:	91 81       	ldd	r25, Z+1	; 0x01
    3aba:	84 0f       	add	r24, r20
    3abc:	95 1f       	adc	r25, r21
    3abe:	02 96       	adiw	r24, 0x02	; 2
    3ac0:	e9 01       	movw	r28, r18
    3ac2:	99 83       	std	Y+1, r25	; 0x01
    3ac4:	88 83       	st	Y, r24
    3ac6:	82 81       	ldd	r24, Z+2	; 0x02
    3ac8:	93 81       	ldd	r25, Z+3	; 0x03
    3aca:	9b 83       	std	Y+3, r25	; 0x03
    3acc:	8a 83       	std	Y+2, r24	; 0x02
    3ace:	e0 e0       	ldi	r30, 0x00	; 0
    3ad0:	f0 e0       	ldi	r31, 0x00	; 0
    3ad2:	12 96       	adiw	r26, 0x02	; 2
    3ad4:	8d 91       	ld	r24, X+
    3ad6:	9c 91       	ld	r25, X
    3ad8:	13 97       	sbiw	r26, 0x03	; 3
    3ada:	00 97       	sbiw	r24, 0x00	; 0
    3adc:	19 f0       	breq	.+6      	; 0x3ae4 <free+0xd4>
    3ade:	fd 01       	movw	r30, r26
    3ae0:	dc 01       	movw	r26, r24
    3ae2:	f7 cf       	rjmp	.-18     	; 0x3ad2 <free+0xc2>
    3ae4:	8d 91       	ld	r24, X+
    3ae6:	9c 91       	ld	r25, X
    3ae8:	11 97       	sbiw	r26, 0x01	; 1
    3aea:	9d 01       	movw	r18, r26
    3aec:	2e 5f       	subi	r18, 0xFE	; 254
    3aee:	3f 4f       	sbci	r19, 0xFF	; 255
    3af0:	82 0f       	add	r24, r18
    3af2:	93 1f       	adc	r25, r19
    3af4:	20 91 aa 06 	lds	r18, 0x06AA	; 0x8006aa <__brkval>
    3af8:	30 91 ab 06 	lds	r19, 0x06AB	; 0x8006ab <__brkval+0x1>
    3afc:	28 17       	cp	r18, r24
    3afe:	39 07       	cpc	r19, r25
    3b00:	69 f4       	brne	.+26     	; 0x3b1c <free+0x10c>
    3b02:	30 97       	sbiw	r30, 0x00	; 0
    3b04:	29 f4       	brne	.+10     	; 0x3b10 <free+0x100>
    3b06:	10 92 ad 06 	sts	0x06AD, r1	; 0x8006ad <__flp+0x1>
    3b0a:	10 92 ac 06 	sts	0x06AC, r1	; 0x8006ac <__flp>
    3b0e:	02 c0       	rjmp	.+4      	; 0x3b14 <free+0x104>
    3b10:	13 82       	std	Z+3, r1	; 0x03
    3b12:	12 82       	std	Z+2, r1	; 0x02
    3b14:	b0 93 ab 06 	sts	0x06AB, r27	; 0x8006ab <__brkval+0x1>
    3b18:	a0 93 aa 06 	sts	0x06AA, r26	; 0x8006aa <__brkval>
    3b1c:	df 91       	pop	r29
    3b1e:	cf 91       	pop	r28
    3b20:	08 95       	ret

00003b22 <realloc>:
    3b22:	6f 92       	push	r6
    3b24:	7f 92       	push	r7
    3b26:	8f 92       	push	r8
    3b28:	9f 92       	push	r9
    3b2a:	af 92       	push	r10
    3b2c:	bf 92       	push	r11
    3b2e:	cf 92       	push	r12
    3b30:	df 92       	push	r13
    3b32:	ef 92       	push	r14
    3b34:	ff 92       	push	r15
    3b36:	0f 93       	push	r16
    3b38:	1f 93       	push	r17
    3b3a:	cf 93       	push	r28
    3b3c:	df 93       	push	r29
    3b3e:	00 97       	sbiw	r24, 0x00	; 0
    3b40:	81 f4       	brne	.+32     	; 0x3b62 <realloc+0x40>
    3b42:	cb 01       	movw	r24, r22
    3b44:	df 91       	pop	r29
    3b46:	cf 91       	pop	r28
    3b48:	1f 91       	pop	r17
    3b4a:	0f 91       	pop	r16
    3b4c:	ff 90       	pop	r15
    3b4e:	ef 90       	pop	r14
    3b50:	df 90       	pop	r13
    3b52:	cf 90       	pop	r12
    3b54:	bf 90       	pop	r11
    3b56:	af 90       	pop	r10
    3b58:	9f 90       	pop	r9
    3b5a:	8f 90       	pop	r8
    3b5c:	7f 90       	pop	r7
    3b5e:	6f 90       	pop	r6
    3b60:	bf ce       	rjmp	.-642    	; 0x38e0 <malloc>
    3b62:	fc 01       	movw	r30, r24
    3b64:	e6 0f       	add	r30, r22
    3b66:	f7 1f       	adc	r31, r23
    3b68:	9c 01       	movw	r18, r24
    3b6a:	22 50       	subi	r18, 0x02	; 2
    3b6c:	31 09       	sbc	r19, r1
    3b6e:	e2 17       	cp	r30, r18
    3b70:	f3 07       	cpc	r31, r19
    3b72:	08 f4       	brcc	.+2      	; 0x3b76 <realloc+0x54>
    3b74:	a5 c0       	rjmp	.+330    	; 0x3cc0 <realloc+0x19e>
    3b76:	ec 01       	movw	r28, r24
    3b78:	d9 01       	movw	r26, r18
    3b7a:	0d 91       	ld	r16, X+
    3b7c:	1c 91       	ld	r17, X
    3b7e:	11 97       	sbiw	r26, 0x01	; 1
    3b80:	06 17       	cp	r16, r22
    3b82:	17 07       	cpc	r17, r23
    3b84:	a8 f0       	brcs	.+42     	; 0x3bb0 <realloc+0x8e>
    3b86:	05 30       	cpi	r16, 0x05	; 5
    3b88:	11 05       	cpc	r17, r1
    3b8a:	08 f4       	brcc	.+2      	; 0x3b8e <realloc+0x6c>
    3b8c:	97 c0       	rjmp	.+302    	; 0x3cbc <realloc+0x19a>
    3b8e:	c8 01       	movw	r24, r16
    3b90:	04 97       	sbiw	r24, 0x04	; 4
    3b92:	86 17       	cp	r24, r22
    3b94:	97 07       	cpc	r25, r23
    3b96:	08 f4       	brcc	.+2      	; 0x3b9a <realloc+0x78>
    3b98:	91 c0       	rjmp	.+290    	; 0x3cbc <realloc+0x19a>
    3b9a:	02 50       	subi	r16, 0x02	; 2
    3b9c:	11 09       	sbc	r17, r1
    3b9e:	06 1b       	sub	r16, r22
    3ba0:	17 0b       	sbc	r17, r23
    3ba2:	01 93       	st	Z+, r16
    3ba4:	11 93       	st	Z+, r17
    3ba6:	6d 93       	st	X+, r22
    3ba8:	7c 93       	st	X, r23
    3baa:	cf 01       	movw	r24, r30
    3bac:	31 df       	rcall	.-414    	; 0x3a10 <free>
    3bae:	86 c0       	rjmp	.+268    	; 0x3cbc <realloc+0x19a>
    3bb0:	5b 01       	movw	r10, r22
    3bb2:	a0 1a       	sub	r10, r16
    3bb4:	b1 0a       	sbc	r11, r17
    3bb6:	4c 01       	movw	r8, r24
    3bb8:	80 0e       	add	r8, r16
    3bba:	91 1e       	adc	r9, r17
    3bbc:	a0 91 ac 06 	lds	r26, 0x06AC	; 0x8006ac <__flp>
    3bc0:	b0 91 ad 06 	lds	r27, 0x06AD	; 0x8006ad <__flp+0x1>
    3bc4:	61 2c       	mov	r6, r1
    3bc6:	71 2c       	mov	r7, r1
    3bc8:	e1 2c       	mov	r14, r1
    3bca:	f1 2c       	mov	r15, r1
    3bcc:	10 97       	sbiw	r26, 0x00	; 0
    3bce:	09 f4       	brne	.+2      	; 0x3bd2 <realloc+0xb0>
    3bd0:	46 c0       	rjmp	.+140    	; 0x3c5e <realloc+0x13c>
    3bd2:	8d 91       	ld	r24, X+
    3bd4:	9c 91       	ld	r25, X
    3bd6:	11 97       	sbiw	r26, 0x01	; 1
    3bd8:	a8 15       	cp	r26, r8
    3bda:	b9 05       	cpc	r27, r9
    3bdc:	b1 f5       	brne	.+108    	; 0x3c4a <realloc+0x128>
    3bde:	6c 01       	movw	r12, r24
    3be0:	42 e0       	ldi	r20, 0x02	; 2
    3be2:	c4 0e       	add	r12, r20
    3be4:	d1 1c       	adc	r13, r1
    3be6:	ca 14       	cp	r12, r10
    3be8:	db 04       	cpc	r13, r11
    3bea:	78 f1       	brcs	.+94     	; 0x3c4a <realloc+0x128>
    3bec:	4c 01       	movw	r8, r24
    3bee:	8a 18       	sub	r8, r10
    3bf0:	9b 08       	sbc	r9, r11
    3bf2:	64 01       	movw	r12, r8
    3bf4:	42 e0       	ldi	r20, 0x02	; 2
    3bf6:	c4 0e       	add	r12, r20
    3bf8:	d1 1c       	adc	r13, r1
    3bfa:	12 96       	adiw	r26, 0x02	; 2
    3bfc:	bc 90       	ld	r11, X
    3bfe:	12 97       	sbiw	r26, 0x02	; 2
    3c00:	13 96       	adiw	r26, 0x03	; 3
    3c02:	ac 91       	ld	r26, X
    3c04:	b5 e0       	ldi	r27, 0x05	; 5
    3c06:	cb 16       	cp	r12, r27
    3c08:	d1 04       	cpc	r13, r1
    3c0a:	40 f0       	brcs	.+16     	; 0x3c1c <realloc+0xfa>
    3c0c:	b2 82       	std	Z+2, r11	; 0x02
    3c0e:	a3 83       	std	Z+3, r26	; 0x03
    3c10:	91 82       	std	Z+1, r9	; 0x01
    3c12:	80 82       	st	Z, r8
    3c14:	d9 01       	movw	r26, r18
    3c16:	6d 93       	st	X+, r22
    3c18:	7c 93       	st	X, r23
    3c1a:	09 c0       	rjmp	.+18     	; 0x3c2e <realloc+0x10c>
    3c1c:	0e 5f       	subi	r16, 0xFE	; 254
    3c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c20:	80 0f       	add	r24, r16
    3c22:	91 1f       	adc	r25, r17
    3c24:	f9 01       	movw	r30, r18
    3c26:	91 83       	std	Z+1, r25	; 0x01
    3c28:	80 83       	st	Z, r24
    3c2a:	eb 2d       	mov	r30, r11
    3c2c:	fa 2f       	mov	r31, r26
    3c2e:	e1 14       	cp	r14, r1
    3c30:	f1 04       	cpc	r15, r1
    3c32:	31 f0       	breq	.+12     	; 0x3c40 <realloc+0x11e>
    3c34:	d7 01       	movw	r26, r14
    3c36:	13 96       	adiw	r26, 0x03	; 3
    3c38:	fc 93       	st	X, r31
    3c3a:	ee 93       	st	-X, r30
    3c3c:	12 97       	sbiw	r26, 0x02	; 2
    3c3e:	3e c0       	rjmp	.+124    	; 0x3cbc <realloc+0x19a>
    3c40:	f0 93 ad 06 	sts	0x06AD, r31	; 0x8006ad <__flp+0x1>
    3c44:	e0 93 ac 06 	sts	0x06AC, r30	; 0x8006ac <__flp>
    3c48:	39 c0       	rjmp	.+114    	; 0x3cbc <realloc+0x19a>
    3c4a:	68 16       	cp	r6, r24
    3c4c:	79 06       	cpc	r7, r25
    3c4e:	08 f4       	brcc	.+2      	; 0x3c52 <realloc+0x130>
    3c50:	3c 01       	movw	r6, r24
    3c52:	7d 01       	movw	r14, r26
    3c54:	12 96       	adiw	r26, 0x02	; 2
    3c56:	0d 90       	ld	r0, X+
    3c58:	bc 91       	ld	r27, X
    3c5a:	a0 2d       	mov	r26, r0
    3c5c:	b7 cf       	rjmp	.-146    	; 0x3bcc <realloc+0xaa>
    3c5e:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <__brkval>
    3c62:	90 91 ab 06 	lds	r25, 0x06AB	; 0x8006ab <__brkval+0x1>
    3c66:	88 16       	cp	r8, r24
    3c68:	99 06       	cpc	r9, r25
    3c6a:	e1 f4       	brne	.+56     	; 0x3ca4 <realloc+0x182>
    3c6c:	66 16       	cp	r6, r22
    3c6e:	77 06       	cpc	r7, r23
    3c70:	c8 f4       	brcc	.+50     	; 0x3ca4 <realloc+0x182>
    3c72:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    3c76:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    3c7a:	00 97       	sbiw	r24, 0x00	; 0
    3c7c:	41 f4       	brne	.+16     	; 0x3c8e <realloc+0x16c>
    3c7e:	8d b7       	in	r24, 0x3d	; 61
    3c80:	9e b7       	in	r25, 0x3e	; 62
    3c82:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3c86:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3c8a:	84 1b       	sub	r24, r20
    3c8c:	95 0b       	sbc	r25, r21
    3c8e:	e8 17       	cp	r30, r24
    3c90:	f9 07       	cpc	r31, r25
    3c92:	b0 f4       	brcc	.+44     	; 0x3cc0 <realloc+0x19e>
    3c94:	f0 93 ab 06 	sts	0x06AB, r31	; 0x8006ab <__brkval+0x1>
    3c98:	e0 93 aa 06 	sts	0x06AA, r30	; 0x8006aa <__brkval>
    3c9c:	f9 01       	movw	r30, r18
    3c9e:	71 83       	std	Z+1, r23	; 0x01
    3ca0:	60 83       	st	Z, r22
    3ca2:	0c c0       	rjmp	.+24     	; 0x3cbc <realloc+0x19a>
    3ca4:	cb 01       	movw	r24, r22
    3ca6:	1c de       	rcall	.-968    	; 0x38e0 <malloc>
    3ca8:	7c 01       	movw	r14, r24
    3caa:	00 97       	sbiw	r24, 0x00	; 0
    3cac:	49 f0       	breq	.+18     	; 0x3cc0 <realloc+0x19e>
    3cae:	a8 01       	movw	r20, r16
    3cb0:	be 01       	movw	r22, r28
    3cb2:	1b d0       	rcall	.+54     	; 0x3cea <memcpy>
    3cb4:	ce 01       	movw	r24, r28
    3cb6:	ac de       	rcall	.-680    	; 0x3a10 <free>
    3cb8:	c7 01       	movw	r24, r14
    3cba:	04 c0       	rjmp	.+8      	; 0x3cc4 <realloc+0x1a2>
    3cbc:	ce 01       	movw	r24, r28
    3cbe:	02 c0       	rjmp	.+4      	; 0x3cc4 <realloc+0x1a2>
    3cc0:	80 e0       	ldi	r24, 0x00	; 0
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	df 91       	pop	r29
    3cc6:	cf 91       	pop	r28
    3cc8:	1f 91       	pop	r17
    3cca:	0f 91       	pop	r16
    3ccc:	ff 90       	pop	r15
    3cce:	ef 90       	pop	r14
    3cd0:	df 90       	pop	r13
    3cd2:	cf 90       	pop	r12
    3cd4:	bf 90       	pop	r11
    3cd6:	af 90       	pop	r10
    3cd8:	9f 90       	pop	r9
    3cda:	8f 90       	pop	r8
    3cdc:	7f 90       	pop	r7
    3cde:	6f 90       	pop	r6
    3ce0:	08 95       	ret

00003ce2 <abort>:
    3ce2:	81 e0       	ldi	r24, 0x01	; 1
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	f8 94       	cli
    3ce8:	5e c2       	rjmp	.+1212   	; 0x41a6 <__do_global_dtors>

00003cea <memcpy>:
    3cea:	fb 01       	movw	r30, r22
    3cec:	dc 01       	movw	r26, r24
    3cee:	02 c0       	rjmp	.+4      	; 0x3cf4 <memcpy+0xa>
    3cf0:	01 90       	ld	r0, Z+
    3cf2:	0d 92       	st	X+, r0
    3cf4:	41 50       	subi	r20, 0x01	; 1
    3cf6:	50 40       	sbci	r21, 0x00	; 0
    3cf8:	d8 f7       	brcc	.-10     	; 0x3cf0 <memcpy+0x6>
    3cfa:	08 95       	ret

00003cfc <strcpy>:
    3cfc:	fb 01       	movw	r30, r22
    3cfe:	dc 01       	movw	r26, r24
    3d00:	01 90       	ld	r0, Z+
    3d02:	0d 92       	st	X+, r0
    3d04:	00 20       	and	r0, r0
    3d06:	e1 f7       	brne	.-8      	; 0x3d00 <strcpy+0x4>
    3d08:	08 95       	ret

00003d0a <dtoa_prf>:
    3d0a:	8f 92       	push	r8
    3d0c:	9f 92       	push	r9
    3d0e:	af 92       	push	r10
    3d10:	bf 92       	push	r11
    3d12:	cf 92       	push	r12
    3d14:	df 92       	push	r13
    3d16:	ef 92       	push	r14
    3d18:	ff 92       	push	r15
    3d1a:	0f 93       	push	r16
    3d1c:	1f 93       	push	r17
    3d1e:	cf 93       	push	r28
    3d20:	df 93       	push	r29
    3d22:	cd b7       	in	r28, 0x3d	; 61
    3d24:	de b7       	in	r29, 0x3e	; 62
    3d26:	29 97       	sbiw	r28, 0x09	; 9
    3d28:	0f b6       	in	r0, 0x3f	; 63
    3d2a:	f8 94       	cli
    3d2c:	de bf       	out	0x3e, r29	; 62
    3d2e:	0f be       	out	0x3f, r0	; 63
    3d30:	cd bf       	out	0x3d, r28	; 61
    3d32:	6a 01       	movw	r12, r20
    3d34:	12 2f       	mov	r17, r18
    3d36:	b0 2e       	mov	r11, r16
    3d38:	2b e3       	ldi	r18, 0x3B	; 59
    3d3a:	20 17       	cp	r18, r16
    3d3c:	20 f0       	brcs	.+8      	; 0x3d46 <dtoa_prf+0x3c>
    3d3e:	ff 24       	eor	r15, r15
    3d40:	f3 94       	inc	r15
    3d42:	f0 0e       	add	r15, r16
    3d44:	02 c0       	rjmp	.+4      	; 0x3d4a <dtoa_prf+0x40>
    3d46:	2c e3       	ldi	r18, 0x3C	; 60
    3d48:	f2 2e       	mov	r15, r18
    3d4a:	0f 2d       	mov	r16, r15
    3d4c:	27 e0       	ldi	r18, 0x07	; 7
    3d4e:	ae 01       	movw	r20, r28
    3d50:	4f 5f       	subi	r20, 0xFF	; 255
    3d52:	5f 4f       	sbci	r21, 0xFF	; 255
    3d54:	50 d1       	rcall	.+672    	; 0x3ff6 <__ftoa_engine>
    3d56:	bc 01       	movw	r22, r24
    3d58:	49 81       	ldd	r20, Y+1	; 0x01
    3d5a:	84 2f       	mov	r24, r20
    3d5c:	89 70       	andi	r24, 0x09	; 9
    3d5e:	81 30       	cpi	r24, 0x01	; 1
    3d60:	31 f0       	breq	.+12     	; 0x3d6e <dtoa_prf+0x64>
    3d62:	e1 fc       	sbrc	r14, 1
    3d64:	06 c0       	rjmp	.+12     	; 0x3d72 <dtoa_prf+0x68>
    3d66:	e0 fe       	sbrs	r14, 0
    3d68:	06 c0       	rjmp	.+12     	; 0x3d76 <dtoa_prf+0x6c>
    3d6a:	90 e2       	ldi	r25, 0x20	; 32
    3d6c:	05 c0       	rjmp	.+10     	; 0x3d78 <dtoa_prf+0x6e>
    3d6e:	9d e2       	ldi	r25, 0x2D	; 45
    3d70:	03 c0       	rjmp	.+6      	; 0x3d78 <dtoa_prf+0x6e>
    3d72:	9b e2       	ldi	r25, 0x2B	; 43
    3d74:	01 c0       	rjmp	.+2      	; 0x3d78 <dtoa_prf+0x6e>
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	5e 2d       	mov	r21, r14
    3d7a:	50 71       	andi	r21, 0x10	; 16
    3d7c:	43 ff       	sbrs	r20, 3
    3d7e:	3c c0       	rjmp	.+120    	; 0x3df8 <dtoa_prf+0xee>
    3d80:	91 11       	cpse	r25, r1
    3d82:	02 c0       	rjmp	.+4      	; 0x3d88 <dtoa_prf+0x7e>
    3d84:	83 e0       	ldi	r24, 0x03	; 3
    3d86:	01 c0       	rjmp	.+2      	; 0x3d8a <dtoa_prf+0x80>
    3d88:	84 e0       	ldi	r24, 0x04	; 4
    3d8a:	81 17       	cp	r24, r17
    3d8c:	18 f4       	brcc	.+6      	; 0x3d94 <dtoa_prf+0x8a>
    3d8e:	21 2f       	mov	r18, r17
    3d90:	28 1b       	sub	r18, r24
    3d92:	01 c0       	rjmp	.+2      	; 0x3d96 <dtoa_prf+0x8c>
    3d94:	20 e0       	ldi	r18, 0x00	; 0
    3d96:	51 11       	cpse	r21, r1
    3d98:	0b c0       	rjmp	.+22     	; 0x3db0 <dtoa_prf+0xa6>
    3d9a:	f6 01       	movw	r30, r12
    3d9c:	82 2f       	mov	r24, r18
    3d9e:	30 e2       	ldi	r19, 0x20	; 32
    3da0:	88 23       	and	r24, r24
    3da2:	19 f0       	breq	.+6      	; 0x3daa <dtoa_prf+0xa0>
    3da4:	31 93       	st	Z+, r19
    3da6:	81 50       	subi	r24, 0x01	; 1
    3da8:	fb cf       	rjmp	.-10     	; 0x3da0 <dtoa_prf+0x96>
    3daa:	c2 0e       	add	r12, r18
    3dac:	d1 1c       	adc	r13, r1
    3dae:	20 e0       	ldi	r18, 0x00	; 0
    3db0:	99 23       	and	r25, r25
    3db2:	29 f0       	breq	.+10     	; 0x3dbe <dtoa_prf+0xb4>
    3db4:	d6 01       	movw	r26, r12
    3db6:	9c 93       	st	X, r25
    3db8:	f6 01       	movw	r30, r12
    3dba:	31 96       	adiw	r30, 0x01	; 1
    3dbc:	6f 01       	movw	r12, r30
    3dbe:	c6 01       	movw	r24, r12
    3dc0:	03 96       	adiw	r24, 0x03	; 3
    3dc2:	e2 fe       	sbrs	r14, 2
    3dc4:	0a c0       	rjmp	.+20     	; 0x3dda <dtoa_prf+0xd0>
    3dc6:	3e e4       	ldi	r19, 0x4E	; 78
    3dc8:	d6 01       	movw	r26, r12
    3dca:	3c 93       	st	X, r19
    3dcc:	41 e4       	ldi	r20, 0x41	; 65
    3dce:	11 96       	adiw	r26, 0x01	; 1
    3dd0:	4c 93       	st	X, r20
    3dd2:	11 97       	sbiw	r26, 0x01	; 1
    3dd4:	12 96       	adiw	r26, 0x02	; 2
    3dd6:	3c 93       	st	X, r19
    3dd8:	06 c0       	rjmp	.+12     	; 0x3de6 <dtoa_prf+0xdc>
    3dda:	3e e6       	ldi	r19, 0x6E	; 110
    3ddc:	f6 01       	movw	r30, r12
    3dde:	30 83       	st	Z, r19
    3de0:	41 e6       	ldi	r20, 0x61	; 97
    3de2:	41 83       	std	Z+1, r20	; 0x01
    3de4:	32 83       	std	Z+2, r19	; 0x02
    3de6:	fc 01       	movw	r30, r24
    3de8:	32 2f       	mov	r19, r18
    3dea:	40 e2       	ldi	r20, 0x20	; 32
    3dec:	33 23       	and	r19, r19
    3dee:	09 f4       	brne	.+2      	; 0x3df2 <dtoa_prf+0xe8>
    3df0:	42 c0       	rjmp	.+132    	; 0x3e76 <dtoa_prf+0x16c>
    3df2:	41 93       	st	Z+, r20
    3df4:	31 50       	subi	r19, 0x01	; 1
    3df6:	fa cf       	rjmp	.-12     	; 0x3dec <dtoa_prf+0xe2>
    3df8:	42 ff       	sbrs	r20, 2
    3dfa:	44 c0       	rjmp	.+136    	; 0x3e84 <dtoa_prf+0x17a>
    3dfc:	91 11       	cpse	r25, r1
    3dfe:	02 c0       	rjmp	.+4      	; 0x3e04 <dtoa_prf+0xfa>
    3e00:	83 e0       	ldi	r24, 0x03	; 3
    3e02:	01 c0       	rjmp	.+2      	; 0x3e06 <dtoa_prf+0xfc>
    3e04:	84 e0       	ldi	r24, 0x04	; 4
    3e06:	81 17       	cp	r24, r17
    3e08:	18 f4       	brcc	.+6      	; 0x3e10 <dtoa_prf+0x106>
    3e0a:	21 2f       	mov	r18, r17
    3e0c:	28 1b       	sub	r18, r24
    3e0e:	01 c0       	rjmp	.+2      	; 0x3e12 <dtoa_prf+0x108>
    3e10:	20 e0       	ldi	r18, 0x00	; 0
    3e12:	51 11       	cpse	r21, r1
    3e14:	0b c0       	rjmp	.+22     	; 0x3e2c <dtoa_prf+0x122>
    3e16:	f6 01       	movw	r30, r12
    3e18:	82 2f       	mov	r24, r18
    3e1a:	30 e2       	ldi	r19, 0x20	; 32
    3e1c:	88 23       	and	r24, r24
    3e1e:	19 f0       	breq	.+6      	; 0x3e26 <dtoa_prf+0x11c>
    3e20:	31 93       	st	Z+, r19
    3e22:	81 50       	subi	r24, 0x01	; 1
    3e24:	fb cf       	rjmp	.-10     	; 0x3e1c <dtoa_prf+0x112>
    3e26:	c2 0e       	add	r12, r18
    3e28:	d1 1c       	adc	r13, r1
    3e2a:	20 e0       	ldi	r18, 0x00	; 0
    3e2c:	99 23       	and	r25, r25
    3e2e:	29 f0       	breq	.+10     	; 0x3e3a <dtoa_prf+0x130>
    3e30:	d6 01       	movw	r26, r12
    3e32:	9c 93       	st	X, r25
    3e34:	f6 01       	movw	r30, r12
    3e36:	31 96       	adiw	r30, 0x01	; 1
    3e38:	6f 01       	movw	r12, r30
    3e3a:	c6 01       	movw	r24, r12
    3e3c:	03 96       	adiw	r24, 0x03	; 3
    3e3e:	e2 fe       	sbrs	r14, 2
    3e40:	0b c0       	rjmp	.+22     	; 0x3e58 <dtoa_prf+0x14e>
    3e42:	39 e4       	ldi	r19, 0x49	; 73
    3e44:	d6 01       	movw	r26, r12
    3e46:	3c 93       	st	X, r19
    3e48:	3e e4       	ldi	r19, 0x4E	; 78
    3e4a:	11 96       	adiw	r26, 0x01	; 1
    3e4c:	3c 93       	st	X, r19
    3e4e:	11 97       	sbiw	r26, 0x01	; 1
    3e50:	36 e4       	ldi	r19, 0x46	; 70
    3e52:	12 96       	adiw	r26, 0x02	; 2
    3e54:	3c 93       	st	X, r19
    3e56:	07 c0       	rjmp	.+14     	; 0x3e66 <dtoa_prf+0x15c>
    3e58:	39 e6       	ldi	r19, 0x69	; 105
    3e5a:	f6 01       	movw	r30, r12
    3e5c:	30 83       	st	Z, r19
    3e5e:	3e e6       	ldi	r19, 0x6E	; 110
    3e60:	31 83       	std	Z+1, r19	; 0x01
    3e62:	36 e6       	ldi	r19, 0x66	; 102
    3e64:	32 83       	std	Z+2, r19	; 0x02
    3e66:	fc 01       	movw	r30, r24
    3e68:	32 2f       	mov	r19, r18
    3e6a:	40 e2       	ldi	r20, 0x20	; 32
    3e6c:	33 23       	and	r19, r19
    3e6e:	19 f0       	breq	.+6      	; 0x3e76 <dtoa_prf+0x16c>
    3e70:	41 93       	st	Z+, r20
    3e72:	31 50       	subi	r19, 0x01	; 1
    3e74:	fb cf       	rjmp	.-10     	; 0x3e6c <dtoa_prf+0x162>
    3e76:	fc 01       	movw	r30, r24
    3e78:	e2 0f       	add	r30, r18
    3e7a:	f1 1d       	adc	r31, r1
    3e7c:	10 82       	st	Z, r1
    3e7e:	8e ef       	ldi	r24, 0xFE	; 254
    3e80:	9f ef       	ldi	r25, 0xFF	; 255
    3e82:	a6 c0       	rjmp	.+332    	; 0x3fd0 <dtoa_prf+0x2c6>
    3e84:	21 e0       	ldi	r18, 0x01	; 1
    3e86:	30 e0       	ldi	r19, 0x00	; 0
    3e88:	91 11       	cpse	r25, r1
    3e8a:	02 c0       	rjmp	.+4      	; 0x3e90 <dtoa_prf+0x186>
    3e8c:	20 e0       	ldi	r18, 0x00	; 0
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	16 16       	cp	r1, r22
    3e92:	17 06       	cpc	r1, r23
    3e94:	1c f4       	brge	.+6      	; 0x3e9c <dtoa_prf+0x192>
    3e96:	fb 01       	movw	r30, r22
    3e98:	31 96       	adiw	r30, 0x01	; 1
    3e9a:	02 c0       	rjmp	.+4      	; 0x3ea0 <dtoa_prf+0x196>
    3e9c:	e1 e0       	ldi	r30, 0x01	; 1
    3e9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ea0:	2e 0f       	add	r18, r30
    3ea2:	3f 1f       	adc	r19, r31
    3ea4:	bb 20       	and	r11, r11
    3ea6:	21 f0       	breq	.+8      	; 0x3eb0 <dtoa_prf+0x1a6>
    3ea8:	eb 2d       	mov	r30, r11
    3eaa:	f0 e0       	ldi	r31, 0x00	; 0
    3eac:	31 96       	adiw	r30, 0x01	; 1
    3eae:	02 c0       	rjmp	.+4      	; 0x3eb4 <dtoa_prf+0x1aa>
    3eb0:	e0 e0       	ldi	r30, 0x00	; 0
    3eb2:	f0 e0       	ldi	r31, 0x00	; 0
    3eb4:	2e 0f       	add	r18, r30
    3eb6:	3f 1f       	adc	r19, r31
    3eb8:	e1 2f       	mov	r30, r17
    3eba:	f0 e0       	ldi	r31, 0x00	; 0
    3ebc:	2e 17       	cp	r18, r30
    3ebe:	3f 07       	cpc	r19, r31
    3ec0:	1c f4       	brge	.+6      	; 0x3ec8 <dtoa_prf+0x1be>
    3ec2:	12 1b       	sub	r17, r18
    3ec4:	21 2f       	mov	r18, r17
    3ec6:	01 c0       	rjmp	.+2      	; 0x3eca <dtoa_prf+0x1c0>
    3ec8:	20 e0       	ldi	r18, 0x00	; 0
    3eca:	8e 2d       	mov	r24, r14
    3ecc:	88 71       	andi	r24, 0x18	; 24
    3ece:	59 f4       	brne	.+22     	; 0x3ee6 <dtoa_prf+0x1dc>
    3ed0:	f6 01       	movw	r30, r12
    3ed2:	82 2f       	mov	r24, r18
    3ed4:	30 e2       	ldi	r19, 0x20	; 32
    3ed6:	88 23       	and	r24, r24
    3ed8:	19 f0       	breq	.+6      	; 0x3ee0 <dtoa_prf+0x1d6>
    3eda:	31 93       	st	Z+, r19
    3edc:	81 50       	subi	r24, 0x01	; 1
    3ede:	fb cf       	rjmp	.-10     	; 0x3ed6 <dtoa_prf+0x1cc>
    3ee0:	c2 0e       	add	r12, r18
    3ee2:	d1 1c       	adc	r13, r1
    3ee4:	20 e0       	ldi	r18, 0x00	; 0
    3ee6:	99 23       	and	r25, r25
    3ee8:	29 f0       	breq	.+10     	; 0x3ef4 <dtoa_prf+0x1ea>
    3eea:	d6 01       	movw	r26, r12
    3eec:	9c 93       	st	X, r25
    3eee:	f6 01       	movw	r30, r12
    3ef0:	31 96       	adiw	r30, 0x01	; 1
    3ef2:	6f 01       	movw	r12, r30
    3ef4:	51 11       	cpse	r21, r1
    3ef6:	0b c0       	rjmp	.+22     	; 0x3f0e <dtoa_prf+0x204>
    3ef8:	f6 01       	movw	r30, r12
    3efa:	82 2f       	mov	r24, r18
    3efc:	90 e3       	ldi	r25, 0x30	; 48
    3efe:	88 23       	and	r24, r24
    3f00:	19 f0       	breq	.+6      	; 0x3f08 <dtoa_prf+0x1fe>
    3f02:	91 93       	st	Z+, r25
    3f04:	81 50       	subi	r24, 0x01	; 1
    3f06:	fb cf       	rjmp	.-10     	; 0x3efe <dtoa_prf+0x1f4>
    3f08:	c2 0e       	add	r12, r18
    3f0a:	d1 1c       	adc	r13, r1
    3f0c:	20 e0       	ldi	r18, 0x00	; 0
    3f0e:	0f 2d       	mov	r16, r15
    3f10:	06 0f       	add	r16, r22
    3f12:	9a 81       	ldd	r25, Y+2	; 0x02
    3f14:	34 2f       	mov	r19, r20
    3f16:	30 71       	andi	r19, 0x10	; 16
    3f18:	44 ff       	sbrs	r20, 4
    3f1a:	03 c0       	rjmp	.+6      	; 0x3f22 <dtoa_prf+0x218>
    3f1c:	91 33       	cpi	r25, 0x31	; 49
    3f1e:	09 f4       	brne	.+2      	; 0x3f22 <dtoa_prf+0x218>
    3f20:	01 50       	subi	r16, 0x01	; 1
    3f22:	10 16       	cp	r1, r16
    3f24:	24 f4       	brge	.+8      	; 0x3f2e <dtoa_prf+0x224>
    3f26:	09 30       	cpi	r16, 0x09	; 9
    3f28:	18 f0       	brcs	.+6      	; 0x3f30 <dtoa_prf+0x226>
    3f2a:	08 e0       	ldi	r16, 0x08	; 8
    3f2c:	01 c0       	rjmp	.+2      	; 0x3f30 <dtoa_prf+0x226>
    3f2e:	01 e0       	ldi	r16, 0x01	; 1
    3f30:	ab 01       	movw	r20, r22
    3f32:	77 ff       	sbrs	r23, 7
    3f34:	02 c0       	rjmp	.+4      	; 0x3f3a <dtoa_prf+0x230>
    3f36:	40 e0       	ldi	r20, 0x00	; 0
    3f38:	50 e0       	ldi	r21, 0x00	; 0
    3f3a:	fb 01       	movw	r30, r22
    3f3c:	e4 1b       	sub	r30, r20
    3f3e:	f5 0b       	sbc	r31, r21
    3f40:	a1 e0       	ldi	r26, 0x01	; 1
    3f42:	b0 e0       	ldi	r27, 0x00	; 0
    3f44:	ac 0f       	add	r26, r28
    3f46:	bd 1f       	adc	r27, r29
    3f48:	ea 0f       	add	r30, r26
    3f4a:	fb 1f       	adc	r31, r27
    3f4c:	8e e2       	ldi	r24, 0x2E	; 46
    3f4e:	a8 2e       	mov	r10, r24
    3f50:	4b 01       	movw	r8, r22
    3f52:	80 1a       	sub	r8, r16
    3f54:	91 08       	sbc	r9, r1
    3f56:	0b 2d       	mov	r16, r11
    3f58:	10 e0       	ldi	r17, 0x00	; 0
    3f5a:	11 95       	neg	r17
    3f5c:	01 95       	neg	r16
    3f5e:	11 09       	sbc	r17, r1
    3f60:	4f 3f       	cpi	r20, 0xFF	; 255
    3f62:	bf ef       	ldi	r27, 0xFF	; 255
    3f64:	5b 07       	cpc	r21, r27
    3f66:	21 f4       	brne	.+8      	; 0x3f70 <dtoa_prf+0x266>
    3f68:	d6 01       	movw	r26, r12
    3f6a:	ac 92       	st	X, r10
    3f6c:	11 96       	adiw	r26, 0x01	; 1
    3f6e:	6d 01       	movw	r12, r26
    3f70:	64 17       	cp	r22, r20
    3f72:	75 07       	cpc	r23, r21
    3f74:	2c f0       	brlt	.+10     	; 0x3f80 <dtoa_prf+0x276>
    3f76:	84 16       	cp	r8, r20
    3f78:	95 06       	cpc	r9, r21
    3f7a:	14 f4       	brge	.+4      	; 0x3f80 <dtoa_prf+0x276>
    3f7c:	81 81       	ldd	r24, Z+1	; 0x01
    3f7e:	01 c0       	rjmp	.+2      	; 0x3f82 <dtoa_prf+0x278>
    3f80:	80 e3       	ldi	r24, 0x30	; 48
    3f82:	41 50       	subi	r20, 0x01	; 1
    3f84:	51 09       	sbc	r21, r1
    3f86:	31 96       	adiw	r30, 0x01	; 1
    3f88:	d6 01       	movw	r26, r12
    3f8a:	11 96       	adiw	r26, 0x01	; 1
    3f8c:	7d 01       	movw	r14, r26
    3f8e:	40 17       	cp	r20, r16
    3f90:	51 07       	cpc	r21, r17
    3f92:	24 f0       	brlt	.+8      	; 0x3f9c <dtoa_prf+0x292>
    3f94:	d6 01       	movw	r26, r12
    3f96:	8c 93       	st	X, r24
    3f98:	67 01       	movw	r12, r14
    3f9a:	e2 cf       	rjmp	.-60     	; 0x3f60 <dtoa_prf+0x256>
    3f9c:	64 17       	cp	r22, r20
    3f9e:	75 07       	cpc	r23, r21
    3fa0:	39 f4       	brne	.+14     	; 0x3fb0 <dtoa_prf+0x2a6>
    3fa2:	96 33       	cpi	r25, 0x36	; 54
    3fa4:	20 f4       	brcc	.+8      	; 0x3fae <dtoa_prf+0x2a4>
    3fa6:	95 33       	cpi	r25, 0x35	; 53
    3fa8:	19 f4       	brne	.+6      	; 0x3fb0 <dtoa_prf+0x2a6>
    3faa:	31 11       	cpse	r19, r1
    3fac:	01 c0       	rjmp	.+2      	; 0x3fb0 <dtoa_prf+0x2a6>
    3fae:	81 e3       	ldi	r24, 0x31	; 49
    3fb0:	f6 01       	movw	r30, r12
    3fb2:	80 83       	st	Z, r24
    3fb4:	f7 01       	movw	r30, r14
    3fb6:	82 2f       	mov	r24, r18
    3fb8:	90 e2       	ldi	r25, 0x20	; 32
    3fba:	88 23       	and	r24, r24
    3fbc:	19 f0       	breq	.+6      	; 0x3fc4 <dtoa_prf+0x2ba>
    3fbe:	91 93       	st	Z+, r25
    3fc0:	81 50       	subi	r24, 0x01	; 1
    3fc2:	fb cf       	rjmp	.-10     	; 0x3fba <dtoa_prf+0x2b0>
    3fc4:	f7 01       	movw	r30, r14
    3fc6:	e2 0f       	add	r30, r18
    3fc8:	f1 1d       	adc	r31, r1
    3fca:	10 82       	st	Z, r1
    3fcc:	80 e0       	ldi	r24, 0x00	; 0
    3fce:	90 e0       	ldi	r25, 0x00	; 0
    3fd0:	29 96       	adiw	r28, 0x09	; 9
    3fd2:	0f b6       	in	r0, 0x3f	; 63
    3fd4:	f8 94       	cli
    3fd6:	de bf       	out	0x3e, r29	; 62
    3fd8:	0f be       	out	0x3f, r0	; 63
    3fda:	cd bf       	out	0x3d, r28	; 61
    3fdc:	df 91       	pop	r29
    3fde:	cf 91       	pop	r28
    3fe0:	1f 91       	pop	r17
    3fe2:	0f 91       	pop	r16
    3fe4:	ff 90       	pop	r15
    3fe6:	ef 90       	pop	r14
    3fe8:	df 90       	pop	r13
    3fea:	cf 90       	pop	r12
    3fec:	bf 90       	pop	r11
    3fee:	af 90       	pop	r10
    3ff0:	9f 90       	pop	r9
    3ff2:	8f 90       	pop	r8
    3ff4:	08 95       	ret

00003ff6 <__ftoa_engine>:
    3ff6:	28 30       	cpi	r18, 0x08	; 8
    3ff8:	08 f0       	brcs	.+2      	; 0x3ffc <__ftoa_engine+0x6>
    3ffa:	27 e0       	ldi	r18, 0x07	; 7
    3ffc:	33 27       	eor	r19, r19
    3ffe:	da 01       	movw	r26, r20
    4000:	99 0f       	add	r25, r25
    4002:	31 1d       	adc	r19, r1
    4004:	87 fd       	sbrc	r24, 7
    4006:	91 60       	ori	r25, 0x01	; 1
    4008:	00 96       	adiw	r24, 0x00	; 0
    400a:	61 05       	cpc	r22, r1
    400c:	71 05       	cpc	r23, r1
    400e:	39 f4       	brne	.+14     	; 0x401e <__ftoa_engine+0x28>
    4010:	32 60       	ori	r19, 0x02	; 2
    4012:	2e 5f       	subi	r18, 0xFE	; 254
    4014:	3d 93       	st	X+, r19
    4016:	30 e3       	ldi	r19, 0x30	; 48
    4018:	2a 95       	dec	r18
    401a:	e1 f7       	brne	.-8      	; 0x4014 <__ftoa_engine+0x1e>
    401c:	08 95       	ret
    401e:	9f 3f       	cpi	r25, 0xFF	; 255
    4020:	30 f0       	brcs	.+12     	; 0x402e <__ftoa_engine+0x38>
    4022:	80 38       	cpi	r24, 0x80	; 128
    4024:	71 05       	cpc	r23, r1
    4026:	61 05       	cpc	r22, r1
    4028:	09 f0       	breq	.+2      	; 0x402c <__ftoa_engine+0x36>
    402a:	3c 5f       	subi	r19, 0xFC	; 252
    402c:	3c 5f       	subi	r19, 0xFC	; 252
    402e:	3d 93       	st	X+, r19
    4030:	91 30       	cpi	r25, 0x01	; 1
    4032:	08 f0       	brcs	.+2      	; 0x4036 <__ftoa_engine+0x40>
    4034:	80 68       	ori	r24, 0x80	; 128
    4036:	91 1d       	adc	r25, r1
    4038:	df 93       	push	r29
    403a:	cf 93       	push	r28
    403c:	1f 93       	push	r17
    403e:	0f 93       	push	r16
    4040:	ff 92       	push	r15
    4042:	ef 92       	push	r14
    4044:	19 2f       	mov	r17, r25
    4046:	98 7f       	andi	r25, 0xF8	; 248
    4048:	96 95       	lsr	r25
    404a:	e9 2f       	mov	r30, r25
    404c:	96 95       	lsr	r25
    404e:	96 95       	lsr	r25
    4050:	e9 0f       	add	r30, r25
    4052:	ff 27       	eor	r31, r31
    4054:	ee 59       	subi	r30, 0x9E	; 158
    4056:	fe 4f       	sbci	r31, 0xFE	; 254
    4058:	99 27       	eor	r25, r25
    405a:	33 27       	eor	r19, r19
    405c:	ee 24       	eor	r14, r14
    405e:	ff 24       	eor	r15, r15
    4060:	a7 01       	movw	r20, r14
    4062:	e7 01       	movw	r28, r14
    4064:	05 90       	lpm	r0, Z+
    4066:	08 94       	sec
    4068:	07 94       	ror	r0
    406a:	28 f4       	brcc	.+10     	; 0x4076 <__ftoa_engine+0x80>
    406c:	36 0f       	add	r19, r22
    406e:	e7 1e       	adc	r14, r23
    4070:	f8 1e       	adc	r15, r24
    4072:	49 1f       	adc	r20, r25
    4074:	51 1d       	adc	r21, r1
    4076:	66 0f       	add	r22, r22
    4078:	77 1f       	adc	r23, r23
    407a:	88 1f       	adc	r24, r24
    407c:	99 1f       	adc	r25, r25
    407e:	06 94       	lsr	r0
    4080:	a1 f7       	brne	.-24     	; 0x406a <__ftoa_engine+0x74>
    4082:	05 90       	lpm	r0, Z+
    4084:	07 94       	ror	r0
    4086:	28 f4       	brcc	.+10     	; 0x4092 <__ftoa_engine+0x9c>
    4088:	e7 0e       	add	r14, r23
    408a:	f8 1e       	adc	r15, r24
    408c:	49 1f       	adc	r20, r25
    408e:	56 1f       	adc	r21, r22
    4090:	c1 1d       	adc	r28, r1
    4092:	77 0f       	add	r23, r23
    4094:	88 1f       	adc	r24, r24
    4096:	99 1f       	adc	r25, r25
    4098:	66 1f       	adc	r22, r22
    409a:	06 94       	lsr	r0
    409c:	a1 f7       	brne	.-24     	; 0x4086 <__ftoa_engine+0x90>
    409e:	05 90       	lpm	r0, Z+
    40a0:	07 94       	ror	r0
    40a2:	28 f4       	brcc	.+10     	; 0x40ae <__ftoa_engine+0xb8>
    40a4:	f8 0e       	add	r15, r24
    40a6:	49 1f       	adc	r20, r25
    40a8:	56 1f       	adc	r21, r22
    40aa:	c7 1f       	adc	r28, r23
    40ac:	d1 1d       	adc	r29, r1
    40ae:	88 0f       	add	r24, r24
    40b0:	99 1f       	adc	r25, r25
    40b2:	66 1f       	adc	r22, r22
    40b4:	77 1f       	adc	r23, r23
    40b6:	06 94       	lsr	r0
    40b8:	a1 f7       	brne	.-24     	; 0x40a2 <__ftoa_engine+0xac>
    40ba:	05 90       	lpm	r0, Z+
    40bc:	07 94       	ror	r0
    40be:	20 f4       	brcc	.+8      	; 0x40c8 <__ftoa_engine+0xd2>
    40c0:	49 0f       	add	r20, r25
    40c2:	56 1f       	adc	r21, r22
    40c4:	c7 1f       	adc	r28, r23
    40c6:	d8 1f       	adc	r29, r24
    40c8:	99 0f       	add	r25, r25
    40ca:	66 1f       	adc	r22, r22
    40cc:	77 1f       	adc	r23, r23
    40ce:	88 1f       	adc	r24, r24
    40d0:	06 94       	lsr	r0
    40d2:	a9 f7       	brne	.-22     	; 0x40be <__ftoa_engine+0xc8>
    40d4:	84 91       	lpm	r24, Z
    40d6:	10 95       	com	r17
    40d8:	17 70       	andi	r17, 0x07	; 7
    40da:	41 f0       	breq	.+16     	; 0x40ec <__ftoa_engine+0xf6>
    40dc:	d6 95       	lsr	r29
    40de:	c7 95       	ror	r28
    40e0:	57 95       	ror	r21
    40e2:	47 95       	ror	r20
    40e4:	f7 94       	ror	r15
    40e6:	e7 94       	ror	r14
    40e8:	1a 95       	dec	r17
    40ea:	c1 f7       	brne	.-16     	; 0x40dc <__ftoa_engine+0xe6>
    40ec:	e8 e0       	ldi	r30, 0x08	; 8
    40ee:	f1 e0       	ldi	r31, 0x01	; 1
    40f0:	68 94       	set
    40f2:	15 90       	lpm	r1, Z+
    40f4:	15 91       	lpm	r17, Z+
    40f6:	35 91       	lpm	r19, Z+
    40f8:	65 91       	lpm	r22, Z+
    40fa:	95 91       	lpm	r25, Z+
    40fc:	05 90       	lpm	r0, Z+
    40fe:	7f e2       	ldi	r23, 0x2F	; 47
    4100:	73 95       	inc	r23
    4102:	e1 18       	sub	r14, r1
    4104:	f1 0a       	sbc	r15, r17
    4106:	43 0b       	sbc	r20, r19
    4108:	56 0b       	sbc	r21, r22
    410a:	c9 0b       	sbc	r28, r25
    410c:	d0 09       	sbc	r29, r0
    410e:	c0 f7       	brcc	.-16     	; 0x4100 <__ftoa_engine+0x10a>
    4110:	e1 0c       	add	r14, r1
    4112:	f1 1e       	adc	r15, r17
    4114:	43 1f       	adc	r20, r19
    4116:	56 1f       	adc	r21, r22
    4118:	c9 1f       	adc	r28, r25
    411a:	d0 1d       	adc	r29, r0
    411c:	7e f4       	brtc	.+30     	; 0x413c <__ftoa_engine+0x146>
    411e:	70 33       	cpi	r23, 0x30	; 48
    4120:	11 f4       	brne	.+4      	; 0x4126 <__ftoa_engine+0x130>
    4122:	8a 95       	dec	r24
    4124:	e6 cf       	rjmp	.-52     	; 0x40f2 <__ftoa_engine+0xfc>
    4126:	e8 94       	clt
    4128:	01 50       	subi	r16, 0x01	; 1
    412a:	30 f0       	brcs	.+12     	; 0x4138 <__ftoa_engine+0x142>
    412c:	08 0f       	add	r16, r24
    412e:	0a f4       	brpl	.+2      	; 0x4132 <__ftoa_engine+0x13c>
    4130:	00 27       	eor	r16, r16
    4132:	02 17       	cp	r16, r18
    4134:	08 f4       	brcc	.+2      	; 0x4138 <__ftoa_engine+0x142>
    4136:	20 2f       	mov	r18, r16
    4138:	23 95       	inc	r18
    413a:	02 2f       	mov	r16, r18
    413c:	7a 33       	cpi	r23, 0x3A	; 58
    413e:	28 f0       	brcs	.+10     	; 0x414a <__ftoa_engine+0x154>
    4140:	79 e3       	ldi	r23, 0x39	; 57
    4142:	7d 93       	st	X+, r23
    4144:	2a 95       	dec	r18
    4146:	e9 f7       	brne	.-6      	; 0x4142 <__ftoa_engine+0x14c>
    4148:	10 c0       	rjmp	.+32     	; 0x416a <__ftoa_engine+0x174>
    414a:	7d 93       	st	X+, r23
    414c:	2a 95       	dec	r18
    414e:	89 f6       	brne	.-94     	; 0x40f2 <__ftoa_engine+0xfc>
    4150:	06 94       	lsr	r0
    4152:	97 95       	ror	r25
    4154:	67 95       	ror	r22
    4156:	37 95       	ror	r19
    4158:	17 95       	ror	r17
    415a:	17 94       	ror	r1
    415c:	e1 18       	sub	r14, r1
    415e:	f1 0a       	sbc	r15, r17
    4160:	43 0b       	sbc	r20, r19
    4162:	56 0b       	sbc	r21, r22
    4164:	c9 0b       	sbc	r28, r25
    4166:	d0 09       	sbc	r29, r0
    4168:	98 f0       	brcs	.+38     	; 0x4190 <__ftoa_engine+0x19a>
    416a:	23 95       	inc	r18
    416c:	7e 91       	ld	r23, -X
    416e:	73 95       	inc	r23
    4170:	7a 33       	cpi	r23, 0x3A	; 58
    4172:	08 f0       	brcs	.+2      	; 0x4176 <__ftoa_engine+0x180>
    4174:	70 e3       	ldi	r23, 0x30	; 48
    4176:	7c 93       	st	X, r23
    4178:	20 13       	cpse	r18, r16
    417a:	b8 f7       	brcc	.-18     	; 0x416a <__ftoa_engine+0x174>
    417c:	7e 91       	ld	r23, -X
    417e:	70 61       	ori	r23, 0x10	; 16
    4180:	7d 93       	st	X+, r23
    4182:	30 f0       	brcs	.+12     	; 0x4190 <__ftoa_engine+0x19a>
    4184:	83 95       	inc	r24
    4186:	71 e3       	ldi	r23, 0x31	; 49
    4188:	7d 93       	st	X+, r23
    418a:	70 e3       	ldi	r23, 0x30	; 48
    418c:	2a 95       	dec	r18
    418e:	e1 f7       	brne	.-8      	; 0x4188 <__ftoa_engine+0x192>
    4190:	11 24       	eor	r1, r1
    4192:	ef 90       	pop	r14
    4194:	ff 90       	pop	r15
    4196:	0f 91       	pop	r16
    4198:	1f 91       	pop	r17
    419a:	cf 91       	pop	r28
    419c:	df 91       	pop	r29
    419e:	99 27       	eor	r25, r25
    41a0:	87 fd       	sbrc	r24, 7
    41a2:	90 95       	com	r25
    41a4:	08 95       	ret

000041a6 <__do_global_dtors>:
    41a6:	14 e0       	ldi	r17, 0x04	; 4
    41a8:	cc e1       	ldi	r28, 0x1C	; 28
    41aa:	d4 e0       	ldi	r29, 0x04	; 4
    41ac:	00 e0       	ldi	r16, 0x00	; 0
    41ae:	05 c0       	rjmp	.+10     	; 0x41ba <__do_global_dtors+0x14>
    41b0:	80 2f       	mov	r24, r16
    41b2:	fe 01       	movw	r30, r28
    41b4:	6e db       	rcall	.-2340   	; 0x3892 <__tablejump2__>
    41b6:	21 96       	adiw	r28, 0x01	; 1
    41b8:	01 1d       	adc	r16, r1
    41ba:	cd 31       	cpi	r28, 0x1D	; 29
    41bc:	d1 07       	cpc	r29, r17
    41be:	80 e0       	ldi	r24, 0x00	; 0
    41c0:	08 07       	cpc	r16, r24
    41c2:	b1 f7       	brne	.-20     	; 0x41b0 <__do_global_dtors+0xa>
    41c4:	f8 94       	cli

000041c6 <__stop_program>:
    41c6:	ff cf       	rjmp	.-2      	; 0x41c6 <__stop_program>
