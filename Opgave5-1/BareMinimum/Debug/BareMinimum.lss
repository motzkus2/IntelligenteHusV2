
BareMinimum.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b2  00800200  00005f38  00005fcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005f38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000245  008004b2  008004b2  0000627e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000627e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000062b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000d70  00000000  00000000  000062f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00021409  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000047dc  00000000  00000000  00028469  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000910b  00000000  00000000  0002cc45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000038fc  00000000  00000000  00035d50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006e25  00000000  00000000  0003964c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001aca2  00000000  00000000  00040471  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001008  00000000  00000000  0005b113  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	38 c6       	rjmp	.+3184   	; 0xc72 <__dtors_end>
       2:	00 00       	nop
       4:	67 c6       	rjmp	.+3278   	; 0xcd4 <__bad_interrupt>
       6:	00 00       	nop
       8:	65 c6       	rjmp	.+3274   	; 0xcd4 <__bad_interrupt>
       a:	00 00       	nop
       c:	63 c6       	rjmp	.+3270   	; 0xcd4 <__bad_interrupt>
       e:	00 00       	nop
      10:	61 c6       	rjmp	.+3266   	; 0xcd4 <__bad_interrupt>
      12:	00 00       	nop
      14:	5f c6       	rjmp	.+3262   	; 0xcd4 <__bad_interrupt>
      16:	00 00       	nop
      18:	5d c6       	rjmp	.+3258   	; 0xcd4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5b c6       	rjmp	.+3254   	; 0xcd4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	59 c6       	rjmp	.+3250   	; 0xcd4 <__bad_interrupt>
      22:	00 00       	nop
      24:	57 c6       	rjmp	.+3246   	; 0xcd4 <__bad_interrupt>
      26:	00 00       	nop
      28:	55 c6       	rjmp	.+3242   	; 0xcd4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	53 c6       	rjmp	.+3238   	; 0xcd4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	51 c6       	rjmp	.+3234   	; 0xcd4 <__bad_interrupt>
      32:	00 00       	nop
      34:	4f c6       	rjmp	.+3230   	; 0xcd4 <__bad_interrupt>
      36:	00 00       	nop
      38:	4d c6       	rjmp	.+3226   	; 0xcd4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4b c6       	rjmp	.+3222   	; 0xcd4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	49 c6       	rjmp	.+3218   	; 0xcd4 <__bad_interrupt>
      42:	00 00       	nop
      44:	47 c6       	rjmp	.+3214   	; 0xcd4 <__bad_interrupt>
      46:	00 00       	nop
      48:	45 c6       	rjmp	.+3210   	; 0xcd4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	43 c6       	rjmp	.+3206   	; 0xcd4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	41 c6       	rjmp	.+3202   	; 0xcd4 <__bad_interrupt>
      52:	00 00       	nop
      54:	3f c6       	rjmp	.+3198   	; 0xcd4 <__bad_interrupt>
      56:	00 00       	nop
      58:	3d c6       	rjmp	.+3194   	; 0xcd4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 30 2c 	jmp	0x5860	; 0x5860 <__vector_23>
      60:	39 c6       	rjmp	.+3186   	; 0xcd4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 85 29 	jmp	0x530a	; 0x530a <__vector_25>
      68:	0c 94 bb 29 	jmp	0x5376	; 0x5376 <__vector_26>
      6c:	33 c6       	rjmp	.+3174   	; 0xcd4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	31 c6       	rjmp	.+3170   	; 0xcd4 <__bad_interrupt>
      72:	00 00       	nop
      74:	2f c6       	rjmp	.+3166   	; 0xcd4 <__bad_interrupt>
      76:	00 00       	nop
      78:	2d c6       	rjmp	.+3162   	; 0xcd4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2b c6       	rjmp	.+3158   	; 0xcd4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	29 c6       	rjmp	.+3154   	; 0xcd4 <__bad_interrupt>
      82:	00 00       	nop
      84:	27 c6       	rjmp	.+3150   	; 0xcd4 <__bad_interrupt>
      86:	00 00       	nop
      88:	25 c6       	rjmp	.+3146   	; 0xcd4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 c6       	rjmp	.+3142   	; 0xcd4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	21 c6       	rjmp	.+3138   	; 0xcd4 <__bad_interrupt>
      92:	00 00       	nop
      94:	1f c6       	rjmp	.+3134   	; 0xcd4 <__bad_interrupt>
      96:	00 00       	nop
      98:	1d c6       	rjmp	.+3130   	; 0xcd4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 1c 23 	jmp	0x4638	; 0x4638 <__vector_39>
      a0:	19 c6       	rjmp	.+3122   	; 0xcd4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	17 c6       	rjmp	.+3118   	; 0xcd4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	15 c6       	rjmp	.+3114   	; 0xcd4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	13 c6       	rjmp	.+3110   	; 0xcd4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	11 c6       	rjmp	.+3106   	; 0xcd4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0f c6       	rjmp	.+3102   	; 0xcd4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0d c6       	rjmp	.+3098   	; 0xcd4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0b c6       	rjmp	.+3094   	; 0xcd4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	09 c6       	rjmp	.+3090   	; 0xcd4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	07 c6       	rjmp	.+3086   	; 0xcd4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	05 c6       	rjmp	.+3082   	; 0xcd4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	03 c6       	rjmp	.+3078   	; 0xcd4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	01 c6       	rjmp	.+3074   	; 0xcd4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	ff c5       	rjmp	.+3070   	; 0xcd4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fd c5       	rjmp	.+3066   	; 0xcd4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	fb c5       	rjmp	.+3062   	; 0xcd4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f9 c5       	rjmp	.+3058   	; 0xcd4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ab 06       	cpc	r10, r27
      e6:	a8 06       	cpc	r10, r24
      e8:	a5 06       	cpc	r10, r21
      ea:	a2 06       	cpc	r10, r18
      ec:	9f 06       	cpc	r9, r31
      ee:	9c 06       	cpc	r9, r28
      f0:	b1 06       	cpc	r11, r17
      f2:	99 06       	cpc	r9, r25
      f4:	3d 1b       	sub	r19, r29
      f6:	59 1b       	sub	r21, r25
      f8:	59 1b       	sub	r21, r25
      fa:	50 1b       	sub	r21, r16
      fc:	59 1b       	sub	r21, r25
      fe:	32 1b       	sub	r19, r18
     100:	59 1b       	sub	r21, r25
     102:	59 1b       	sub	r21, r25
     104:	59 1b       	sub	r21, r25
     106:	34 1b       	sub	r19, r20
     108:	59 1b       	sub	r21, r25
     10a:	59 1b       	sub	r21, r25
     10c:	44 1b       	sub	r20, r20
     10e:	4e 1b       	sub	r20, r30
     110:	4c 1b       	sub	r20, r28
     112:	59 1b       	sub	r21, r25
     114:	59 1b       	sub	r21, r25
     116:	59 1b       	sub	r21, r25
     118:	4a 1b       	sub	r20, r26
     11a:	6b 2d       	mov	r22, r11
     11c:	6e 2d       	mov	r22, r14
     11e:	5d 2d       	mov	r21, r13
     120:	61 2d       	mov	r22, r1
     122:	67 2d       	mov	r22, r7
     124:	a5 2d       	mov	r26, r5
     126:	72 2d       	mov	r23, r2
     128:	76 2d       	mov	r23, r6
     12a:	7c 2d       	mov	r23, r12
     12c:	80 2d       	mov	r24, r0
     12e:	84 2d       	mov	r24, r4
     130:	8a 2d       	mov	r24, r10
     132:	8e 2d       	mov	r24, r14
     134:	92 2d       	mov	r25, r2
     136:	a5 2d       	mov	r26, r5
     138:	98 2d       	mov	r25, r8
     13a:	9c 2d       	mov	r25, r12
     13c:	a0 2d       	mov	r26, r0

0000013e <__trampolines_end>:
     13e:	43 20       	and	r4, r3
	...

00000141 <_ZZ4loopE3__c_1>:
     141:	54 65 6d 70 65 72 61 74 75 72 65 3a 20 00           Temperature: .

0000014f <_ZZ4loopE3__c_0>:
     14f:	20 25 00                                             %.

00000152 <_ZZ4loopE3__c>:
     152:	48 75 6d 69 64 69 74 79 3a 20 00                    Humidity: .

0000015d <_ZZ5setupE3__c>:
     15d:	53 53 44 31 33 30 36 20 61 6c 6c 6f 63 61 74 69     SSD1306 allocati
     16d:	6f 6e 20 66 61 69 6c 65 64 00                       on failed.

00000177 <_ZL4font>:
     177:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     187:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     197:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     1a7:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     1b7:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     1c7:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     1d7:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     1e7:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     1f7:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     207:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     217:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     227:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     237:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     247:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     257:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     267:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     277:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     287:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     297:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     2a7:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     2b7:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     2c7:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     2d7:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     2e7:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2f7:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     307:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     317:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     327:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     337:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     347:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     357:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     367:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     377:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     387:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     397:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     3a7:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     3b7:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     3c7:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     3d7:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     3e7:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     3f7:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     407:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     417:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     427:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     437:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     447:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     457:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     467:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     477:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     487:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     497:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     4a7:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     4b7:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     4c7:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     4d7:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     4e7:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     4f7:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     507:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     517:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     527:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     537:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     547:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     557:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     567:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     577:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     587:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     597:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     5a7:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     5b7:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     5c7:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     5d7:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     5e7:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     5f7:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     607:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     617:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     627:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     637:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     647:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     657:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     667:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000677 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
     677:	22 00 ff 21 00                                      "..!.

0000067c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE8postmask>:
     67c:	00 01 03 07 0f 1f 3f 7f                             ......?.

00000684 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE7premask>:
     684:	00 80 c0 e0 f0 f8 fc fe                             ........

0000068c <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
     68c:	db 40 a4 a6 2e af                                   .@....

00000692 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
     692:	20 00 a1 c8                                          ...

00000696 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
     696:	d3 00 40 8d                                         ..@.

0000069a <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
     69a:	ae d5 80 a8                                         ....

0000069e <_ZL12splash2_data>:
     69e:	00 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
     6ae:	00 e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
     6be:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f0     ................
	...
     6da:	00 03 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     6ea:	07 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 07     ................
     6fa:	f8 00 00 00 00 00 00 00 00 00 00 00 00 00 0f f8     ................
     70a:	00 00 00 03 c0 00 7e 00 00 01 e0 00 7f 0f f8 00     ......~.........
     71a:	00 00 03 c0 00 fe 00 00 01 e0 00 ff ef f8 00 00     ................
     72a:	00 03 c0 00 fe 00 00 01 e0 00 ff ff f8 00 00 00     ................
     73a:	03 c0 00 f0 00 00 00 0f 00 7f fe 7f c0 00 00 03     ................
     74a:	c0 00 f0 00 00 00 0f 00 3f fe 7f f8 3f f1 fb cf     ........?...?...
     75a:	fc fe f3 bc 3d ef e0 1f fe 7f ff 7f fb ff df fe     ....=...........
     76a:	fe ff bc 3d ef e0 1f c6 ff ff 7f fb ff df fe fe     ...=............
     77a:	ff bc 3d ef e0 0f e3 c7 fe 78 7b c3 de 1e f0 ff     ..=......x{.....
     78a:	bc 3d ef 00 07 ff 87 fc 78 7b c3 de 1e f0 f8 3c     .=......x{.....<
     79a:	3d ef 00 01 ff ff f0 00 7b c3 c0 1e f0 f0 3c 3d     =.......{.....<=
     7aa:	ef 00 01 f3 7f e0 3f fb c3 cf fe f0 f0 3c 3d ef     ......?......<=.
     7ba:	00 03 e3 3f 80 7f fb c3 df fe f0 f0 3c 3d ef 00     ...?........<=..
     7ca:	07 e7 3c 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07     ..<.x{.....<=...
     7da:	ff be 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07 ff     ...x{.....<=....
     7ea:	fe 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 0f ff fe     ..x{.....<=.....
     7fa:	00 7f fb ff df fe f0 f0 3f fd ef e0 0f ff ff 00     ........?.......
     80a:	7f fb ff df fe f0 f0 3f fd ef e0 0f f9 ff 00 3e     .......?.......>
     81a:	79 f9 cf 9e f0 f0 1f 3d e7 e0 1f f1 ff 00 00 00     y......=........
	...
     832:	00 1f 80 ff 00 7f ff ff ff ff ff ff ff ff ff e0     ................
     842:	1c 00 7f 00 7f ff ff ff fe b4 6d 88 8d 18 e0 00     ..........m.....
     852:	00 1f 00 7f ff ff ff fe 95 ad 7d b5 77 e0 00 00     ..........}.w...
     862:	0f 00 7f ff ff ff fe a5 ad 9d 8d 19 e0 00 00 06     ................
     872:	00 7f ff ff ff fe b5 ad ed b5 7e e0                 ..........~.

0000087e <_ZL12splash1_data>:
     87e:	00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00     ................
     88e:	03 80 00 00 00 00 00 00 00 00 00 07 c0 00 00 00     ................
     89e:	00 00 00 00 00 00 07 c0 00 00 00 00 00 00 00 00     ................
     8ae:	00 0f c0 00 00 00 00 00 00 00 00 00 1f e0 00 00     ................
     8be:	00 00 00 00 00 00 00 1f e0 00 00 00 00 00 00 00     ................
     8ce:	00 00 3f e0 00 00 00 00 00 00 00 00 00 3f f0 00     ..?..........?..
	...
     8e6:	7f f0 00 00 00 00 00 00 00 1f f8 7f f0 00 00 00     ................
     8f6:	00 00 00 00 3f fe 7f f0 00 00 00 00 00 00 00 3f     ....?..........?
     906:	ff 7f f0 00 00 00 00 00 00 00 1f ff fb e0 00 00     ................
     916:	00 00 00 00 00 0f ff f9 ff c0 00 00 00 00 00 00     ................
     926:	0f ff f9 ff f8 00 00 00 00 00 00 07 ff f1 ff ff     ................
     936:	00 00 00 00 00 00 03 fc 73 ff ff 80 00 00 00 00     ........s.......
     946:	00 01 fe 3f ff ff 80 00 00 00 00 00 00 ff 1e 0f     ...?............
     956:	ff 00 00 00 00 00 00 00 7f fe 1f fc 00 00 00 00     ................
     966:	00 00 00 3f ff ff f8 00 00 00 00 00 00 00 0f df     ...?............
     976:	ff e0 00 00 00 00 00 00 00 1f 19 ff c0 00 00 00     ................
     986:	00 00 00 00 3f 3c ff 00 00 00 00 00 00 00 00 7e     ....?<.........~
     996:	7c f8 00 00 00 00 00 00 00 00 7f fe 7c 00 00 00     |...........|...
     9a6:	00 00 00 00 00 ff ff fc 00 00 00 00 00 00 00 00     ................
     9b6:	ff ff fe 00 00 00 00 00 00 00 00 ff ff fe 00 00     ................
     9c6:	00 00 00 00 00 01 ff ef fe 00 00 00 00 00 00 00     ................
     9d6:	01 ff cf fe 00 00 00 00 00 00 00 03 ff 07 fe 00     ................
     9e6:	00 00 00 00 00 00 03 fc 07 fe 00 00 00 00 00 00     ................
     9f6:	00 03 f0 03 fe 00 00 00 00 00 00 00 01 80 00 fe     ................
	...
     a0e:	00 00 7e 00 00 00 00 00 00 00 00 00 00 3e 00 00     ..~..........>..
	...
     a26:	0c 00 00 00 00 00 00 07 80 00 fc 00 00 03 c0 00     ................
     a36:	00 00 07 80 01 fc 00 00 03 c0 00 00 00 07 80 01     ................
     a46:	fc 00 00 03 c0 00 00 00 07 80 01 e0 00 00 00 1e     ................
     a56:	00 00 00 07 80 01 e0 00 00 00 1e 00 7f e3 f7 9f     ................
     a66:	f9 fd e7 78 7b df c0 ff f7 ff bf fd fd ff 78 7b     ...x{.........x{
     a76:	df c0 ff f7 ff bf fd fd ff 78 7b df c0 f0 f7 87     .........x{.....
     a86:	bc 3d e1 ff 78 7b de 00 f0 f7 87 bc 3d e1 f0 78     .=..x{......=..x
     a96:	7b de 00 00 f7 87 80 3d e1 e0 78 7b de 00 7f f7     {......=..x{....
     aa6:	87 9f fd e1 e0 78 7b de 00 ff f7 87 bf fd e1 e0     .....x{.........
     ab6:	78 7b de 00 f0 f7 87 bc 3d e1 e0 78 7b de 00 f0     x{......=..x{...
     ac6:	f7 87 bc 3d e1 e0 78 7b de 00 f0 f7 87 bc 3d e1     ...=..x{......=.
     ad6:	e0 78 7b de 00 ff f7 ff bf fd e1 e0 7f fb df c0     .x{.............
     ae6:	ff f7 ff bf fd e1 e0 7f fb df c0 7c f3 f3 9f 3d     ...........|...=
     af6:	e1 e0 3e 7b cf c0 00 00 00 00 00 00 00 00 00 00     ..>{............
     b06:	00 ff ff ff ff ff ff ff ff ff ff c0 ff ff ff ff     ................
     b16:	fd 68 db 11 1a 31 c0 ff ff ff ff fd 2b 5a fb 6a     .h...1......+Z.j
     b26:	ef c0 ff ff ff ff fd 4b 5b 3b 1a 33 c0 ff ff ff     .......K[;.3....
     b36:	ff fd 6b 5b db 6a fd c0                             ..k[.j..

00000b3e <_ZL8dowArray>:
     b3e:	00 03 02 05 00 03 05 01 04 06 02 04                 ............

00000b4a <digital_pin_to_timer_PGM>:
     b4a:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     b76:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000b90 <digital_pin_to_bit_mask_PGM>:
     b90:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     ba0:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     bb0:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     bc0:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     bd0:	04 08 10 20 40 80                                   ... @.

00000bd6 <digital_pin_to_port_PGM>:
     bd6:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     be6:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     bf6:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     c06:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     c16:	0b 0b 0b 0b 0b 0b                                   ......

00000c1c <port_to_input_PGM>:
     c1c:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     c2c:	00 01 00 00 03 01 06 01 09 01                       ..........

00000c36 <port_to_output_PGM>:
     c36:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     c46:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000c50 <port_to_mode_PGM>:
     c50:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     c60:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000c6a <__ctors_start>:
     c6a:	63 07       	cpc	r22, r19
     c6c:	a9 25       	eor	r26, r9
     c6e:	ed 29       	or	r30, r13

00000c70 <__ctors_end>:
     c70:	92 07       	cpc	r25, r18

00000c72 <__dtors_end>:
     c72:	11 24       	eor	r1, r1
     c74:	1f be       	out	0x3f, r1	; 63
     c76:	cf ef       	ldi	r28, 0xFF	; 255
     c78:	d1 e2       	ldi	r29, 0x21	; 33
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	cd bf       	out	0x3d, r28	; 61
     c7e:	00 e0       	ldi	r16, 0x00	; 0
     c80:	0c bf       	out	0x3c, r16	; 60

00000c82 <__do_copy_data>:
     c82:	14 e0       	ldi	r17, 0x04	; 4
     c84:	a0 e0       	ldi	r26, 0x00	; 0
     c86:	b2 e0       	ldi	r27, 0x02	; 2
     c88:	e8 e3       	ldi	r30, 0x38	; 56
     c8a:	ff e5       	ldi	r31, 0x5F	; 95
     c8c:	00 e0       	ldi	r16, 0x00	; 0
     c8e:	0b bf       	out	0x3b, r16	; 59
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <__do_copy_data+0x14>
     c92:	07 90       	elpm	r0, Z+
     c94:	0d 92       	st	X+, r0
     c96:	a2 3b       	cpi	r26, 0xB2	; 178
     c98:	b1 07       	cpc	r27, r17
     c9a:	d9 f7       	brne	.-10     	; 0xc92 <__do_copy_data+0x10>

00000c9c <__do_clear_bss>:
     c9c:	26 e0       	ldi	r18, 0x06	; 6
     c9e:	a2 eb       	ldi	r26, 0xB2	; 178
     ca0:	b4 e0       	ldi	r27, 0x04	; 4
     ca2:	01 c0       	rjmp	.+2      	; 0xca6 <.do_clear_bss_start>

00000ca4 <.do_clear_bss_loop>:
     ca4:	1d 92       	st	X+, r1

00000ca6 <.do_clear_bss_start>:
     ca6:	a7 3f       	cpi	r26, 0xF7	; 247
     ca8:	b2 07       	cpc	r27, r18
     caa:	e1 f7       	brne	.-8      	; 0xca4 <.do_clear_bss_loop>

00000cac <__do_global_ctors>:
     cac:	16 e0       	ldi	r17, 0x06	; 6
     cae:	c8 e3       	ldi	r28, 0x38	; 56
     cb0:	d6 e0       	ldi	r29, 0x06	; 6
     cb2:	00 e0       	ldi	r16, 0x00	; 0
     cb4:	06 c0       	rjmp	.+12     	; 0xcc2 <__do_global_ctors+0x16>
     cb6:	21 97       	sbiw	r28, 0x01	; 1
     cb8:	01 09       	sbc	r16, r1
     cba:	80 2f       	mov	r24, r16
     cbc:	fe 01       	movw	r30, r28
     cbe:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__tablejump2__>
     cc2:	c5 33       	cpi	r28, 0x35	; 53
     cc4:	d1 07       	cpc	r29, r17
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	08 07       	cpc	r16, r24
     cca:	a9 f7       	brne	.-22     	; 0xcb6 <__do_global_ctors+0xa>
     ccc:	0e 94 1b 2a 	call	0x5436	; 0x5436 <main>
     cd0:	0c 94 8b 2f 	jmp	0x5f16	; 0x5f16 <__do_global_dtors>

00000cd4 <__bad_interrupt>:
     cd4:	95 c9       	rjmp	.-3286   	; 0x0 <__vectors>

00000cd6 <_Z13checkSettingsv>:
		display.display();
		delay(15);
	}
	
	
	display.display();
     cd6:	8d e4       	ldi	r24, 0x4D	; 77
     cd8:	96 e0       	ldi	r25, 0x06	; 6
     cda:	0e 94 92 2a 	call	0x5524	; 0x5524 <_ZN5Print7printlnEv>
     cde:	67 e1       	ldi	r22, 0x17	; 23
     ce0:	72 e0       	ldi	r23, 0x02	; 2
     ce2:	8d e4       	ldi	r24, 0x4D	; 77
     ce4:	96 e0       	ldi	r25, 0x06	; 6
     ce6:	0e 94 8a 2a 	call	0x5514	; 0x5514 <_ZN5Print5printEPKc>
     cea:	85 ec       	ldi	r24, 0xC5	; 197
     cec:	94 e0       	ldi	r25, 0x04	; 4
     cee:	0e 94 83 1c 	call	0x3906	; 0x3906 <_ZN7MPU605015getSleepEnabledEv>
     cf2:	81 11       	cpse	r24, r1
     cf4:	03 c0       	rjmp	.+6      	; 0xcfc <_Z13checkSettingsv+0x26>
     cf6:	6e e0       	ldi	r22, 0x0E	; 14
     cf8:	72 e0       	ldi	r23, 0x02	; 2
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <_Z13checkSettingsv+0x2a>
     cfc:	66 e0       	ldi	r22, 0x06	; 6
     cfe:	72 e0       	ldi	r23, 0x02	; 2
     d00:	8d e4       	ldi	r24, 0x4D	; 77
     d02:	96 e0       	ldi	r25, 0x06	; 6
     d04:	0e 94 a5 2a 	call	0x554a	; 0x554a <_ZN5Print7printlnEPKc>
     d08:	6e e2       	ldi	r22, 0x2E	; 46
     d0a:	72 e0       	ldi	r23, 0x02	; 2
     d0c:	8d e4       	ldi	r24, 0x4D	; 77
     d0e:	96 e0       	ldi	r25, 0x06	; 6
     d10:	0e 94 8a 2a 	call	0x5514	; 0x5514 <_ZN5Print5printEPKc>
     d14:	85 ec       	ldi	r24, 0xC5	; 197
     d16:	94 e0       	ldi	r25, 0x04	; 4
     d18:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <_ZN7MPU605014getClockSourceEv>
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	88 30       	cpi	r24, 0x08	; 8
     d20:	91 05       	cpc	r25, r1
     d22:	f8 f4       	brcc	.+62     	; 0xd62 <_Z13checkSettingsv+0x8c>
     d24:	fc 01       	movw	r30, r24
     d26:	88 27       	eor	r24, r24
     d28:	ee 58       	subi	r30, 0x8E	; 142
     d2a:	ff 4f       	sbci	r31, 0xFF	; 255
     d2c:	8f 4f       	sbci	r24, 0xFF	; 255
     d2e:	0c 94 57 2e 	jmp	0x5cae	; 0x5cae <__tablejump2__>
     d32:	65 e4       	ldi	r22, 0x45	; 69
     d34:	72 e0       	ldi	r23, 0x02	; 2
     d36:	11 c0       	rjmp	.+34     	; 0xd5a <_Z13checkSettingsv+0x84>
     d38:	6d e7       	ldi	r22, 0x7D	; 125
     d3a:	72 e0       	ldi	r23, 0x02	; 2
     d3c:	0e c0       	rjmp	.+28     	; 0xd5a <_Z13checkSettingsv+0x84>
     d3e:	61 ea       	ldi	r22, 0xA1	; 161
     d40:	72 e0       	ldi	r23, 0x02	; 2
     d42:	0b c0       	rjmp	.+22     	; 0xd5a <_Z13checkSettingsv+0x84>
     d44:	67 ec       	ldi	r22, 0xC7	; 199
     d46:	72 e0       	ldi	r23, 0x02	; 2
     d48:	08 c0       	rjmp	.+16     	; 0xd5a <_Z13checkSettingsv+0x84>
     d4a:	6b ee       	ldi	r22, 0xEB	; 235
     d4c:	72 e0       	ldi	r23, 0x02	; 2
     d4e:	05 c0       	rjmp	.+10     	; 0xd5a <_Z13checkSettingsv+0x84>
     d50:	6f e0       	ldi	r22, 0x0F	; 15
     d52:	73 e0       	ldi	r23, 0x03	; 3
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <_Z13checkSettingsv+0x84>
     d56:	63 e3       	ldi	r22, 0x33	; 51
     d58:	73 e0       	ldi	r23, 0x03	; 3
     d5a:	8d e4       	ldi	r24, 0x4D	; 77
     d5c:	96 e0       	ldi	r25, 0x06	; 6
     d5e:	0e 94 a5 2a 	call	0x554a	; 0x554a <_ZN5Print7printlnEPKc>
     d62:	6c e4       	ldi	r22, 0x4C	; 76
     d64:	73 e0       	ldi	r23, 0x03	; 3
     d66:	8d e4       	ldi	r24, 0x4D	; 77
     d68:	96 e0       	ldi	r25, 0x06	; 6
     d6a:	0e 94 8a 2a 	call	0x5514	; 0x5514 <_ZN5Print5printEPKc>
     d6e:	85 ec       	ldi	r24, 0xC5	; 197
     d70:	94 e0       	ldi	r25, 0x04	; 4
     d72:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <_ZN7MPU60508getScaleEv>
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	59 f0       	breq	.+22     	; 0xd90 <_Z13checkSettingsv+0xba>
     d7a:	68 f0       	brcs	.+26     	; 0xd96 <_Z13checkSettingsv+0xc0>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	29 f0       	breq	.+10     	; 0xd8a <_Z13checkSettingsv+0xb4>
     d80:	83 30       	cpi	r24, 0x03	; 3
     d82:	79 f4       	brne	.+30     	; 0xda2 <_Z13checkSettingsv+0xcc>
     d84:	63 e6       	ldi	r22, 0x63	; 99
     d86:	73 e0       	ldi	r23, 0x03	; 3
     d88:	08 c0       	rjmp	.+16     	; 0xd9a <_Z13checkSettingsv+0xc4>
     d8a:	6c e6       	ldi	r22, 0x6C	; 108
     d8c:	73 e0       	ldi	r23, 0x03	; 3
     d8e:	05 c0       	rjmp	.+10     	; 0xd9a <_Z13checkSettingsv+0xc4>
     d90:	65 e7       	ldi	r22, 0x75	; 117
     d92:	73 e0       	ldi	r23, 0x03	; 3
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <_Z13checkSettingsv+0xc4>
     d96:	6d e7       	ldi	r22, 0x7D	; 125
     d98:	73 e0       	ldi	r23, 0x03	; 3
     d9a:	8d e4       	ldi	r24, 0x4D	; 77
     d9c:	96 e0       	ldi	r25, 0x06	; 6
     d9e:	0e 94 a5 2a 	call	0x554a	; 0x554a <_ZN5Print7printlnEPKc>
     da2:	65 e8       	ldi	r22, 0x85	; 133
     da4:	73 e0       	ldi	r23, 0x03	; 3
     da6:	8d e4       	ldi	r24, 0x4D	; 77
     da8:	96 e0       	ldi	r25, 0x06	; 6
     daa:	0e 94 8a 2a 	call	0x5514	; 0x5514 <_ZN5Print5printEPKc>
     dae:	85 ec       	ldi	r24, 0xC5	; 197
     db0:	94 e0       	ldi	r25, 0x04	; 4
     db2:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <_ZN7MPU605014getGyroOffsetXEv>
     db6:	4a e0       	ldi	r20, 0x0A	; 10
     db8:	50 e0       	ldi	r21, 0x00	; 0
     dba:	bc 01       	movw	r22, r24
     dbc:	8d e4       	ldi	r24, 0x4D	; 77
     dbe:	96 e0       	ldi	r25, 0x06	; 6
     dc0:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <_ZN5Print5printEii>
     dc4:	6c e9       	ldi	r22, 0x9C	; 156
     dc6:	73 e0       	ldi	r23, 0x03	; 3
     dc8:	8d e4       	ldi	r24, 0x4D	; 77
     dca:	96 e0       	ldi	r25, 0x06	; 6
     dcc:	0e 94 8a 2a 	call	0x5514	; 0x5514 <_ZN5Print5printEPKc>
     dd0:	85 ec       	ldi	r24, 0xC5	; 197
     dd2:	94 e0       	ldi	r25, 0x04	; 4
     dd4:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <_ZN7MPU605014getGyroOffsetYEv>
     dd8:	4a e0       	ldi	r20, 0x0A	; 10
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	bc 01       	movw	r22, r24
     dde:	8d e4       	ldi	r24, 0x4D	; 77
     de0:	96 e0       	ldi	r25, 0x06	; 6
     de2:	0e 94 52 2b 	call	0x56a4	; 0x56a4 <_ZN5Print5printEii>
     de6:	6c e9       	ldi	r22, 0x9C	; 156
     de8:	73 e0       	ldi	r23, 0x03	; 3
     dea:	8d e4       	ldi	r24, 0x4D	; 77
     dec:	96 e0       	ldi	r25, 0x06	; 6
     dee:	0e 94 8a 2a 	call	0x5514	; 0x5514 <_ZN5Print5printEPKc>
     df2:	85 ec       	ldi	r24, 0xC5	; 197
     df4:	94 e0       	ldi	r25, 0x04	; 4
     df6:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <_ZN7MPU605014getGyroOffsetZEv>
     dfa:	4a e0       	ldi	r20, 0x0A	; 10
     dfc:	50 e0       	ldi	r21, 0x00	; 0
     dfe:	bc 01       	movw	r22, r24
     e00:	8d e4       	ldi	r24, 0x4D	; 77
     e02:	96 e0       	ldi	r25, 0x06	; 6
     e04:	0e 94 58 2b 	call	0x56b0	; 0x56b0 <_ZN5Print7printlnEii>
     e08:	8d e4       	ldi	r24, 0x4D	; 77
     e0a:	96 e0       	ldi	r25, 0x06	; 6
     e0c:	0c 94 92 2a 	jmp	0x5524	; 0x5524 <_ZN5Print7printlnEv>

00000e10 <setup>:
     e10:	0f 93       	push	r16
     e12:	26 e0       	ldi	r18, 0x06	; 6
     e14:	40 e8       	ldi	r20, 0x80	; 128
     e16:	55 e2       	ldi	r21, 0x25	; 37
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	8d e4       	ldi	r24, 0x4D	; 77
     e1e:	96 e0       	ldi	r25, 0x06	; 6
     e20:	0e 94 22 29 	call	0x5244	; 0x5244 <_ZN14HardwareSerial5beginEmh>
     e24:	01 e0       	ldi	r16, 0x01	; 1
     e26:	21 e0       	ldi	r18, 0x01	; 1
     e28:	4c e3       	ldi	r20, 0x3C	; 60
     e2a:	62 e0       	ldi	r22, 0x02	; 2
     e2c:	8f e3       	ldi	r24, 0x3F	; 63
     e2e:	95 e0       	ldi	r25, 0x05	; 5
     e30:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN16Adafruit_SSD13065beginEhhbb>
     e34:	81 11       	cpse	r24, r1
     e36:	07 c0       	rjmp	.+14     	; 0xe46 <setup+0x36>
     e38:	6d e5       	ldi	r22, 0x5D	; 93
     e3a:	71 e0       	ldi	r23, 0x01	; 1
     e3c:	8d e4       	ldi	r24, 0x4D	; 77
     e3e:	96 e0       	ldi	r25, 0x06	; 6
     e40:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN5Print7printlnEPK19__FlashStringHelper>
     e44:	ff cf       	rjmp	.-2      	; 0xe44 <setup+0x34>
     e46:	8f e3       	ldi	r24, 0x3F	; 63
     e48:	95 e0       	ldi	r25, 0x05	; 5
     e4a:	0e 94 23 11 	call	0x2246	; 0x2246 <_ZN16Adafruit_SSD130612clearDisplayEv>
     e4e:	28 e6       	ldi	r18, 0x68	; 104
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	40 e0       	ldi	r20, 0x00	; 0
     e54:	63 e0       	ldi	r22, 0x03	; 3
     e56:	85 ec       	ldi	r24, 0xC5	; 197
     e58:	94 e0       	ldi	r25, 0x04	; 4
     e5a:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <_ZN7MPU60505beginE13mpu6050_dps_t15mpu6050_range_ti>
     e5e:	81 11       	cpse	r24, r1
     e60:	0d c0       	rjmp	.+26     	; 0xe7c <setup+0x6c>
     e62:	60 ea       	ldi	r22, 0xA0	; 160
     e64:	73 e0       	ldi	r23, 0x03	; 3
     e66:	8d e4       	ldi	r24, 0x4D	; 77
     e68:	96 e0       	ldi	r25, 0x06	; 6
     e6a:	0e 94 a5 2a 	call	0x554a	; 0x554a <_ZN5Print7printlnEPKc>
     e6e:	64 ef       	ldi	r22, 0xF4	; 244
     e70:	71 e0       	ldi	r23, 0x01	; 1
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 ab 2c 	call	0x5956	; 0x5956 <delay>
     e7a:	e9 cf       	rjmp	.-46     	; 0xe4e <setup+0x3e>
     e7c:	26 e0       	ldi	r18, 0x06	; 6
     e7e:	40 e8       	ldi	r20, 0x80	; 128
     e80:	55 e2       	ldi	r21, 0x25	; 37
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	8d e4       	ldi	r24, 0x4D	; 77
     e88:	96 e0       	ldi	r25, 0x06	; 6
     e8a:	0e 94 22 29 	call	0x5244	; 0x5244 <_ZN14HardwareSerial5beginEmh>
     e8e:	87 ef       	ldi	r24, 0xF7	; 247
     e90:	95 e0       	ldi	r25, 0x05	; 5
     e92:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <_ZN7TwoWire5beginEv>
     e96:	83 e3       	ldi	r24, 0x33	; 51
     e98:	95 e0       	ldi	r25, 0x05	; 5
     e9a:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <_ZN6DS32315beginEv>
     e9e:	45 ed       	ldi	r20, 0xD5	; 213
     ea0:	53 e0       	ldi	r21, 0x03	; 3
     ea2:	6e ed       	ldi	r22, 0xDE	; 222
     ea4:	73 e0       	ldi	r23, 0x03	; 3
     ea6:	83 e3       	ldi	r24, 0x33	; 51
     ea8:	95 e0       	ldi	r25, 0x05	; 5
     eaa:	0e 94 10 1b 	call	0x3620	; 0x3620 <_ZN6DS323111setDateTimeEPKcS1_>
     eae:	62 e3       	ldi	r22, 0x32	; 50
     eb0:	85 ec       	ldi	r24, 0xC5	; 197
     eb2:	94 e0       	ldi	r25, 0x04	; 4
     eb4:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <_ZN7MPU605013calibrateGyroEh>
     eb8:	0e df       	rcall	.-484    	; 0xcd6 <_Z13checkSettingsv>
     eba:	67 e3       	ldi	r22, 0x37	; 55
     ebc:	82 eb       	ldi	r24, 0xB2	; 178
     ebe:	94 e0       	ldi	r25, 0x04	; 4
     ec0:	0f 91       	pop	r16
     ec2:	0c 94 b8 15 	jmp	0x2b70	; 0x2b70 <_ZN3DHT5beginEh>

00000ec6 <_GLOBAL__sub_I_display>:
}
     ec6:	8f 92       	push	r8
     ec8:	9f 92       	push	r9
     eca:	af 92       	push	r10
     ecc:	bf 92       	push	r11
     ece:	cf 92       	push	r12
     ed0:	df 92       	push	r13
     ed2:	ef 92       	push	r14
     ed4:	ff 92       	push	r15
     ed6:	0f 93       	push	r16
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET 4 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
     ed8:	80 ea       	ldi	r24, 0xA0	; 160
     eda:	88 2e       	mov	r8, r24
     edc:	86 e8       	ldi	r24, 0x86	; 134
     ede:	98 2e       	mov	r9, r24
     ee0:	aa 24       	eor	r10, r10
     ee2:	a3 94       	inc	r10
     ee4:	b1 2c       	mov	r11, r1
     ee6:	90 e8       	ldi	r25, 0x80	; 128
     ee8:	c9 2e       	mov	r12, r25
     eea:	9a e1       	ldi	r25, 0x1A	; 26
     eec:	d9 2e       	mov	r13, r25
     eee:	96 e0       	ldi	r25, 0x06	; 6
     ef0:	e9 2e       	mov	r14, r25
     ef2:	f1 2c       	mov	r15, r1
     ef4:	04 e0       	ldi	r16, 0x04	; 4
     ef6:	27 ef       	ldi	r18, 0xF7	; 247
     ef8:	35 e0       	ldi	r19, 0x05	; 5
     efa:	40 e4       	ldi	r20, 0x40	; 64
     efc:	60 e8       	ldi	r22, 0x80	; 128
     efe:	8f e3       	ldi	r24, 0x3F	; 63
     f00:	95 e0       	ldi	r25, 0x05	; 5
     f02:	fe d7       	rcall	.+4092   	; 0x1f00 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
DS3231 clock;
RTCDateTime dt;

MPU6050 mpu;

DHT dht(DHTPIN, DHTTYPE);
     f04:	26 e0       	ldi	r18, 0x06	; 6
     f06:	4b e0       	ldi	r20, 0x0B	; 11
     f08:	62 e0       	ldi	r22, 0x02	; 2
     f0a:	82 eb       	ldi	r24, 0xB2	; 178
     f0c:	94 e0       	ldi	r25, 0x04	; 4
		delay(15);
	}
	
	
	display.display();
}
     f0e:	0f 91       	pop	r16
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	df 90       	pop	r13
     f16:	cf 90       	pop	r12
     f18:	bf 90       	pop	r11
     f1a:	af 90       	pop	r10
     f1c:	9f 90       	pop	r9
     f1e:	8f 90       	pop	r8
DS3231 clock;
RTCDateTime dt;

MPU6050 mpu;

DHT dht(DHTPIN, DHTTYPE);
     f20:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <_ZN3DHTC1Ehhh>

00000f24 <_GLOBAL__sub_D_display>:
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET 4 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
     f24:	8f e3       	ldi	r24, 0x3F	; 63
     f26:	95 e0       	ldi	r25, 0x05	; 5
     f28:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <_ZN16Adafruit_SSD1306D1Ev>

00000f2c <loop>:
  dht.begin();
		
}

void loop()
{
     f2c:	4f 92       	push	r4
     f2e:	5f 92       	push	r5
     f30:	6f 92       	push	r6
     f32:	7f 92       	push	r7
     f34:	8f 92       	push	r8
     f36:	9f 92       	push	r9
     f38:	af 92       	push	r10
     f3a:	bf 92       	push	r11
     f3c:	ef 92       	push	r14
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
            'true' to this function to use correct CP437 character values
            in your code.
    @param  x  true = enable (new behavior), false = disable (old behavior)
  */
  /**********************************************************************/
  void cp437(bool x = true) { _cp437 = x; }
     f46:	cf e3       	ldi	r28, 0x3F	; 63
     f48:	d5 e0       	ldi	r29, 0x05	; 5
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	88 8f       	std	Y+24, r24	; 0x18
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
     f4e:	1d 86       	std	Y+13, r1	; 0x0d
     f50:	1c 86       	std	Y+12, r1	; 0x0c
    cursor_y = y;
     f52:	1f 86       	std	Y+15, r1	; 0x0f
     f54:	1e 86       	std	Y+14, r1	; 0x0e

display.cp437(true);
display.setCursor(0,0);
display.setTextSize(1); // Normal 1:1 pixel scale
     f56:	61 e0       	ldi	r22, 0x01	; 1
     f58:	ce 01       	movw	r24, r28
     f5a:	0c d7       	rcall	.+3608   	; 0x1d74 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	9b 8b       	std	Y+19, r25	; 0x13
     f62:	8a 8b       	std	Y+18, r24	; 0x12
     f64:	99 8b       	std	Y+17, r25	; 0x11
     f66:	88 8b       	std	Y+16, r24	; 0x10
display.setTextColor(WHITE); // Draw white text
display.clearDisplay();
     f68:	ce 01       	movw	r24, r28
     f6a:	0e 94 23 11 	call	0x2246	; 0x2246 <_ZN16Adafruit_SSD130612clearDisplayEv>


float humidity = dht.readHumidity();
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	82 eb       	ldi	r24, 0xB2	; 178
     f72:	94 e0       	ldi	r25, 0x04	; 4
     f74:	0e 94 cb 19 	call	0x3396	; 0x3396 <_ZN3DHT12readHumidityEb>
     f78:	2b 01       	movw	r4, r22
     f7a:	3c 01       	movw	r6, r24
float temperatur = dht.readTemperature();
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	82 eb       	ldi	r24, 0xB2	; 178
     f82:	94 e0       	ldi	r25, 0x04	; 4
     f84:	0e 94 37 19 	call	0x326e	; 0x326e <_ZN3DHT15readTemperatureEbb>
     f88:	4b 01       	movw	r8, r22
     f8a:	5c 01       	movw	r10, r24
float heatindex = dht.computeHeatIndex(temperatur, temperatur, false);
     f8c:	e1 2c       	mov	r14, r1
     f8e:	8b 01       	movw	r16, r22
     f90:	9c 01       	movw	r18, r24
     f92:	ab 01       	movw	r20, r22
     f94:	bc 01       	movw	r22, r24
     f96:	82 eb       	ldi	r24, 0xB2	; 178
     f98:	94 e0       	ldi	r25, 0x04	; 4
     f9a:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <_ZN3DHT16computeHeatIndexEffb>

display.println(F("Humidity: "));
     f9e:	62 e5       	ldi	r22, 0x52	; 82
     fa0:	71 e0       	ldi	r23, 0x01	; 1
     fa2:	ce 01       	movw	r24, r28
     fa4:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN5Print7printlnEPK19__FlashStringHelper>
display.setTextSize(2);
     fa8:	62 e0       	ldi	r22, 0x02	; 2
     faa:	ce 01       	movw	r24, r28
     fac:	e3 d6       	rcall	.+3526   	; 0x1d74 <_ZN12Adafruit_GFX11setTextSizeEh>
display.print(humidity);
     fae:	22 e0       	ldi	r18, 0x02	; 2
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	b3 01       	movw	r22, r6
     fb4:	a2 01       	movw	r20, r4
     fb6:	ce 01       	movw	r24, r28
     fb8:	0e 94 2f 2c 	call	0x585e	; 0x585e <_ZN5Print5printEdi>
display.println(F(" %"));
     fbc:	6f e4       	ldi	r22, 0x4F	; 79
     fbe:	71 e0       	ldi	r23, 0x01	; 1
     fc0:	ce 01       	movw	r24, r28
     fc2:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN5Print7printlnEPK19__FlashStringHelper>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
     fc6:	1d 86       	std	Y+13, r1	; 0x0d
     fc8:	1c 86       	std	Y+12, r1	; 0x0c
    cursor_y = y;
     fca:	80 e2       	ldi	r24, 0x20	; 32
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	9f 87       	std	Y+15, r25	; 0x0f
     fd0:	8e 87       	std	Y+14, r24	; 0x0e

display.setCursor(0, 32);

display.setTextSize(1);
     fd2:	61 e0       	ldi	r22, 0x01	; 1
     fd4:	ce 01       	movw	r24, r28
     fd6:	ce d6       	rcall	.+3484   	; 0x1d74 <_ZN12Adafruit_GFX11setTextSizeEh>
display.println(F("Temperature: "));
     fd8:	61 e4       	ldi	r22, 0x41	; 65
     fda:	71 e0       	ldi	r23, 0x01	; 1
     fdc:	ce 01       	movw	r24, r28
     fde:	0e 94 95 2a 	call	0x552a	; 0x552a <_ZN5Print7printlnEPK19__FlashStringHelper>
display.setTextSize(2);
     fe2:	62 e0       	ldi	r22, 0x02	; 2
     fe4:	ce 01       	movw	r24, r28
     fe6:	c6 d6       	rcall	.+3468   	; 0x1d74 <_ZN12Adafruit_GFX11setTextSizeEh>
display.print(temperatur);
     fe8:	22 e0       	ldi	r18, 0x02	; 2
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	b5 01       	movw	r22, r10
     fee:	a4 01       	movw	r20, r8
     ff0:	ce 01       	movw	r24, r28
     ff2:	0e 94 2f 2c 	call	0x585e	; 0x585e <_ZN5Print5printEdi>
display.write(167);
     ff6:	67 ea       	ldi	r22, 0xA7	; 167
     ff8:	ce 01       	movw	r24, r28
     ffa:	db d5       	rcall	.+2998   	; 0x1bb2 <_ZN12Adafruit_GFX5writeEh>
display.print(F("C "));
     ffc:	6e e3       	ldi	r22, 0x3E	; 62
     ffe:	71 e0       	ldi	r23, 0x01	; 1
    1000:	ce 01       	movw	r24, r28
    1002:	0e 94 66 2a 	call	0x54cc	; 0x54cc <_ZN5Print5printEPK19__FlashStringHelper>
//display.write(167);
//display.print(heatindex);
//display.write(167);
//display.print(F("°C "));

display.display();
    1006:	ce 01       	movw	r24, r28
    1008:	0e 94 a8 14 	call	0x2950	; 0x2950 <_ZN16Adafruit_SSD13067displayEv>

delay(1000);
    100c:	68 ee       	ldi	r22, 0xE8	; 232
    100e:	73 e0       	ldi	r23, 0x03	; 3
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 ab 2c 	call	0x5956	; 0x5956 <delay>

dht.computeHeatIndex();
    1018:	61 e0       	ldi	r22, 0x01	; 1
    101a:	82 eb       	ldi	r24, 0xB2	; 178
    101c:	94 e0       	ldi	r25, 0x04	; 4
}
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	ef 90       	pop	r14
    1028:	bf 90       	pop	r11
    102a:	af 90       	pop	r10
    102c:	9f 90       	pop	r9
    102e:	8f 90       	pop	r8
    1030:	7f 90       	pop	r7
    1032:	6f 90       	pop	r6
    1034:	5f 90       	pop	r5
    1036:	4f 90       	pop	r4

display.display();

delay(1000);

dht.computeHeatIndex();
    1038:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <_ZN3DHT16computeHeatIndexEb>

0000103c <_ZN8SPIClass16beginTransactionE11SPISettings>:

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    103c:	20 91 81 05 	lds	r18, 0x0581	; 0x800581 <_ZN8SPIClass13interruptModeE>
    1040:	22 23       	and	r18, r18
    1042:	99 f0       	breq	.+38     	; 0x106a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
      uint8_t sreg = SREG;
    1044:	4f b7       	in	r20, 0x3f	; 63
      noInterrupts();
    1046:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    1048:	20 91 81 05 	lds	r18, 0x0581	; 0x800581 <_ZN8SPIClass13interruptModeE>
    104c:	21 30       	cpi	r18, 0x01	; 1
    104e:	59 f4       	brne	.+22     	; 0x1066 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
        interruptSave = SPI_AVR_EIMSK;
    1050:	2d b3       	in	r18, 0x1d	; 29
    1052:	20 93 7f 05 	sts	0x057F, r18	; 0x80057f <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
    1056:	3d b3       	in	r19, 0x1d	; 29
    1058:	20 91 80 05 	lds	r18, 0x0580	; 0x800580 <_ZN8SPIClass13interruptMaskE>
    105c:	20 95       	com	r18
    105e:	23 23       	and	r18, r19
    1060:	2d bb       	out	0x1d, r18	; 29
        SREG = sreg;
    1062:	4f bf       	out	0x3f, r20	; 63
    1064:	02 c0       	rjmp	.+4      	; 0x106a <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
      } else
      #endif
      {
        interruptSave = sreg;
    1066:	40 93 7f 05 	sts	0x057F, r20	; 0x80057f <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    106a:	8c bd       	out	0x2c, r24	; 44
    SPSR = settings.spsr;
    106c:	9d bd       	out	0x2d, r25	; 45
    106e:	08 95       	ret

00001070 <_ZN8SPIClass14endTransactionEv>:
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    1070:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <_ZN8SPIClass13interruptModeE>
    1074:	88 23       	and	r24, r24
    1076:	61 f0       	breq	.+24     	; 0x1090 <_ZN8SPIClass14endTransactionEv+0x20>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    1078:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
    107a:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    107c:	20 91 81 05 	lds	r18, 0x0581	; 0x800581 <_ZN8SPIClass13interruptModeE>
    1080:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <_ZN8SPIClass13interruptSaveE>
    1084:	21 30       	cpi	r18, 0x01	; 1
    1086:	19 f4       	brne	.+6      	; 0x108e <_ZN8SPIClass14endTransactionEv+0x1e>
        SPI_AVR_EIMSK = interruptSave;
    1088:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    108a:	9f bf       	out	0x3f, r25	; 63
    108c:	08 95       	ret
      } else
      #endif
      {
        SREG = interruptSave;
    108e:	8f bf       	out	0x3f, r24	; 63
    1090:	08 95       	ret

00001092 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	08 95       	ret

00001098 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1098:	08 95       	ret

0000109a <_ZN12Adafruit_GFX9writeLineEiiiij>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size) {
  drawChar(x, y, c, color, bg, size, size);
}
    109a:	2f 92       	push	r2
    109c:	3f 92       	push	r3
    109e:	4f 92       	push	r4
    10a0:	5f 92       	push	r5
    10a2:	6f 92       	push	r6
    10a4:	7f 92       	push	r7
    10a6:	8f 92       	push	r8
    10a8:	9f 92       	push	r9
    10aa:	af 92       	push	r10
    10ac:	bf 92       	push	r11
    10ae:	cf 92       	push	r12
    10b0:	df 92       	push	r13
    10b2:	ef 92       	push	r14
    10b4:	ff 92       	push	r15
    10b6:	0f 93       	push	r16
    10b8:	1f 93       	push	r17
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <_ZN12Adafruit_GFX9writeLineEiiiij+0x26>
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <_ZN12Adafruit_GFX9writeLineEiiiij+0x28>
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	2c 01       	movw	r4, r24
    10c8:	7e 83       	std	Y+6, r23	; 0x06
    10ca:	6d 83       	std	Y+5, r22	; 0x05
    10cc:	6a 01       	movw	r12, r20
    10ce:	59 01       	movw	r10, r18
    10d0:	c8 01       	movw	r24, r16
    10d2:	fc 82       	std	Y+4, r15	; 0x04
    10d4:	eb 82       	std	Y+3, r14	; 0x03
    10d6:	48 01       	movw	r8, r16
    10d8:	84 1a       	sub	r8, r20
    10da:	95 0a       	sbc	r9, r21
    10dc:	97 fe       	sbrs	r9, 7
    10de:	03 c0       	rjmp	.+6      	; 0x10e6 <_ZN12Adafruit_GFX9writeLineEiiiij+0x4c>
    10e0:	91 94       	neg	r9
    10e2:	81 94       	neg	r8
    10e4:	91 08       	sbc	r9, r1
    10e6:	35 01       	movw	r6, r10
    10e8:	2d 81       	ldd	r18, Y+5	; 0x05
    10ea:	3e 81       	ldd	r19, Y+6	; 0x06
    10ec:	62 1a       	sub	r6, r18
    10ee:	73 0a       	sbc	r7, r19
    10f0:	77 fe       	sbrs	r7, 7
    10f2:	03 c0       	rjmp	.+6      	; 0x10fa <_ZN12Adafruit_GFX9writeLineEiiiij+0x60>
    10f4:	71 94       	neg	r7
    10f6:	61 94       	neg	r6
    10f8:	71 08       	sbc	r7, r1
    10fa:	68 14       	cp	r6, r8
    10fc:	79 04       	cpc	r7, r9
    10fe:	5c f4       	brge	.+22     	; 0x1116 <_ZN12Adafruit_GFX9writeLineEiiiij+0x7c>
    1100:	3a 2d       	mov	r19, r10
    1102:	2b 2d       	mov	r18, r11
    1104:	5c 01       	movw	r10, r24
    1106:	83 2f       	mov	r24, r19
    1108:	92 2f       	mov	r25, r18
    110a:	3d 81       	ldd	r19, Y+5	; 0x05
    110c:	2e 81       	ldd	r18, Y+6	; 0x06
    110e:	de 82       	std	Y+6, r13	; 0x06
    1110:	cd 82       	std	Y+5, r12	; 0x05
    1112:	c3 2e       	mov	r12, r19
    1114:	d2 2e       	mov	r13, r18
    1116:	ad 81       	ldd	r26, Y+5	; 0x05
    1118:	be 81       	ldd	r27, Y+6	; 0x06
    111a:	aa 16       	cp	r10, r26
    111c:	bb 06       	cpc	r11, r27
    111e:	5c f4       	brge	.+22     	; 0x1136 <_ZN12Adafruit_GFX9writeLineEiiiij+0x9c>
    1120:	3c 2d       	mov	r19, r12
    1122:	2d 2d       	mov	r18, r13
    1124:	6c 01       	movw	r12, r24
    1126:	83 2f       	mov	r24, r19
    1128:	92 2f       	mov	r25, r18
    112a:	3d 81       	ldd	r19, Y+5	; 0x05
    112c:	2e 81       	ldd	r18, Y+6	; 0x06
    112e:	be 82       	std	Y+6, r11	; 0x06
    1130:	ad 82       	std	Y+5, r10	; 0x05
    1132:	a3 2e       	mov	r10, r19
    1134:	b2 2e       	mov	r11, r18
    1136:	85 01       	movw	r16, r10
    1138:	2d 81       	ldd	r18, Y+5	; 0x05
    113a:	3e 81       	ldd	r19, Y+6	; 0x06
    113c:	02 1b       	sub	r16, r18
    113e:	13 0b       	sbc	r17, r19
    1140:	1c 01       	movw	r2, r24
    1142:	2c 18       	sub	r2, r12
    1144:	3d 08       	sbc	r3, r13
    1146:	37 fe       	sbrs	r3, 7
    1148:	03 c0       	rjmp	.+6      	; 0x1150 <_ZN12Adafruit_GFX9writeLineEiiiij+0xb6>
    114a:	31 94       	neg	r3
    114c:	21 94       	neg	r2
    114e:	31 08       	sbc	r3, r1
    1150:	78 01       	movw	r14, r16
    1152:	17 ff       	sbrs	r17, 7
    1154:	03 c0       	rjmp	.+6      	; 0x115c <_ZN12Adafruit_GFX9writeLineEiiiij+0xc2>
    1156:	3f ef       	ldi	r19, 0xFF	; 255
    1158:	e3 1a       	sub	r14, r19
    115a:	f3 0a       	sbc	r15, r19
    115c:	f5 94       	asr	r15
    115e:	e7 94       	ror	r14
    1160:	c8 16       	cp	r12, r24
    1162:	d9 06       	cpc	r13, r25
    1164:	2c f0       	brlt	.+10     	; 0x1170 <_ZN12Adafruit_GFX9writeLineEiiiij+0xd6>
    1166:	8f ef       	ldi	r24, 0xFF	; 255
    1168:	9f ef       	ldi	r25, 0xFF	; 255
    116a:	9a 83       	std	Y+2, r25	; 0x02
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	04 c0       	rjmp	.+8      	; 0x1178 <_ZN12Adafruit_GFX9writeLineEiiiij+0xde>
    1170:	a1 e0       	ldi	r26, 0x01	; 1
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	ba 83       	std	Y+2, r27	; 0x02
    1176:	a9 83       	std	Y+1, r26	; 0x01
    1178:	2d 81       	ldd	r18, Y+5	; 0x05
    117a:	3e 81       	ldd	r19, Y+6	; 0x06
    117c:	a2 16       	cp	r10, r18
    117e:	b3 06       	cpc	r11, r19
    1180:	24 f1       	brlt	.+72     	; 0x11ca <_ZN12Adafruit_GFX9writeLineEiiiij+0x130>
    1182:	d2 01       	movw	r26, r4
    1184:	ed 91       	ld	r30, X+
    1186:	fc 91       	ld	r31, X
    1188:	04 84       	ldd	r0, Z+12	; 0x0c
    118a:	f5 85       	ldd	r31, Z+13	; 0x0d
    118c:	e0 2d       	mov	r30, r0
    118e:	2b 81       	ldd	r18, Y+3	; 0x03
    1190:	3c 81       	ldd	r19, Y+4	; 0x04
    1192:	68 14       	cp	r6, r8
    1194:	79 04       	cpc	r7, r9
    1196:	24 f4       	brge	.+8      	; 0x11a0 <_ZN12Adafruit_GFX9writeLineEiiiij+0x106>
    1198:	4d 81       	ldd	r20, Y+5	; 0x05
    119a:	5e 81       	ldd	r21, Y+6	; 0x06
    119c:	b6 01       	movw	r22, r12
    119e:	03 c0       	rjmp	.+6      	; 0x11a6 <_ZN12Adafruit_GFX9writeLineEiiiij+0x10c>
    11a0:	a6 01       	movw	r20, r12
    11a2:	6d 81       	ldd	r22, Y+5	; 0x05
    11a4:	7e 81       	ldd	r23, Y+6	; 0x06
    11a6:	c2 01       	movw	r24, r4
    11a8:	19 95       	eicall
    11aa:	e2 18       	sub	r14, r2
    11ac:	f3 08       	sbc	r15, r3
    11ae:	f7 fe       	sbrs	r15, 7
    11b0:	06 c0       	rjmp	.+12     	; 0x11be <_ZN12Adafruit_GFX9writeLineEiiiij+0x124>
    11b2:	29 81       	ldd	r18, Y+1	; 0x01
    11b4:	3a 81       	ldd	r19, Y+2	; 0x02
    11b6:	c2 0e       	add	r12, r18
    11b8:	d3 1e       	adc	r13, r19
    11ba:	e0 0e       	add	r14, r16
    11bc:	f1 1e       	adc	r15, r17
    11be:	8d 81       	ldd	r24, Y+5	; 0x05
    11c0:	9e 81       	ldd	r25, Y+6	; 0x06
    11c2:	01 96       	adiw	r24, 0x01	; 1
    11c4:	9e 83       	std	Y+6, r25	; 0x06
    11c6:	8d 83       	std	Y+5, r24	; 0x05
    11c8:	d7 cf       	rjmp	.-82     	; 0x1178 <_ZN12Adafruit_GFX9writeLineEiiiij+0xde>
    11ca:	26 96       	adiw	r28, 0x06	; 6
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	1f 91       	pop	r17
    11dc:	0f 91       	pop	r16
    11de:	ff 90       	pop	r15
    11e0:	ef 90       	pop	r14
    11e2:	df 90       	pop	r13
    11e4:	cf 90       	pop	r12
    11e6:	bf 90       	pop	r11
    11e8:	af 90       	pop	r10
    11ea:	9f 90       	pop	r9
    11ec:	8f 90       	pop	r8
    11ee:	7f 90       	pop	r7
    11f0:	6f 90       	pop	r6
    11f2:	5f 90       	pop	r5
    11f4:	4f 90       	pop	r4
    11f6:	3f 90       	pop	r3
    11f8:	2f 90       	pop	r2
    11fa:	08 95       	ret

000011fc <_ZN12Adafruit_GFX10writePixelEiij>:
    11fc:	dc 01       	movw	r26, r24
    11fe:	ed 91       	ld	r30, X+
    1200:	fc 91       	ld	r31, X
    1202:	00 84       	ldd	r0, Z+8	; 0x08
    1204:	f1 85       	ldd	r31, Z+9	; 0x09
    1206:	e0 2d       	mov	r30, r0
    1208:	19 94       	eijmp

0000120a <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	dc 01       	movw	r26, r24
    1210:	ed 91       	ld	r30, X+
    1212:	fc 91       	ld	r31, X
    1214:	04 8c       	ldd	r0, Z+28	; 0x1c
    1216:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1218:	e0 2d       	mov	r30, r0
    121a:	19 95       	eicall
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	08 95       	ret

00001222 <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	dc 01       	movw	r26, r24
    1228:	ed 91       	ld	r30, X+
    122a:	fc 91       	ld	r31, X
    122c:	06 8c       	ldd	r0, Z+30	; 0x1e
    122e:	f7 8d       	ldd	r31, Z+31	; 0x1f
    1230:	e0 2d       	mov	r30, r0
    1232:	19 95       	eicall
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
    1238:	08 95       	ret

0000123a <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    123a:	ef 92       	push	r14
    123c:	ff 92       	push	r15
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	dc 01       	movw	r26, r24
    1244:	ed 91       	ld	r30, X+
    1246:	fc 91       	ld	r31, X
    1248:	00 a0       	ldd	r0, Z+32	; 0x20
    124a:	f1 a1       	ldd	r31, Z+33	; 0x21
    124c:	e0 2d       	mov	r30, r0
    124e:	19 95       	eicall
    1250:	1f 91       	pop	r17
    1252:	0f 91       	pop	r16
    1254:	ff 90       	pop	r15
    1256:	ef 90       	pop	r14
    1258:	08 95       	ret

0000125a <_ZN12Adafruit_GFX10startWriteEv>:
    125a:	08 95       	ret

0000125c <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    125c:	8f 92       	push	r8
    125e:	9f 92       	push	r9
    1260:	af 92       	push	r10
    1262:	bf 92       	push	r11
    1264:	cf 92       	push	r12
    1266:	df 92       	push	r13
    1268:	ef 92       	push	r14
    126a:	ff 92       	push	r15
    126c:	0f 93       	push	r16
    126e:	1f 93       	push	r17
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	ec 01       	movw	r28, r24
    1276:	5b 01       	movw	r10, r22
    1278:	4a 01       	movw	r8, r20
    127a:	69 01       	movw	r12, r18
    127c:	78 01       	movw	r14, r16
    127e:	e8 81       	ld	r30, Y
    1280:	f9 81       	ldd	r31, Y+1	; 0x01
    1282:	02 84       	ldd	r0, Z+10	; 0x0a
    1284:	f3 85       	ldd	r31, Z+11	; 0x0b
    1286:	e0 2d       	mov	r30, r0
    1288:	19 95       	eicall
    128a:	c8 0c       	add	r12, r8
    128c:	d9 1c       	adc	r13, r9
    128e:	86 01       	movw	r16, r12
    1290:	01 50       	subi	r16, 0x01	; 1
    1292:	11 09       	sbc	r17, r1
    1294:	e8 81       	ld	r30, Y
    1296:	f9 81       	ldd	r31, Y+1	; 0x01
    1298:	04 88       	ldd	r0, Z+20	; 0x14
    129a:	f5 89       	ldd	r31, Z+21	; 0x15
    129c:	e0 2d       	mov	r30, r0
    129e:	95 01       	movw	r18, r10
    12a0:	a4 01       	movw	r20, r8
    12a2:	b5 01       	movw	r22, r10
    12a4:	ce 01       	movw	r24, r28
    12a6:	19 95       	eicall
    12a8:	e8 81       	ld	r30, Y
    12aa:	f9 81       	ldd	r31, Y+1	; 0x01
    12ac:	06 88       	ldd	r0, Z+22	; 0x16
    12ae:	f7 89       	ldd	r31, Z+23	; 0x17
    12b0:	e0 2d       	mov	r30, r0
    12b2:	ce 01       	movw	r24, r28
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	1f 91       	pop	r17
    12ba:	0f 91       	pop	r16
    12bc:	ff 90       	pop	r15
    12be:	ef 90       	pop	r14
    12c0:	df 90       	pop	r13
    12c2:	cf 90       	pop	r12
    12c4:	bf 90       	pop	r11
    12c6:	af 90       	pop	r10
    12c8:	9f 90       	pop	r9
    12ca:	8f 90       	pop	r8
    12cc:	19 94       	eijmp

000012ce <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    12ce:	8f 92       	push	r8
    12d0:	9f 92       	push	r9
    12d2:	af 92       	push	r10
    12d4:	bf 92       	push	r11
    12d6:	cf 92       	push	r12
    12d8:	df 92       	push	r13
    12da:	ef 92       	push	r14
    12dc:	ff 92       	push	r15
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	ec 01       	movw	r28, r24
    12e8:	5b 01       	movw	r10, r22
    12ea:	4a 01       	movw	r8, r20
    12ec:	69 01       	movw	r12, r18
    12ee:	e8 81       	ld	r30, Y
    12f0:	f9 81       	ldd	r31, Y+1	; 0x01
    12f2:	02 84       	ldd	r0, Z+10	; 0x0a
    12f4:	f3 85       	ldd	r31, Z+11	; 0x0b
    12f6:	e0 2d       	mov	r30, r0
    12f8:	19 95       	eicall
    12fa:	95 01       	movw	r18, r10
    12fc:	2c 0d       	add	r18, r12
    12fe:	3d 1d       	adc	r19, r13
    1300:	21 50       	subi	r18, 0x01	; 1
    1302:	31 09       	sbc	r19, r1
    1304:	e8 81       	ld	r30, Y
    1306:	f9 81       	ldd	r31, Y+1	; 0x01
    1308:	04 88       	ldd	r0, Z+20	; 0x14
    130a:	f5 89       	ldd	r31, Z+21	; 0x15
    130c:	e0 2d       	mov	r30, r0
    130e:	78 01       	movw	r14, r16
    1310:	84 01       	movw	r16, r8
    1312:	a4 01       	movw	r20, r8
    1314:	b5 01       	movw	r22, r10
    1316:	ce 01       	movw	r24, r28
    1318:	19 95       	eicall
    131a:	e8 81       	ld	r30, Y
    131c:	f9 81       	ldd	r31, Y+1	; 0x01
    131e:	06 88       	ldd	r0, Z+22	; 0x16
    1320:	f7 89       	ldd	r31, Z+23	; 0x17
    1322:	e0 2d       	mov	r30, r0
    1324:	ce 01       	movw	r24, r28
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	1f 91       	pop	r17
    132c:	0f 91       	pop	r16
    132e:	ff 90       	pop	r15
    1330:	ef 90       	pop	r14
    1332:	df 90       	pop	r13
    1334:	cf 90       	pop	r12
    1336:	bf 90       	pop	r11
    1338:	af 90       	pop	r10
    133a:	9f 90       	pop	r9
    133c:	8f 90       	pop	r8
    133e:	19 94       	eijmp

00001340 <_ZN12Adafruit_GFX8fillRectEiiiij>:
    1340:	4f 92       	push	r4
    1342:	5f 92       	push	r5
    1344:	6f 92       	push	r6
    1346:	7f 92       	push	r7
    1348:	8f 92       	push	r8
    134a:	9f 92       	push	r9
    134c:	af 92       	push	r10
    134e:	bf 92       	push	r11
    1350:	cf 92       	push	r12
    1352:	df 92       	push	r13
    1354:	ef 92       	push	r14
    1356:	ff 92       	push	r15
    1358:	0f 93       	push	r16
    135a:	1f 93       	push	r17
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	6c 01       	movw	r12, r24
    1362:	2b 01       	movw	r4, r22
    1364:	5a 01       	movw	r10, r20
    1366:	39 01       	movw	r6, r18
    1368:	48 01       	movw	r8, r16
    136a:	dc 01       	movw	r26, r24
    136c:	ed 91       	ld	r30, X+
    136e:	fc 91       	ld	r31, X
    1370:	02 84       	ldd	r0, Z+10	; 0x0a
    1372:	f3 85       	ldd	r31, Z+11	; 0x0b
    1374:	e0 2d       	mov	r30, r0
    1376:	19 95       	eicall
    1378:	e2 01       	movw	r28, r4
    137a:	64 0c       	add	r6, r4
    137c:	75 1c       	adc	r7, r5
    137e:	d6 01       	movw	r26, r12
    1380:	ed 91       	ld	r30, X+
    1382:	fc 91       	ld	r31, X
    1384:	c6 15       	cp	r28, r6
    1386:	d7 05       	cpc	r29, r7
    1388:	5c f4       	brge	.+22     	; 0x13a0 <_ZN12Adafruit_GFX8fillRectEiiiij+0x60>
    138a:	00 88       	ldd	r0, Z+16	; 0x10
    138c:	f1 89       	ldd	r31, Z+17	; 0x11
    138e:	e0 2d       	mov	r30, r0
    1390:	87 01       	movw	r16, r14
    1392:	94 01       	movw	r18, r8
    1394:	a5 01       	movw	r20, r10
    1396:	be 01       	movw	r22, r28
    1398:	c6 01       	movw	r24, r12
    139a:	19 95       	eicall
    139c:	21 96       	adiw	r28, 0x01	; 1
    139e:	ef cf       	rjmp	.-34     	; 0x137e <_ZN12Adafruit_GFX8fillRectEiiiij+0x3e>
    13a0:	06 88       	ldd	r0, Z+22	; 0x16
    13a2:	f7 89       	ldd	r31, Z+23	; 0x17
    13a4:	e0 2d       	mov	r30, r0
    13a6:	c6 01       	movw	r24, r12
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	1f 91       	pop	r17
    13ae:	0f 91       	pop	r16
    13b0:	ff 90       	pop	r15
    13b2:	ef 90       	pop	r14
    13b4:	df 90       	pop	r13
    13b6:	cf 90       	pop	r12
    13b8:	bf 90       	pop	r11
    13ba:	af 90       	pop	r10
    13bc:	9f 90       	pop	r9
    13be:	8f 90       	pop	r8
    13c0:	7f 90       	pop	r7
    13c2:	6f 90       	pop	r6
    13c4:	5f 90       	pop	r5
    13c6:	4f 90       	pop	r4
    13c8:	19 94       	eijmp

000013ca <_ZN12Adafruit_GFX10fillScreenEj>:
    13ca:	ef 92       	push	r14
    13cc:	ff 92       	push	r15
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	dc 01       	movw	r26, r24
    13d4:	1a 96       	adiw	r26, 0x0a	; 10
    13d6:	0d 91       	ld	r16, X+
    13d8:	1c 91       	ld	r17, X
    13da:	1b 97       	sbiw	r26, 0x0b	; 11
    13dc:	18 96       	adiw	r26, 0x08	; 8
    13de:	2d 91       	ld	r18, X+
    13e0:	3c 91       	ld	r19, X
    13e2:	19 97       	sbiw	r26, 0x09	; 9
    13e4:	ed 91       	ld	r30, X+
    13e6:	fc 91       	ld	r31, X
    13e8:	00 a0       	ldd	r0, Z+32	; 0x20
    13ea:	f1 a1       	ldd	r31, Z+33	; 0x21
    13ec:	e0 2d       	mov	r30, r0
    13ee:	7b 01       	movw	r14, r22
    13f0:	40 e0       	ldi	r20, 0x00	; 0
    13f2:	50 e0       	ldi	r21, 0x00	; 0
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	19 95       	eicall
    13fa:	1f 91       	pop	r17
    13fc:	0f 91       	pop	r16
    13fe:	ff 90       	pop	r15
    1400:	ef 90       	pop	r14
    1402:	08 95       	ret

00001404 <_ZN12Adafruit_GFX8drawLineEiiiij>:
    1404:	8f 92       	push	r8
    1406:	9f 92       	push	r9
    1408:	af 92       	push	r10
    140a:	bf 92       	push	r11
    140c:	cf 92       	push	r12
    140e:	df 92       	push	r13
    1410:	ef 92       	push	r14
    1412:	ff 92       	push	r15
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	4c 01       	movw	r8, r24
    141e:	6b 01       	movw	r12, r22
    1420:	5a 01       	movw	r10, r20
    1422:	e9 01       	movw	r28, r18
    1424:	dc 01       	movw	r26, r24
    1426:	ed 91       	ld	r30, X+
    1428:	fc 91       	ld	r31, X
    142a:	62 17       	cp	r22, r18
    142c:	73 07       	cpc	r23, r19
    142e:	81 f4       	brne	.+32     	; 0x1450 <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
    1430:	04 17       	cp	r16, r20
    1432:	15 07       	cpc	r17, r21
    1434:	24 f4       	brge	.+8      	; 0x143e <_ZN12Adafruit_GFX8drawLineEiiiij+0x3a>
    1436:	8b 2d       	mov	r24, r11
    1438:	58 01       	movw	r10, r16
    143a:	04 2f       	mov	r16, r20
    143c:	18 2f       	mov	r17, r24
    143e:	0a 19       	sub	r16, r10
    1440:	1b 09       	sbc	r17, r11
    1442:	98 01       	movw	r18, r16
    1444:	2f 5f       	subi	r18, 0xFF	; 255
    1446:	3f 4f       	sbci	r19, 0xFF	; 255
    1448:	04 8c       	ldd	r0, Z+28	; 0x1c
    144a:	f5 8d       	ldd	r31, Z+29	; 0x1d
    144c:	e0 2d       	mov	r30, r0
    144e:	12 c0       	rjmp	.+36     	; 0x1474 <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
    1450:	40 17       	cp	r20, r16
    1452:	51 07       	cpc	r21, r17
    1454:	09 f5       	brne	.+66     	; 0x1498 <_ZN12Adafruit_GFX8drawLineEiiiij+0x94>
    1456:	26 17       	cp	r18, r22
    1458:	37 07       	cpc	r19, r23
    145a:	24 f4       	brge	.+8      	; 0x1464 <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
    145c:	8d 2d       	mov	r24, r13
    145e:	69 01       	movw	r12, r18
    1460:	c6 2f       	mov	r28, r22
    1462:	d8 2f       	mov	r29, r24
    1464:	9e 01       	movw	r18, r28
    1466:	2c 19       	sub	r18, r12
    1468:	3d 09       	sbc	r19, r13
    146a:	2f 5f       	subi	r18, 0xFF	; 255
    146c:	3f 4f       	sbci	r19, 0xFF	; 255
    146e:	06 8c       	ldd	r0, Z+30	; 0x1e
    1470:	f7 8d       	ldd	r31, Z+31	; 0x1f
    1472:	e0 2d       	mov	r30, r0
    1474:	87 01       	movw	r16, r14
    1476:	a5 01       	movw	r20, r10
    1478:	b6 01       	movw	r22, r12
    147a:	c4 01       	movw	r24, r8
    147c:	19 95       	eicall
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	1f 91       	pop	r17
    1484:	0f 91       	pop	r16
    1486:	ff 90       	pop	r15
    1488:	ef 90       	pop	r14
    148a:	df 90       	pop	r13
    148c:	cf 90       	pop	r12
    148e:	bf 90       	pop	r11
    1490:	af 90       	pop	r10
    1492:	9f 90       	pop	r9
    1494:	8f 90       	pop	r8
    1496:	08 95       	ret
    1498:	02 84       	ldd	r0, Z+10	; 0x0a
    149a:	f3 85       	ldd	r31, Z+11	; 0x0b
    149c:	e0 2d       	mov	r30, r0
    149e:	19 95       	eicall
    14a0:	d4 01       	movw	r26, r8
    14a2:	ed 91       	ld	r30, X+
    14a4:	fc 91       	ld	r31, X
    14a6:	04 88       	ldd	r0, Z+20	; 0x14
    14a8:	f5 89       	ldd	r31, Z+21	; 0x15
    14aa:	e0 2d       	mov	r30, r0
    14ac:	9e 01       	movw	r18, r28
    14ae:	a5 01       	movw	r20, r10
    14b0:	b6 01       	movw	r22, r12
    14b2:	c4 01       	movw	r24, r8
    14b4:	19 95       	eicall
    14b6:	d4 01       	movw	r26, r8
    14b8:	ed 91       	ld	r30, X+
    14ba:	fc 91       	ld	r31, X
    14bc:	06 88       	ldd	r0, Z+22	; 0x16
    14be:	f7 89       	ldd	r31, Z+23	; 0x17
    14c0:	e0 2d       	mov	r30, r0
    14c2:	c4 01       	movw	r24, r8
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	1f 91       	pop	r17
    14ca:	0f 91       	pop	r16
    14cc:	ff 90       	pop	r15
    14ce:	ef 90       	pop	r14
    14d0:	df 90       	pop	r13
    14d2:	cf 90       	pop	r12
    14d4:	bf 90       	pop	r11
    14d6:	af 90       	pop	r10
    14d8:	9f 90       	pop	r9
    14da:	8f 90       	pop	r8
    14dc:	19 94       	eijmp

000014de <_ZN12Adafruit_GFX8drawRectEiiiij>:
    14de:	6f 92       	push	r6
    14e0:	7f 92       	push	r7
    14e2:	8f 92       	push	r8
    14e4:	9f 92       	push	r9
    14e6:	af 92       	push	r10
    14e8:	bf 92       	push	r11
    14ea:	cf 92       	push	r12
    14ec:	df 92       	push	r13
    14ee:	ef 92       	push	r14
    14f0:	ff 92       	push	r15
    14f2:	0f 93       	push	r16
    14f4:	1f 93       	push	r17
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	ec 01       	movw	r28, r24
    14fc:	4b 01       	movw	r8, r22
    14fe:	5a 01       	movw	r10, r20
    1500:	69 01       	movw	r12, r18
    1502:	38 01       	movw	r6, r16
    1504:	e8 81       	ld	r30, Y
    1506:	f9 81       	ldd	r31, Y+1	; 0x01
    1508:	02 84       	ldd	r0, Z+10	; 0x0a
    150a:	f3 85       	ldd	r31, Z+11	; 0x0b
    150c:	e0 2d       	mov	r30, r0
    150e:	19 95       	eicall
    1510:	e8 81       	ld	r30, Y
    1512:	f9 81       	ldd	r31, Y+1	; 0x01
    1514:	02 88       	ldd	r0, Z+18	; 0x12
    1516:	f3 89       	ldd	r31, Z+19	; 0x13
    1518:	e0 2d       	mov	r30, r0
    151a:	87 01       	movw	r16, r14
    151c:	96 01       	movw	r18, r12
    151e:	a5 01       	movw	r20, r10
    1520:	b4 01       	movw	r22, r8
    1522:	ce 01       	movw	r24, r28
    1524:	19 95       	eicall
    1526:	a5 01       	movw	r20, r10
    1528:	46 0d       	add	r20, r6
    152a:	57 1d       	adc	r21, r7
    152c:	41 50       	subi	r20, 0x01	; 1
    152e:	51 09       	sbc	r21, r1
    1530:	e8 81       	ld	r30, Y
    1532:	f9 81       	ldd	r31, Y+1	; 0x01
    1534:	02 88       	ldd	r0, Z+18	; 0x12
    1536:	f3 89       	ldd	r31, Z+19	; 0x13
    1538:	e0 2d       	mov	r30, r0
    153a:	96 01       	movw	r18, r12
    153c:	b4 01       	movw	r22, r8
    153e:	ce 01       	movw	r24, r28
    1540:	19 95       	eicall
    1542:	e8 81       	ld	r30, Y
    1544:	f9 81       	ldd	r31, Y+1	; 0x01
    1546:	00 88       	ldd	r0, Z+16	; 0x10
    1548:	f1 89       	ldd	r31, Z+17	; 0x11
    154a:	e0 2d       	mov	r30, r0
    154c:	93 01       	movw	r18, r6
    154e:	a5 01       	movw	r20, r10
    1550:	b4 01       	movw	r22, r8
    1552:	ce 01       	movw	r24, r28
    1554:	19 95       	eicall
    1556:	c8 0c       	add	r12, r8
    1558:	d9 1c       	adc	r13, r9
    155a:	b6 01       	movw	r22, r12
    155c:	61 50       	subi	r22, 0x01	; 1
    155e:	71 09       	sbc	r23, r1
    1560:	e8 81       	ld	r30, Y
    1562:	f9 81       	ldd	r31, Y+1	; 0x01
    1564:	00 88       	ldd	r0, Z+16	; 0x10
    1566:	f1 89       	ldd	r31, Z+17	; 0x11
    1568:	e0 2d       	mov	r30, r0
    156a:	93 01       	movw	r18, r6
    156c:	a5 01       	movw	r20, r10
    156e:	ce 01       	movw	r24, r28
    1570:	19 95       	eicall
    1572:	e8 81       	ld	r30, Y
    1574:	f9 81       	ldd	r31, Y+1	; 0x01
    1576:	06 88       	ldd	r0, Z+22	; 0x16
    1578:	f7 89       	ldd	r31, Z+23	; 0x17
    157a:	e0 2d       	mov	r30, r0
    157c:	ce 01       	movw	r24, r28
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	1f 91       	pop	r17
    1584:	0f 91       	pop	r16
    1586:	ff 90       	pop	r15
    1588:	ef 90       	pop	r14
    158a:	df 90       	pop	r13
    158c:	cf 90       	pop	r12
    158e:	bf 90       	pop	r11
    1590:	af 90       	pop	r10
    1592:	9f 90       	pop	r9
    1594:	8f 90       	pop	r8
    1596:	7f 90       	pop	r7
    1598:	6f 90       	pop	r6
    159a:	19 94       	eijmp

0000159c <_ZN12Adafruit_GFX13invertDisplayEb>:
    159c:	08 95       	ret

0000159e <_ZN12Adafruit_GFX11setRotationEh>:
    159e:	fc 01       	movw	r30, r24
    15a0:	63 70       	andi	r22, 0x03	; 3
    15a2:	66 8b       	std	Z+22, r22	; 0x16
    15a4:	84 81       	ldd	r24, Z+4	; 0x04
    15a6:	95 81       	ldd	r25, Z+5	; 0x05
    15a8:	26 81       	ldd	r18, Z+6	; 0x06
    15aa:	37 81       	ldd	r19, Z+7	; 0x07
    15ac:	61 30       	cpi	r22, 0x01	; 1
    15ae:	39 f0       	breq	.+14     	; 0x15be <_ZN12Adafruit_GFX11setRotationEh+0x20>
    15b0:	63 30       	cpi	r22, 0x03	; 3
    15b2:	29 f0       	breq	.+10     	; 0x15be <_ZN12Adafruit_GFX11setRotationEh+0x20>
    15b4:	91 87       	std	Z+9, r25	; 0x09
    15b6:	80 87       	std	Z+8, r24	; 0x08
    15b8:	33 87       	std	Z+11, r19	; 0x0b
    15ba:	22 87       	std	Z+10, r18	; 0x0a
    15bc:	08 95       	ret
    15be:	31 87       	std	Z+9, r19	; 0x09
    15c0:	20 87       	std	Z+8, r18	; 0x08
    15c2:	93 87       	std	Z+11, r25	; 0x0b
    15c4:	82 87       	std	Z+10, r24	; 0x0a
    15c6:	08 95       	ret

000015c8 <_ZN12Adafruit_GFXC1Eii>:
    15c8:	fc 01       	movw	r30, r24
    15ca:	13 82       	std	Z+3, r1	; 0x03
    15cc:	12 82       	std	Z+2, r1	; 0x02
    15ce:	8b e2       	ldi	r24, 0x2B	; 43
    15d0:	94 e0       	ldi	r25, 0x04	; 4
    15d2:	91 83       	std	Z+1, r25	; 0x01
    15d4:	80 83       	st	Z, r24
    15d6:	75 83       	std	Z+5, r23	; 0x05
    15d8:	64 83       	std	Z+4, r22	; 0x04
    15da:	57 83       	std	Z+7, r21	; 0x07
    15dc:	46 83       	std	Z+6, r20	; 0x06
    15de:	71 87       	std	Z+9, r23	; 0x09
    15e0:	60 87       	std	Z+8, r22	; 0x08
    15e2:	53 87       	std	Z+11, r21	; 0x0b
    15e4:	42 87       	std	Z+10, r20	; 0x0a
    15e6:	16 8a       	std	Z+22, r1	; 0x16
    15e8:	15 86       	std	Z+13, r1	; 0x0d
    15ea:	14 86       	std	Z+12, r1	; 0x0c
    15ec:	17 86       	std	Z+15, r1	; 0x0f
    15ee:	16 86       	std	Z+14, r1	; 0x0e
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	85 8b       	std	Z+21, r24	; 0x15
    15f4:	84 8b       	std	Z+20, r24	; 0x14
    15f6:	2f ef       	ldi	r18, 0xFF	; 255
    15f8:	3f ef       	ldi	r19, 0xFF	; 255
    15fa:	33 8b       	std	Z+19, r19	; 0x13
    15fc:	22 8b       	std	Z+18, r18	; 0x12
    15fe:	31 8b       	std	Z+17, r19	; 0x11
    1600:	20 8b       	std	Z+16, r18	; 0x10
    1602:	87 8b       	std	Z+23, r24	; 0x17
    1604:	10 8e       	std	Z+24, r1	; 0x18
    1606:	12 8e       	std	Z+26, r1	; 0x1a
    1608:	11 8e       	std	Z+25, r1	; 0x19
    160a:	08 95       	ret

0000160c <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>:
    160c:	3f 92       	push	r3
    160e:	4f 92       	push	r4
    1610:	5f 92       	push	r5
    1612:	6f 92       	push	r6
    1614:	7f 92       	push	r7
    1616:	8f 92       	push	r8
    1618:	9f 92       	push	r9
    161a:	af 92       	push	r10
    161c:	bf 92       	push	r11
    161e:	cf 92       	push	r12
    1620:	df 92       	push	r13
    1622:	ef 92       	push	r14
    1624:	ff 92       	push	r15
    1626:	0f 93       	push	r16
    1628:	1f 93       	push	r17
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	2a 97       	sbiw	r28, 0x0a	; 10
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	5c 01       	movw	r10, r24
    1640:	7e 83       	std	Y+6, r23	; 0x06
    1642:	6d 83       	std	Y+5, r22	; 0x05
    1644:	58 87       	std	Y+8, r21	; 0x08
    1646:	4f 83       	std	Y+7, r20	; 0x07
    1648:	29 01       	movw	r4, r18
    164a:	37 01       	movw	r6, r14
    164c:	dc 01       	movw	r26, r24
    164e:	ed 91       	ld	r30, X+
    1650:	fc 91       	ld	r31, X
    1652:	02 84       	ldd	r0, Z+10	; 0x0a
    1654:	f3 85       	ldd	r31, Z+11	; 0x0b
    1656:	e0 2d       	mov	r30, r0
    1658:	19 95       	eicall
    165a:	c8 01       	movw	r24, r16
    165c:	07 96       	adiw	r24, 0x07	; 7
    165e:	97 fd       	sbrc	r25, 7
    1660:	07 96       	adiw	r24, 0x07	; 7
    1662:	9c 01       	movw	r18, r24
    1664:	93 e0       	ldi	r25, 0x03	; 3
    1666:	35 95       	asr	r19
    1668:	27 95       	ror	r18
    166a:	9a 95       	dec	r25
    166c:	e1 f7       	brne	.-8      	; 0x1666 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x5a>
    166e:	3a 83       	std	Y+2, r19	; 0x02
    1670:	29 83       	std	Y+1, r18	; 0x01
    1672:	81 2c       	mov	r8, r1
    1674:	91 2c       	mov	r9, r1
    1676:	e1 2c       	mov	r14, r1
    1678:	f1 2c       	mov	r15, r1
    167a:	31 2c       	mov	r3, r1
    167c:	8f 81       	ldd	r24, Y+7	; 0x07
    167e:	98 85       	ldd	r25, Y+8	; 0x08
    1680:	8e 0d       	add	r24, r14
    1682:	9f 1d       	adc	r25, r15
    1684:	9c 83       	std	Y+4, r25	; 0x04
    1686:	8b 83       	std	Y+3, r24	; 0x03
    1688:	e6 14       	cp	r14, r6
    168a:	f7 04       	cpc	r15, r7
    168c:	0c f0       	brlt	.+2      	; 0x1690 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x84>
    168e:	3d c0       	rjmp	.+122    	; 0x170a <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xfe>
    1690:	1a 86       	std	Y+10, r1	; 0x0a
    1692:	19 86       	std	Y+9, r1	; 0x09
    1694:	a9 85       	ldd	r26, Y+9	; 0x09
    1696:	ba 85       	ldd	r27, Y+10	; 0x0a
    1698:	a0 17       	cp	r26, r16
    169a:	b1 07       	cpc	r27, r17
    169c:	74 f5       	brge	.+92     	; 0x16fa <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xee>
    169e:	cd 01       	movw	r24, r26
    16a0:	87 70       	andi	r24, 0x07	; 7
    16a2:	99 27       	eor	r25, r25
    16a4:	89 2b       	or	r24, r25
    16a6:	11 f0       	breq	.+4      	; 0x16ac <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xa0>
    16a8:	33 0c       	add	r3, r3
    16aa:	0e c0       	rjmp	.+28     	; 0x16c8 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xbc>
    16ac:	e9 85       	ldd	r30, Y+9	; 0x09
    16ae:	fa 85       	ldd	r31, Y+10	; 0x0a
    16b0:	f7 fd       	sbrc	r31, 7
    16b2:	37 96       	adiw	r30, 0x07	; 7
    16b4:	83 e0       	ldi	r24, 0x03	; 3
    16b6:	f5 95       	asr	r31
    16b8:	e7 95       	ror	r30
    16ba:	8a 95       	dec	r24
    16bc:	e1 f7       	brne	.-8      	; 0x16b6 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xaa>
    16be:	e8 0d       	add	r30, r8
    16c0:	f9 1d       	adc	r31, r9
    16c2:	e4 0d       	add	r30, r4
    16c4:	f5 1d       	adc	r31, r5
    16c6:	34 90       	lpm	r3, Z
    16c8:	37 fe       	sbrs	r3, 7
    16ca:	11 c0       	rjmp	.+34     	; 0x16ee <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xe2>
    16cc:	d5 01       	movw	r26, r10
    16ce:	ed 91       	ld	r30, X+
    16d0:	fc 91       	ld	r31, X
    16d2:	04 84       	ldd	r0, Z+12	; 0x0c
    16d4:	f5 85       	ldd	r31, Z+13	; 0x0d
    16d6:	e0 2d       	mov	r30, r0
    16d8:	96 01       	movw	r18, r12
    16da:	4b 81       	ldd	r20, Y+3	; 0x03
    16dc:	5c 81       	ldd	r21, Y+4	; 0x04
    16de:	6d 81       	ldd	r22, Y+5	; 0x05
    16e0:	7e 81       	ldd	r23, Y+6	; 0x06
    16e2:	89 85       	ldd	r24, Y+9	; 0x09
    16e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e6:	68 0f       	add	r22, r24
    16e8:	79 1f       	adc	r23, r25
    16ea:	c5 01       	movw	r24, r10
    16ec:	19 95       	eicall
    16ee:	a9 85       	ldd	r26, Y+9	; 0x09
    16f0:	ba 85       	ldd	r27, Y+10	; 0x0a
    16f2:	11 96       	adiw	r26, 0x01	; 1
    16f4:	ba 87       	std	Y+10, r27	; 0x0a
    16f6:	a9 87       	std	Y+9, r26	; 0x09
    16f8:	cd cf       	rjmp	.-102    	; 0x1694 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x88>
    16fa:	bf ef       	ldi	r27, 0xFF	; 255
    16fc:	eb 1a       	sub	r14, r27
    16fe:	fb 0a       	sbc	r15, r27
    1700:	29 81       	ldd	r18, Y+1	; 0x01
    1702:	3a 81       	ldd	r19, Y+2	; 0x02
    1704:	82 0e       	add	r8, r18
    1706:	93 1e       	adc	r9, r19
    1708:	b9 cf       	rjmp	.-142    	; 0x167c <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x70>
    170a:	d5 01       	movw	r26, r10
    170c:	ed 91       	ld	r30, X+
    170e:	fc 91       	ld	r31, X
    1710:	06 88       	ldd	r0, Z+22	; 0x16
    1712:	f7 89       	ldd	r31, Z+23	; 0x17
    1714:	e0 2d       	mov	r30, r0
    1716:	c5 01       	movw	r24, r10
    1718:	2a 96       	adiw	r28, 0x0a	; 10
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	1f 91       	pop	r17
    172a:	0f 91       	pop	r16
    172c:	ff 90       	pop	r15
    172e:	ef 90       	pop	r14
    1730:	df 90       	pop	r13
    1732:	cf 90       	pop	r12
    1734:	bf 90       	pop	r11
    1736:	af 90       	pop	r10
    1738:	9f 90       	pop	r9
    173a:	8f 90       	pop	r8
    173c:	7f 90       	pop	r7
    173e:	6f 90       	pop	r6
    1740:	5f 90       	pop	r5
    1742:	4f 90       	pop	r4
    1744:	3f 90       	pop	r3
    1746:	19 94       	eijmp

00001748 <_ZN12Adafruit_GFX8drawCharEiihjjhh>:
    1748:	2f 92       	push	r2
    174a:	3f 92       	push	r3
    174c:	4f 92       	push	r4
    174e:	5f 92       	push	r5
    1750:	6f 92       	push	r6
    1752:	7f 92       	push	r7
    1754:	8f 92       	push	r8
    1756:	9f 92       	push	r9
    1758:	af 92       	push	r10
    175a:	bf 92       	push	r11
    175c:	cf 92       	push	r12
    175e:	df 92       	push	r13
    1760:	ef 92       	push	r14
    1762:	ff 92       	push	r15
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	6b 97       	sbiw	r28, 0x1b	; 27
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	f8 94       	cli
    1776:	de bf       	out	0x3e, r29	; 62
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	cd bf       	out	0x3d, r28	; 61
    177c:	9b 8f       	std	Y+27, r25	; 0x1b
    177e:	8a 8f       	std	Y+26, r24	; 0x1a
    1780:	2b 01       	movw	r4, r22
    1782:	5a 83       	std	Y+2, r21	; 0x02
    1784:	49 83       	std	Y+1, r20	; 0x01
    1786:	d2 2e       	mov	r13, r18
    1788:	19 87       	std	Y+9, r17	; 0x09
    178a:	08 87       	std	Y+8, r16	; 0x08
    178c:	47 01       	movw	r8, r14
    178e:	ab 82       	std	Y+3, r10	; 0x03
    1790:	dc 01       	movw	r26, r24
    1792:	59 96       	adiw	r26, 0x19	; 25
    1794:	2d 91       	ld	r18, X+
    1796:	3c 91       	ld	r19, X
    1798:	5a 97       	sbiw	r26, 0x1a	; 26
    179a:	21 15       	cp	r18, r1
    179c:	31 05       	cpc	r19, r1
    179e:	09 f0       	breq	.+2      	; 0x17a2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x5a>
    17a0:	00 c1       	rjmp	.+512    	; 0x19a2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x25a>
    17a2:	18 96       	adiw	r26, 0x08	; 8
    17a4:	8d 91       	ld	r24, X+
    17a6:	9c 91       	ld	r25, X
    17a8:	19 97       	sbiw	r26, 0x09	; 9
    17aa:	68 17       	cp	r22, r24
    17ac:	79 07       	cpc	r23, r25
    17ae:	0c f0       	brlt	.+2      	; 0x17b2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x6a>
    17b0:	e7 c1       	rjmp	.+974    	; 0x1b80 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    17b2:	1a 96       	adiw	r26, 0x0a	; 10
    17b4:	8d 91       	ld	r24, X+
    17b6:	9c 91       	ld	r25, X
    17b8:	1b 97       	sbiw	r26, 0x0b	; 11
    17ba:	48 17       	cp	r20, r24
    17bc:	59 07       	cpc	r21, r25
    17be:	0c f0       	brlt	.+2      	; 0x17c2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x7a>
    17c0:	df c1       	rjmp	.+958    	; 0x1b80 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    17c2:	2c 2c       	mov	r2, r12
    17c4:	31 2c       	mov	r3, r1
    17c6:	fb 01       	movw	r30, r22
    17c8:	26 e0       	ldi	r18, 0x06	; 6
    17ca:	c2 9e       	mul	r12, r18
    17cc:	e0 0d       	add	r30, r0
    17ce:	f1 1d       	adc	r31, r1
    17d0:	11 24       	eor	r1, r1
    17d2:	fd 87       	std	Y+13, r31	; 0x0d
    17d4:	ec 87       	std	Y+12, r30	; 0x0c
    17d6:	1e 16       	cp	r1, r30
    17d8:	1f 06       	cpc	r1, r31
    17da:	0c f0       	brlt	.+2      	; 0x17de <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x96>
    17dc:	d1 c1       	rjmp	.+930    	; 0x1b80 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    17de:	4a 2d       	mov	r20, r10
    17e0:	50 e0       	ldi	r21, 0x00	; 0
    17e2:	5b 87       	std	Y+11, r21	; 0x0b
    17e4:	4a 87       	std	Y+10, r20	; 0x0a
    17e6:	83 e0       	ldi	r24, 0x03	; 3
    17e8:	44 0f       	add	r20, r20
    17ea:	55 1f       	adc	r21, r21
    17ec:	8a 95       	dec	r24
    17ee:	e1 f7       	brne	.-8      	; 0x17e8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xa0>
    17f0:	5f 87       	std	Y+15, r21	; 0x0f
    17f2:	4e 87       	std	Y+14, r20	; 0x0e
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	9a 81       	ldd	r25, Y+2	; 0x02
    17f8:	84 0f       	add	r24, r20
    17fa:	95 1f       	adc	r25, r21
    17fc:	18 16       	cp	r1, r24
    17fe:	19 06       	cpc	r1, r25
    1800:	0c f0       	brlt	.+2      	; 0x1804 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xbc>
    1802:	be c1       	rjmp	.+892    	; 0x1b80 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    1804:	58 96       	adiw	r26, 0x18	; 24
    1806:	8c 91       	ld	r24, X
    1808:	81 11       	cpse	r24, r1
    180a:	04 c0       	rjmp	.+8      	; 0x1814 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    180c:	6f ea       	ldi	r22, 0xAF	; 175
    180e:	6d 15       	cp	r22, r13
    1810:	08 f4       	brcc	.+2      	; 0x1814 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    1812:	d3 94       	inc	r13
    1814:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1816:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1818:	ed 91       	ld	r30, X+
    181a:	fc 91       	ld	r31, X
    181c:	11 97       	sbiw	r26, 0x01	; 1
    181e:	02 84       	ldd	r0, Z+10	; 0x0a
    1820:	f3 85       	ldd	r31, Z+11	; 0x0b
    1822:	e0 2d       	mov	r30, r0
    1824:	cd 01       	movw	r24, r26
    1826:	19 95       	eicall
    1828:	b5 e0       	ldi	r27, 0x05	; 5
    182a:	db 9e       	mul	r13, r27
    182c:	c0 01       	movw	r24, r0
    182e:	11 24       	eor	r1, r1
    1830:	ec 2d       	mov	r30, r12
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	f9 8b       	std	Y+17, r31	; 0x11
    1836:	e8 8b       	std	Y+16, r30	; 0x10
    1838:	92 01       	movw	r18, r4
    183a:	2b 5f       	subi	r18, 0xFB	; 251
    183c:	3f 4f       	sbci	r19, 0xFF	; 255
    183e:	3b 8b       	std	Y+19, r19	; 0x13
    1840:	2a 8b       	std	Y+18, r18	; 0x12
    1842:	32 01       	movw	r6, r4
    1844:	5d 82       	std	Y+5, r5	; 0x05
    1846:	4c 82       	std	Y+4, r4	; 0x04
    1848:	ac 01       	movw	r20, r24
    184a:	44 19       	sub	r20, r4
    184c:	55 09       	sbc	r21, r5
    184e:	5d 8b       	std	Y+21, r21	; 0x15
    1850:	4c 8b       	std	Y+20, r20	; 0x14
    1852:	7b 81       	ldd	r23, Y+3	; 0x03
    1854:	67 2f       	mov	r22, r23
    1856:	70 e0       	ldi	r23, 0x00	; 0
    1858:	7f 8b       	std	Y+23, r23	; 0x17
    185a:	6e 8b       	std	Y+22, r22	; 0x16
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	9a 81       	ldd	r25, Y+2	; 0x02
    1860:	08 96       	adiw	r24, 0x08	; 8
    1862:	99 8f       	std	Y+25, r25	; 0x19
    1864:	88 8f       	std	Y+24, r24	; 0x18
    1866:	ec 89       	ldd	r30, Y+20	; 0x14
    1868:	fd 89       	ldd	r31, Y+21	; 0x15
    186a:	e6 0d       	add	r30, r6
    186c:	f7 1d       	adc	r31, r7
    186e:	e9 58       	subi	r30, 0x89	; 137
    1870:	fe 4f       	sbci	r31, 0xFE	; 254
    1872:	d4 90       	lpm	r13, Z
    1874:	a9 81       	ldd	r26, Y+1	; 0x01
    1876:	ba 81       	ldd	r27, Y+2	; 0x02
    1878:	bf 83       	std	Y+7, r27	; 0x07
    187a:	ae 83       	std	Y+6, r26	; 0x06
    187c:	5d 01       	movw	r10, r26
    187e:	d0 fe       	sbrs	r13, 0
    1880:	16 c0       	rjmp	.+44     	; 0x18ae <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x166>
    1882:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1884:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1886:	ed 91       	ld	r30, X+
    1888:	fc 91       	ld	r31, X
    188a:	b1 e0       	ldi	r27, 0x01	; 1
    188c:	cb 12       	cpse	r12, r27
    188e:	09 c0       	rjmp	.+18     	; 0x18a2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    1890:	2b 81       	ldd	r18, Y+3	; 0x03
    1892:	21 30       	cpi	r18, 0x01	; 1
    1894:	31 f4       	brne	.+12     	; 0x18a2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    1896:	04 84       	ldd	r0, Z+12	; 0x0c
    1898:	f5 85       	ldd	r31, Z+13	; 0x0d
    189a:	e0 2d       	mov	r30, r0
    189c:	28 85       	ldd	r18, Y+8	; 0x08
    189e:	39 85       	ldd	r19, Y+9	; 0x09
    18a0:	19 c0       	rjmp	.+50     	; 0x18d4 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x18c>
    18a2:	06 84       	ldd	r0, Z+14	; 0x0e
    18a4:	f7 85       	ldd	r31, Z+15	; 0x0f
    18a6:	e0 2d       	mov	r30, r0
    18a8:	e8 84       	ldd	r14, Y+8	; 0x08
    18aa:	f9 84       	ldd	r15, Y+9	; 0x09
    18ac:	1d c0       	rjmp	.+58     	; 0x18e8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1a0>
    18ae:	48 85       	ldd	r20, Y+8	; 0x08
    18b0:	59 85       	ldd	r21, Y+9	; 0x09
    18b2:	48 15       	cp	r20, r8
    18b4:	59 05       	cpc	r21, r9
    18b6:	11 f1       	breq	.+68     	; 0x18fc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    18b8:	aa 8d       	ldd	r26, Y+26	; 0x1a
    18ba:	bb 8d       	ldd	r27, Y+27	; 0x1b
    18bc:	ed 91       	ld	r30, X+
    18be:	fc 91       	ld	r31, X
    18c0:	b1 e0       	ldi	r27, 0x01	; 1
    18c2:	cb 12       	cpse	r12, r27
    18c4:	0d c0       	rjmp	.+26     	; 0x18e0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    18c6:	2b 81       	ldd	r18, Y+3	; 0x03
    18c8:	21 30       	cpi	r18, 0x01	; 1
    18ca:	51 f4       	brne	.+20     	; 0x18e0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    18cc:	04 84       	ldd	r0, Z+12	; 0x0c
    18ce:	f5 85       	ldd	r31, Z+13	; 0x0d
    18d0:	e0 2d       	mov	r30, r0
    18d2:	94 01       	movw	r18, r8
    18d4:	a5 01       	movw	r20, r10
    18d6:	b3 01       	movw	r22, r6
    18d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18da:	9b 8d       	ldd	r25, Y+27	; 0x1b
    18dc:	19 95       	eicall
    18de:	0e c0       	rjmp	.+28     	; 0x18fc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    18e0:	06 84       	ldd	r0, Z+14	; 0x0e
    18e2:	f7 85       	ldd	r31, Z+15	; 0x0f
    18e4:	e0 2d       	mov	r30, r0
    18e6:	74 01       	movw	r14, r8
    18e8:	0a 85       	ldd	r16, Y+10	; 0x0a
    18ea:	1b 85       	ldd	r17, Y+11	; 0x0b
    18ec:	91 01       	movw	r18, r2
    18ee:	4e 81       	ldd	r20, Y+6	; 0x06
    18f0:	5f 81       	ldd	r21, Y+7	; 0x07
    18f2:	6c 81       	ldd	r22, Y+4	; 0x04
    18f4:	7d 81       	ldd	r23, Y+5	; 0x05
    18f6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18f8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    18fa:	19 95       	eicall
    18fc:	d6 94       	lsr	r13
    18fe:	4e 81       	ldd	r20, Y+6	; 0x06
    1900:	5f 81       	ldd	r21, Y+7	; 0x07
    1902:	6e 89       	ldd	r22, Y+22	; 0x16
    1904:	7f 89       	ldd	r23, Y+23	; 0x17
    1906:	46 0f       	add	r20, r22
    1908:	57 1f       	adc	r21, r23
    190a:	5f 83       	std	Y+7, r21	; 0x07
    190c:	4e 83       	std	Y+6, r20	; 0x06
    190e:	7f ef       	ldi	r23, 0xFF	; 255
    1910:	a7 1a       	sub	r10, r23
    1912:	b7 0a       	sbc	r11, r23
    1914:	88 8d       	ldd	r24, Y+24	; 0x18
    1916:	99 8d       	ldd	r25, Y+25	; 0x19
    1918:	a8 16       	cp	r10, r24
    191a:	b9 06       	cpc	r11, r25
    191c:	09 f0       	breq	.+2      	; 0x1920 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1d8>
    191e:	af cf       	rjmp	.-162    	; 0x187e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x136>
    1920:	ac 81       	ldd	r26, Y+4	; 0x04
    1922:	bd 81       	ldd	r27, Y+5	; 0x05
    1924:	e8 89       	ldd	r30, Y+16	; 0x10
    1926:	f9 89       	ldd	r31, Y+17	; 0x11
    1928:	ae 0f       	add	r26, r30
    192a:	bf 1f       	adc	r27, r31
    192c:	bd 83       	std	Y+5, r27	; 0x05
    192e:	ac 83       	std	Y+4, r26	; 0x04
    1930:	ff ef       	ldi	r31, 0xFF	; 255
    1932:	6f 1a       	sub	r6, r31
    1934:	7f 0a       	sbc	r7, r31
    1936:	2a 89       	ldd	r18, Y+18	; 0x12
    1938:	3b 89       	ldd	r19, Y+19	; 0x13
    193a:	62 16       	cp	r6, r18
    193c:	73 06       	cpc	r7, r19
    193e:	09 f0       	breq	.+2      	; 0x1942 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1fa>
    1940:	92 cf       	rjmp	.-220    	; 0x1866 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x11e>
    1942:	48 85       	ldd	r20, Y+8	; 0x08
    1944:	59 85       	ldd	r21, Y+9	; 0x09
    1946:	48 15       	cp	r20, r8
    1948:	59 05       	cpc	r21, r9
    194a:	09 f4       	brne	.+2      	; 0x194e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x206>
    194c:	f7 c0       	rjmp	.+494    	; 0x1b3c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    194e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1950:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1952:	ed 91       	ld	r30, X+
    1954:	fc 91       	ld	r31, X
    1956:	b1 e0       	ldi	r27, 0x01	; 1
    1958:	cb 12       	cpse	r12, r27
    195a:	12 c0       	rjmp	.+36     	; 0x1980 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    195c:	2b 81       	ldd	r18, Y+3	; 0x03
    195e:	21 30       	cpi	r18, 0x01	; 1
    1960:	79 f4       	brne	.+30     	; 0x1980 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    1962:	b2 01       	movw	r22, r4
    1964:	6b 5f       	subi	r22, 0xFB	; 251
    1966:	7f 4f       	sbci	r23, 0xFF	; 255
    1968:	00 88       	ldd	r0, Z+16	; 0x10
    196a:	f1 89       	ldd	r31, Z+17	; 0x11
    196c:	e0 2d       	mov	r30, r0
    196e:	84 01       	movw	r16, r8
    1970:	28 e0       	ldi	r18, 0x08	; 8
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	49 81       	ldd	r20, Y+1	; 0x01
    1976:	5a 81       	ldd	r21, Y+2	; 0x02
    1978:	8a 8d       	ldd	r24, Y+26	; 0x1a
    197a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    197c:	19 95       	eicall
    197e:	de c0       	rjmp	.+444    	; 0x1b3c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    1980:	6c 85       	ldd	r22, Y+12	; 0x0c
    1982:	7d 85       	ldd	r23, Y+13	; 0x0d
    1984:	62 19       	sub	r22, r2
    1986:	73 09       	sbc	r23, r3
    1988:	06 84       	ldd	r0, Z+14	; 0x0e
    198a:	f7 85       	ldd	r31, Z+15	; 0x0f
    198c:	e0 2d       	mov	r30, r0
    198e:	74 01       	movw	r14, r8
    1990:	0e 85       	ldd	r16, Y+14	; 0x0e
    1992:	1f 85       	ldd	r17, Y+15	; 0x0f
    1994:	91 01       	movw	r18, r2
    1996:	49 81       	ldd	r20, Y+1	; 0x01
    1998:	5a 81       	ldd	r21, Y+2	; 0x02
    199a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    199c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    199e:	19 95       	eicall
    19a0:	cd c0       	rjmp	.+410    	; 0x1b3c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    19a2:	f9 01       	movw	r30, r18
    19a4:	34 96       	adiw	r30, 0x04	; 4
    19a6:	e4 91       	lpm	r30, Z
    19a8:	de 1a       	sub	r13, r30
    19aa:	f9 01       	movw	r30, r18
    19ac:	32 96       	adiw	r30, 0x02	; 2
    19ae:	85 91       	lpm	r24, Z+
    19b0:	94 91       	lpm	r25, Z
    19b2:	b7 e0       	ldi	r27, 0x07	; 7
    19b4:	db 9e       	mul	r13, r27
    19b6:	80 0d       	add	r24, r0
    19b8:	91 1d       	adc	r25, r1
    19ba:	11 24       	eor	r1, r1
    19bc:	f9 01       	movw	r30, r18
    19be:	25 91       	lpm	r18, Z+
    19c0:	34 91       	lpm	r19, Z
    19c2:	39 8b       	std	Y+17, r19	; 0x11
    19c4:	28 8b       	std	Y+16, r18	; 0x10
    19c6:	fc 01       	movw	r30, r24
    19c8:	25 90       	lpm	r2, Z+
    19ca:	34 90       	lpm	r3, Z
    19cc:	fc 01       	movw	r30, r24
    19ce:	32 96       	adiw	r30, 0x02	; 2
    19d0:	74 90       	lpm	r7, Z
    19d2:	31 96       	adiw	r30, 0x01	; 1
    19d4:	a4 90       	lpm	r10, Z
    19d6:	32 96       	adiw	r30, 0x02	; 2
    19d8:	94 90       	lpm	r9, Z
    19da:	31 96       	adiw	r30, 0x01	; 1
    19dc:	b4 90       	lpm	r11, Z
    19de:	31 e0       	ldi	r19, 0x01	; 1
    19e0:	3c 15       	cp	r19, r12
    19e2:	18 f0       	brcs	.+6      	; 0x19ea <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2a2>
    19e4:	4b 81       	ldd	r20, Y+3	; 0x03
    19e6:	42 30       	cpi	r20, 0x02	; 2
    19e8:	68 f0       	brcs	.+26     	; 0x1a04 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2bc>
    19ea:	69 2d       	mov	r22, r9
    19ec:	09 2c       	mov	r0, r9
    19ee:	00 0c       	add	r0, r0
    19f0:	77 0b       	sbc	r23, r23
    19f2:	7d 83       	std	Y+5, r23	; 0x05
    19f4:	6c 83       	std	Y+4, r22	; 0x04
    19f6:	8b 2d       	mov	r24, r11
    19f8:	0b 2c       	mov	r0, r11
    19fa:	00 0c       	add	r0, r0
    19fc:	99 0b       	sbc	r25, r25
    19fe:	9f 83       	std	Y+7, r25	; 0x07
    1a00:	8e 83       	std	Y+6, r24	; 0x06
    1a02:	04 c0       	rjmp	.+8      	; 0x1a0c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2c4>
    1a04:	1f 82       	std	Y+7, r1	; 0x07
    1a06:	1e 82       	std	Y+6, r1	; 0x06
    1a08:	1d 82       	std	Y+5, r1	; 0x05
    1a0a:	1c 82       	std	Y+4, r1	; 0x04
    1a0c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1a0e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1a10:	ed 91       	ld	r30, X+
    1a12:	fc 91       	ld	r31, X
    1a14:	11 97       	sbiw	r26, 0x01	; 1
    1a16:	02 84       	ldd	r0, Z+10	; 0x0a
    1a18:	f3 85       	ldd	r31, Z+11	; 0x0b
    1a1a:	e0 2d       	mov	r30, r0
    1a1c:	cd 01       	movw	r24, r26
    1a1e:	19 95       	eicall
    1a20:	61 2c       	mov	r6, r1
    1a22:	d1 2c       	mov	r13, r1
    1a24:	81 2c       	mov	r8, r1
    1a26:	fb 81       	ldd	r31, Y+3	; 0x03
    1a28:	ef 2f       	mov	r30, r31
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	fb 87       	std	Y+11, r31	; 0x0b
    1a2e:	ea 87       	std	Y+10, r30	; 0x0a
    1a30:	2c 2d       	mov	r18, r12
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	3d 87       	std	Y+13, r19	; 0x0d
    1a36:	2c 87       	std	Y+12, r18	; 0x0c
    1a38:	49 81       	ldd	r20, Y+1	; 0x01
    1a3a:	5a 81       	ldd	r21, Y+2	; 0x02
    1a3c:	4b 0d       	add	r20, r11
    1a3e:	51 1d       	adc	r21, r1
    1a40:	b7 fc       	sbrc	r11, 7
    1a42:	5a 95       	dec	r21
    1a44:	5d 8b       	std	Y+21, r21	; 0x15
    1a46:	4c 8b       	std	Y+20, r20	; 0x14
    1a48:	b2 01       	movw	r22, r4
    1a4a:	69 0d       	add	r22, r9
    1a4c:	71 1d       	adc	r23, r1
    1a4e:	97 fc       	sbrc	r9, 7
    1a50:	7a 95       	dec	r23
    1a52:	7f 8b       	std	Y+23, r23	; 0x17
    1a54:	6e 8b       	std	Y+22, r22	; 0x16
    1a56:	8a 14       	cp	r8, r10
    1a58:	08 f0       	brcs	.+2      	; 0x1a5c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x314>
    1a5a:	70 c0       	rjmp	.+224    	; 0x1b3c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    1a5c:	28 2d       	mov	r18, r8
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	4e 81       	ldd	r20, Y+6	; 0x06
    1a62:	5f 81       	ldd	r21, Y+7	; 0x07
    1a64:	42 0f       	add	r20, r18
    1a66:	53 1f       	adc	r21, r19
    1a68:	aa 85       	ldd	r26, Y+10	; 0x0a
    1a6a:	bb 85       	ldd	r27, Y+11	; 0x0b
    1a6c:	a4 9f       	mul	r26, r20
    1a6e:	c0 01       	movw	r24, r0
    1a70:	a5 9f       	mul	r26, r21
    1a72:	90 0d       	add	r25, r0
    1a74:	b4 9f       	mul	r27, r20
    1a76:	90 0d       	add	r25, r0
    1a78:	11 24       	eor	r1, r1
    1a7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a7e:	e8 0f       	add	r30, r24
    1a80:	f9 1f       	adc	r31, r25
    1a82:	ff 87       	std	Y+15, r31	; 0x0f
    1a84:	ee 87       	std	Y+14, r30	; 0x0e
    1a86:	86 2d       	mov	r24, r6
    1a88:	91 2c       	mov	r9, r1
    1a8a:	4c 89       	ldd	r20, Y+20	; 0x14
    1a8c:	5d 89       	ldd	r21, Y+21	; 0x15
    1a8e:	42 0f       	add	r20, r18
    1a90:	53 1f       	adc	r21, r19
    1a92:	5b 8b       	std	Y+19, r21	; 0x13
    1a94:	4a 8b       	std	Y+18, r20	; 0x12
    1a96:	97 14       	cp	r9, r7
    1a98:	08 f0       	brcs	.+2      	; 0x1a9c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x354>
    1a9a:	4d c0       	rjmp	.+154    	; 0x1b36 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3ee>
    1a9c:	bb 24       	eor	r11, r11
    1a9e:	b3 94       	inc	r11
    1aa0:	b8 0e       	add	r11, r24
    1aa2:	87 70       	andi	r24, 0x07	; 7
    1aa4:	41 f4       	brne	.+16     	; 0x1ab6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x36e>
    1aa6:	c1 01       	movw	r24, r2
    1aa8:	01 96       	adiw	r24, 0x01	; 1
    1aaa:	e8 89       	ldd	r30, Y+16	; 0x10
    1aac:	f9 89       	ldd	r31, Y+17	; 0x11
    1aae:	e2 0d       	add	r30, r2
    1ab0:	f3 1d       	adc	r31, r3
    1ab2:	d4 90       	lpm	r13, Z
    1ab4:	1c 01       	movw	r2, r24
    1ab6:	d7 fe       	sbrs	r13, 7
    1ab8:	3a c0       	rjmp	.+116    	; 0x1b2e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    1aba:	51 e0       	ldi	r21, 0x01	; 1
    1abc:	c5 12       	cpse	r12, r21
    1abe:	16 c0       	rjmp	.+44     	; 0x1aec <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    1ac0:	6b 81       	ldd	r22, Y+3	; 0x03
    1ac2:	61 30       	cpi	r22, 0x01	; 1
    1ac4:	99 f4       	brne	.+38     	; 0x1aec <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    1ac6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1ac8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1aca:	ed 91       	ld	r30, X+
    1acc:	fc 91       	ld	r31, X
    1ace:	11 97       	sbiw	r26, 0x01	; 1
    1ad0:	04 84       	ldd	r0, Z+12	; 0x0c
    1ad2:	f5 85       	ldd	r31, Z+13	; 0x0d
    1ad4:	e0 2d       	mov	r30, r0
    1ad6:	28 85       	ldd	r18, Y+8	; 0x08
    1ad8:	39 85       	ldd	r19, Y+9	; 0x09
    1ada:	4a 89       	ldd	r20, Y+18	; 0x12
    1adc:	5b 89       	ldd	r21, Y+19	; 0x13
    1ade:	6e 89       	ldd	r22, Y+22	; 0x16
    1ae0:	7f 89       	ldd	r23, Y+23	; 0x17
    1ae2:	69 0d       	add	r22, r9
    1ae4:	71 1d       	adc	r23, r1
    1ae6:	cd 01       	movw	r24, r26
    1ae8:	19 95       	eicall
    1aea:	21 c0       	rjmp	.+66     	; 0x1b2e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    1aec:	8c 81       	ldd	r24, Y+4	; 0x04
    1aee:	9d 81       	ldd	r25, Y+5	; 0x05
    1af0:	89 0d       	add	r24, r9
    1af2:	91 1d       	adc	r25, r1
    1af4:	ec 85       	ldd	r30, Y+12	; 0x0c
    1af6:	fd 85       	ldd	r31, Y+13	; 0x0d
    1af8:	8e 9f       	mul	r24, r30
    1afa:	b0 01       	movw	r22, r0
    1afc:	8f 9f       	mul	r24, r31
    1afe:	70 0d       	add	r23, r0
    1b00:	9e 9f       	mul	r25, r30
    1b02:	70 0d       	add	r23, r0
    1b04:	11 24       	eor	r1, r1
    1b06:	64 0d       	add	r22, r4
    1b08:	75 1d       	adc	r23, r5
    1b0a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1b0c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1b0e:	ed 91       	ld	r30, X+
    1b10:	fc 91       	ld	r31, X
    1b12:	11 97       	sbiw	r26, 0x01	; 1
    1b14:	06 84       	ldd	r0, Z+14	; 0x0e
    1b16:	f7 85       	ldd	r31, Z+15	; 0x0f
    1b18:	e0 2d       	mov	r30, r0
    1b1a:	e8 84       	ldd	r14, Y+8	; 0x08
    1b1c:	f9 84       	ldd	r15, Y+9	; 0x09
    1b1e:	0a 85       	ldd	r16, Y+10	; 0x0a
    1b20:	1b 85       	ldd	r17, Y+11	; 0x0b
    1b22:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b24:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b26:	4e 85       	ldd	r20, Y+14	; 0x0e
    1b28:	5f 85       	ldd	r21, Y+15	; 0x0f
    1b2a:	cd 01       	movw	r24, r26
    1b2c:	19 95       	eicall
    1b2e:	dd 0c       	add	r13, r13
    1b30:	93 94       	inc	r9
    1b32:	8b 2d       	mov	r24, r11
    1b34:	b0 cf       	rjmp	.-160    	; 0x1a96 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x34e>
    1b36:	67 0c       	add	r6, r7
    1b38:	83 94       	inc	r8
    1b3a:	8d cf       	rjmp	.-230    	; 0x1a56 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x30e>
    1b3c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    1b3e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    1b40:	ed 91       	ld	r30, X+
    1b42:	fc 91       	ld	r31, X
    1b44:	11 97       	sbiw	r26, 0x01	; 1
    1b46:	06 88       	ldd	r0, Z+22	; 0x16
    1b48:	f7 89       	ldd	r31, Z+23	; 0x17
    1b4a:	e0 2d       	mov	r30, r0
    1b4c:	cd 01       	movw	r24, r26
    1b4e:	6b 96       	adiw	r28, 0x1b	; 27
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	df 91       	pop	r29
    1b5c:	cf 91       	pop	r28
    1b5e:	1f 91       	pop	r17
    1b60:	0f 91       	pop	r16
    1b62:	ff 90       	pop	r15
    1b64:	ef 90       	pop	r14
    1b66:	df 90       	pop	r13
    1b68:	cf 90       	pop	r12
    1b6a:	bf 90       	pop	r11
    1b6c:	af 90       	pop	r10
    1b6e:	9f 90       	pop	r9
    1b70:	8f 90       	pop	r8
    1b72:	7f 90       	pop	r7
    1b74:	6f 90       	pop	r6
    1b76:	5f 90       	pop	r5
    1b78:	4f 90       	pop	r4
    1b7a:	3f 90       	pop	r3
    1b7c:	2f 90       	pop	r2
    1b7e:	19 94       	eijmp
    1b80:	6b 96       	adiw	r28, 0x1b	; 27
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	f8 94       	cli
    1b86:	de bf       	out	0x3e, r29	; 62
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	cd bf       	out	0x3d, r28	; 61
    1b8c:	df 91       	pop	r29
    1b8e:	cf 91       	pop	r28
    1b90:	1f 91       	pop	r17
    1b92:	0f 91       	pop	r16
    1b94:	ff 90       	pop	r15
    1b96:	ef 90       	pop	r14
    1b98:	df 90       	pop	r13
    1b9a:	cf 90       	pop	r12
    1b9c:	bf 90       	pop	r11
    1b9e:	af 90       	pop	r10
    1ba0:	9f 90       	pop	r9
    1ba2:	8f 90       	pop	r8
    1ba4:	7f 90       	pop	r7
    1ba6:	6f 90       	pop	r6
    1ba8:	5f 90       	pop	r5
    1baa:	4f 90       	pop	r4
    1bac:	3f 90       	pop	r3
    1bae:	2f 90       	pop	r2
    1bb0:	08 95       	ret

00001bb2 <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    1bb2:	8f 92       	push	r8
    1bb4:	9f 92       	push	r9
    1bb6:	af 92       	push	r10
    1bb8:	cf 92       	push	r12
    1bba:	ef 92       	push	r14
    1bbc:	ff 92       	push	r15
    1bbe:	0f 93       	push	r16
    1bc0:	1f 93       	push	r17
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	ec 01       	movw	r28, r24
    1bc8:	26 2f       	mov	r18, r22
  if (!gfxFont) { // 'Classic' built-in font
    1bca:	89 8d       	ldd	r24, Y+25	; 0x19
    1bcc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1bce:	00 97       	sbiw	r24, 0x00	; 0
    1bd0:	09 f0       	breq	.+2      	; 0x1bd4 <_ZN12Adafruit_GFX5writeEh+0x22>
    1bd2:	41 c0       	rjmp	.+130    	; 0x1c56 <_ZN12Adafruit_GFX5writeEh+0xa4>

    if (c == '\n') {              // Newline?
    1bd4:	6a 30       	cpi	r22, 0x0A	; 10
    1bd6:	59 f4       	brne	.+22     	; 0x1bee <_ZN12Adafruit_GFX5writeEh+0x3c>
      cursor_x = 0;               // Reset x to zero,
    1bd8:	1d 86       	std	Y+13, r1	; 0x0d
    1bda:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y += textsize_y * 8; // advance y one line
    1bdc:	2d 89       	ldd	r18, Y+21	; 0x15
    1bde:	8e 85       	ldd	r24, Y+14	; 0x0e
    1be0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1be2:	38 e0       	ldi	r19, 0x08	; 8
    1be4:	23 9f       	mul	r18, r19
    1be6:	80 0d       	add	r24, r0
    1be8:	91 1d       	adc	r25, r1
    1bea:	11 24       	eor	r1, r1
    1bec:	42 c0       	rjmp	.+132    	; 0x1c72 <_ZN12Adafruit_GFX5writeEh+0xc0>
    } else if (c != '\r') {       // Ignore carriage returns
    1bee:	6d 30       	cpi	r22, 0x0D	; 13
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <_ZN12Adafruit_GFX5writeEh+0x42>
    1bf2:	a8 c0       	rjmp	.+336    	; 0x1d44 <_ZN12Adafruit_GFX5writeEh+0x192>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    1bf4:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf6:	88 23       	and	r24, r24
    1bf8:	c9 f0       	breq	.+50     	; 0x1c2c <_ZN12Adafruit_GFX5writeEh+0x7a>
    1bfa:	3c 89       	ldd	r19, Y+20	; 0x14
    1bfc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bfe:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c00:	46 e0       	ldi	r20, 0x06	; 6
    1c02:	34 9f       	mul	r19, r20
    1c04:	80 0d       	add	r24, r0
    1c06:	91 1d       	adc	r25, r1
    1c08:	11 24       	eor	r1, r1
    1c0a:	48 85       	ldd	r20, Y+8	; 0x08
    1c0c:	59 85       	ldd	r21, Y+9	; 0x09
    1c0e:	48 17       	cp	r20, r24
    1c10:	59 07       	cpc	r21, r25
    1c12:	64 f4       	brge	.+24     	; 0x1c2c <_ZN12Adafruit_GFX5writeEh+0x7a>
        cursor_x = 0;                                       // Reset x to zero,
    1c14:	1d 86       	std	Y+13, r1	; 0x0d
    1c16:	1c 86       	std	Y+12, r1	; 0x0c
        cursor_y += textsize_y * 8; // advance y one line
    1c18:	3d 89       	ldd	r19, Y+21	; 0x15
    1c1a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c1c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c1e:	48 e0       	ldi	r20, 0x08	; 8
    1c20:	34 9f       	mul	r19, r20
    1c22:	80 0d       	add	r24, r0
    1c24:	91 1d       	adc	r25, r1
    1c26:	11 24       	eor	r1, r1
    1c28:	9f 87       	std	Y+15, r25	; 0x0f
    1c2a:	8e 87       	std	Y+14, r24	; 0x0e
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
               textsize_y);
    1c2c:	ea 88       	ldd	r14, Y+18	; 0x12
    1c2e:	fb 88       	ldd	r15, Y+19	; 0x13
    1c30:	08 89       	ldd	r16, Y+16	; 0x10
    1c32:	19 89       	ldd	r17, Y+17	; 0x11
    1c34:	4e 85       	ldd	r20, Y+14	; 0x0e
    1c36:	5f 85       	ldd	r21, Y+15	; 0x0f
    1c38:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c3a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c3c:	ad 88       	ldd	r10, Y+21	; 0x15
    1c3e:	cc 88       	ldd	r12, Y+20	; 0x14
    1c40:	ce 01       	movw	r24, r28
    1c42:	82 dd       	rcall	.-1276   	; 0x1748 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
      cursor_x += textsize_x * 6; // Advance x one char
    1c44:	2c 89       	ldd	r18, Y+20	; 0x14
    1c46:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c48:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c4a:	36 e0       	ldi	r19, 0x06	; 6
    1c4c:	23 9f       	mul	r18, r19
    1c4e:	80 0d       	add	r24, r0
    1c50:	91 1d       	adc	r25, r1
    1c52:	11 24       	eor	r1, r1
    1c54:	3e c0       	rjmp	.+124    	; 0x1cd2 <_ZN12Adafruit_GFX5writeEh+0x120>
    }

  } else { // Custom font

    if (c == '\n') {
    1c56:	6a 30       	cpi	r22, 0x0A	; 10
    1c58:	79 f4       	brne	.+30     	; 0x1c78 <_ZN12Adafruit_GFX5writeEh+0xc6>
      cursor_x = 0;
    1c5a:	1d 86       	std	Y+13, r1	; 0x0d
    1c5c:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    1c5e:	2d 89       	ldd	r18, Y+21	; 0x15
    1c60:	fc 01       	movw	r30, r24
    1c62:	38 96       	adiw	r30, 0x08	; 8
    1c64:	e4 91       	lpm	r30, Z
    1c66:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c68:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c6a:	2e 9f       	mul	r18, r30
    1c6c:	80 0d       	add	r24, r0
    1c6e:	91 1d       	adc	r25, r1
    1c70:	11 24       	eor	r1, r1
    1c72:	9f 87       	std	Y+15, r25	; 0x0f
    1c74:	8e 87       	std	Y+14, r24	; 0x0e
    1c76:	66 c0       	rjmp	.+204    	; 0x1d44 <_ZN12Adafruit_GFX5writeEh+0x192>
    } else if (c != '\r') {
    1c78:	6d 30       	cpi	r22, 0x0D	; 13
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <_ZN12Adafruit_GFX5writeEh+0xcc>
    1c7c:	63 c0       	rjmp	.+198    	; 0x1d44 <_ZN12Adafruit_GFX5writeEh+0x192>
      uint8_t first = pgm_read_byte(&gfxFont->first);
    1c7e:	fc 01       	movw	r30, r24
    1c80:	34 96       	adiw	r30, 0x04	; 4
    1c82:	34 91       	lpm	r19, Z
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    1c84:	63 17       	cp	r22, r19
    1c86:	08 f4       	brcc	.+2      	; 0x1c8a <_ZN12Adafruit_GFX5writeEh+0xd8>
    1c88:	5d c0       	rjmp	.+186    	; 0x1d44 <_ZN12Adafruit_GFX5writeEh+0x192>
    1c8a:	32 96       	adiw	r30, 0x02	; 2
    1c8c:	e4 91       	lpm	r30, Z
    1c8e:	e6 17       	cp	r30, r22
    1c90:	08 f4       	brcc	.+2      	; 0x1c94 <_ZN12Adafruit_GFX5writeEh+0xe2>
    1c92:	58 c0       	rjmp	.+176    	; 0x1d44 <_ZN12Adafruit_GFX5writeEh+0x192>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    1c94:	46 2f       	mov	r20, r22
    1c96:	43 1b       	sub	r20, r19
    1c98:	34 2f       	mov	r19, r20
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	32 96       	adiw	r30, 0x02	; 2
    1c9e:	85 90       	lpm	r8, Z+
    1ca0:	94 90       	lpm	r9, Z
    1ca2:	47 e0       	ldi	r20, 0x07	; 7
    1ca4:	34 9f       	mul	r19, r20
    1ca6:	80 0c       	add	r8, r0
    1ca8:	91 1c       	adc	r9, r1
    1caa:	11 24       	eor	r1, r1
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
    1cac:	f4 01       	movw	r30, r8
    1cae:	32 96       	adiw	r30, 0x02	; 2
    1cb0:	34 91       	lpm	r19, Z
                h = pgm_read_byte(&glyph->height);
    1cb2:	31 96       	adiw	r30, 0x01	; 1
    1cb4:	e4 91       	lpm	r30, Z
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    1cb6:	33 23       	and	r19, r19
    1cb8:	11 f0       	breq	.+4      	; 0x1cbe <_ZN12Adafruit_GFX5writeEh+0x10c>
    1cba:	e1 11       	cpse	r30, r1
    1cbc:	0d c0       	rjmp	.+26     	; 0x1cd8 <_ZN12Adafruit_GFX5writeEh+0x126>
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    1cbe:	f4 01       	movw	r30, r8
    1cc0:	34 96       	adiw	r30, 0x04	; 4
    1cc2:	e4 91       	lpm	r30, Z
    1cc4:	2c 89       	ldd	r18, Y+20	; 0x14
    1cc6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cc8:	9d 85       	ldd	r25, Y+13	; 0x0d
    1cca:	e2 9f       	mul	r30, r18
    1ccc:	80 0d       	add	r24, r0
    1cce:	91 1d       	adc	r25, r1
    1cd0:	11 24       	eor	r1, r1
    1cd2:	9d 87       	std	Y+13, r25	; 0x0d
    1cd4:	8c 87       	std	Y+12, r24	; 0x0c
      }
    }
  }
  return 1;
    1cd6:	36 c0       	rjmp	.+108    	; 0x1d44 <_ZN12Adafruit_GFX5writeEh+0x192>
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    1cd8:	f4 01       	movw	r30, r8
    1cda:	35 96       	adiw	r30, 0x05	; 5
    1cdc:	44 91       	lpm	r20, Z
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    1cde:	5f 89       	ldd	r21, Y+23	; 0x17
    1ce0:	55 23       	and	r21, r21
    1ce2:	19 f1       	breq	.+70     	; 0x1d2a <_ZN12Adafruit_GFX5writeEh+0x178>
    1ce4:	5c 89       	ldd	r21, Y+20	; 0x14
    1ce6:	e3 2f       	mov	r30, r19
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	e4 0f       	add	r30, r20
    1cec:	f1 1d       	adc	r31, r1
    1cee:	47 fd       	sbrc	r20, 7
    1cf0:	fa 95       	dec	r31
    1cf2:	5e 9f       	mul	r21, r30
    1cf4:	b0 01       	movw	r22, r0
    1cf6:	5f 9f       	mul	r21, r31
    1cf8:	70 0d       	add	r23, r0
    1cfa:	11 24       	eor	r1, r1
    1cfc:	4c 85       	ldd	r20, Y+12	; 0x0c
    1cfe:	5d 85       	ldd	r21, Y+13	; 0x0d
    1d00:	46 0f       	add	r20, r22
    1d02:	57 1f       	adc	r21, r23
    1d04:	68 85       	ldd	r22, Y+8	; 0x08
    1d06:	79 85       	ldd	r23, Y+9	; 0x09
    1d08:	64 17       	cp	r22, r20
    1d0a:	75 07       	cpc	r23, r21
    1d0c:	74 f4       	brge	.+28     	; 0x1d2a <_ZN12Adafruit_GFX5writeEh+0x178>
            cursor_x = 0;
    1d0e:	1d 86       	std	Y+13, r1	; 0x0d
    1d10:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += (int16_t)textsize_y *
    1d12:	3d 89       	ldd	r19, Y+21	; 0x15
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    1d14:	fc 01       	movw	r30, r24
    1d16:	38 96       	adiw	r30, 0x08	; 8
    1d18:	e4 91       	lpm	r30, Z
    1d1a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d1c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d1e:	3e 9f       	mul	r19, r30
    1d20:	80 0d       	add	r24, r0
    1d22:	91 1d       	adc	r25, r1
    1d24:	11 24       	eor	r1, r1
    1d26:	9f 87       	std	Y+15, r25	; 0x0f
    1d28:	8e 87       	std	Y+14, r24	; 0x0e
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
    1d2a:	ea 88       	ldd	r14, Y+18	; 0x12
    1d2c:	fb 88       	ldd	r15, Y+19	; 0x13
    1d2e:	08 89       	ldd	r16, Y+16	; 0x10
    1d30:	19 89       	ldd	r17, Y+17	; 0x11
    1d32:	4e 85       	ldd	r20, Y+14	; 0x0e
    1d34:	5f 85       	ldd	r21, Y+15	; 0x0f
    1d36:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d38:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d3a:	ad 88       	ldd	r10, Y+21	; 0x15
    1d3c:	cc 88       	ldd	r12, Y+20	; 0x14
    1d3e:	ce 01       	movw	r24, r28
    1d40:	03 dd       	rcall	.-1530   	; 0x1748 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
    1d42:	bd cf       	rjmp	.-134    	; 0x1cbe <_ZN12Adafruit_GFX5writeEh+0x10c>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
  return 1;
}
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	df 91       	pop	r29
    1d4a:	cf 91       	pop	r28
    1d4c:	1f 91       	pop	r17
    1d4e:	0f 91       	pop	r16
    1d50:	ff 90       	pop	r15
    1d52:	ef 90       	pop	r14
    1d54:	cf 90       	pop	r12
    1d56:	af 90       	pop	r10
    1d58:	9f 90       	pop	r9
    1d5a:	8f 90       	pop	r8
    1d5c:	08 95       	ret

00001d5e <_ZN12Adafruit_GFX11setTextSizeEhh>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    1d5e:	61 11       	cpse	r22, r1
    1d60:	01 c0       	rjmp	.+2      	; 0x1d64 <_ZN12Adafruit_GFX11setTextSizeEhh+0x6>
    1d62:	61 e0       	ldi	r22, 0x01	; 1
    1d64:	fc 01       	movw	r30, r24
    1d66:	64 8b       	std	Z+20, r22	; 0x14
  textsize_y = (s_y > 0) ? s_y : 1;
    1d68:	41 11       	cpse	r20, r1
    1d6a:	01 c0       	rjmp	.+2      	; 0x1d6e <_ZN12Adafruit_GFX11setTextSizeEhh+0x10>
    1d6c:	41 e0       	ldi	r20, 0x01	; 1
    1d6e:	fc 01       	movw	r30, r24
    1d70:	45 8b       	std	Z+21, r20	; 0x15
    1d72:	08 95       	ret

00001d74 <_ZN12Adafruit_GFX11setTextSizeEh>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel
   that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
    1d74:	46 2f       	mov	r20, r22
    1d76:	f3 cf       	rjmp	.-26     	; 0x1d5e <_ZN12Adafruit_GFX11setTextSizeEhh>

00001d78 <_ZN16Adafruit_SSD13069drawPixelEiij>:
/*!
    @brief  Get base address of display buffer for direct reading or writing.
    @return Pointer to an unsigned 8-bit array, column-major, columns padded
            to full byte boundary if needed.
*/
uint8_t *Adafruit_SSD1306::getBuffer(void) { return buffer; }
    1d78:	fc 01       	movw	r30, r24
    1d7a:	77 fd       	sbrc	r23, 7
    1d7c:	b9 c0       	rjmp	.+370    	; 0x1ef0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    1d7e:	80 85       	ldd	r24, Z+8	; 0x08
    1d80:	91 85       	ldd	r25, Z+9	; 0x09
    1d82:	68 17       	cp	r22, r24
    1d84:	79 07       	cpc	r23, r25
    1d86:	0c f0       	brlt	.+2      	; 0x1d8a <_ZN16Adafruit_SSD13069drawPixelEiij+0x12>
    1d88:	b3 c0       	rjmp	.+358    	; 0x1ef0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    1d8a:	57 fd       	sbrc	r21, 7
    1d8c:	b1 c0       	rjmp	.+354    	; 0x1ef0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    1d8e:	82 85       	ldd	r24, Z+10	; 0x0a
    1d90:	93 85       	ldd	r25, Z+11	; 0x0b
    1d92:	48 17       	cp	r20, r24
    1d94:	59 07       	cpc	r21, r25
    1d96:	0c f0       	brlt	.+2      	; 0x1d9a <_ZN16Adafruit_SSD13069drawPixelEiij+0x22>
    1d98:	08 95       	ret
    1d9a:	86 89       	ldd	r24, Z+22	; 0x16
    1d9c:	82 30       	cpi	r24, 0x02	; 2
    1d9e:	79 f4       	brne	.+30     	; 0x1dbe <_ZN16Adafruit_SSD13069drawPixelEiij+0x46>
    1da0:	84 81       	ldd	r24, Z+4	; 0x04
    1da2:	95 81       	ldd	r25, Z+5	; 0x05
    1da4:	dc 01       	movw	r26, r24
    1da6:	a6 1b       	sub	r26, r22
    1da8:	b7 0b       	sbc	r27, r23
    1daa:	bd 01       	movw	r22, r26
    1dac:	61 50       	subi	r22, 0x01	; 1
    1dae:	71 09       	sbc	r23, r1
    1db0:	86 81       	ldd	r24, Z+6	; 0x06
    1db2:	97 81       	ldd	r25, Z+7	; 0x07
    1db4:	dc 01       	movw	r26, r24
    1db6:	a4 1b       	sub	r26, r20
    1db8:	b5 0b       	sbc	r27, r21
    1dba:	ad 01       	movw	r20, r26
    1dbc:	0e c0       	rjmp	.+28     	; 0x1dda <_ZN16Adafruit_SSD13069drawPixelEiij+0x62>
    1dbe:	83 30       	cpi	r24, 0x03	; 3
    1dc0:	09 f0       	breq	.+2      	; 0x1dc4 <_ZN16Adafruit_SSD13069drawPixelEiij+0x4c>
    1dc2:	84 c0       	rjmp	.+264    	; 0x1ecc <_ZN16Adafruit_SSD13069drawPixelEiij+0x154>
    1dc4:	64 27       	eor	r22, r20
    1dc6:	75 27       	eor	r23, r21
    1dc8:	ca 01       	movw	r24, r20
    1dca:	86 27       	eor	r24, r22
    1dcc:	97 27       	eor	r25, r23
    1dce:	68 27       	eor	r22, r24
    1dd0:	79 27       	eor	r23, r25
    1dd2:	46 81       	ldd	r20, Z+6	; 0x06
    1dd4:	57 81       	ldd	r21, Z+7	; 0x07
    1dd6:	48 1b       	sub	r20, r24
    1dd8:	59 0b       	sbc	r21, r25
    1dda:	41 50       	subi	r20, 0x01	; 1
    1ddc:	51 09       	sbc	r21, r1
    1dde:	21 30       	cpi	r18, 0x01	; 1
    1de0:	31 05       	cpc	r19, r1
    1de2:	31 f0       	breq	.+12     	; 0x1df0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x78>
    1de4:	48 f1       	brcs	.+82     	; 0x1e38 <_ZN16Adafruit_SSD13069drawPixelEiij+0xc0>
    1de6:	22 30       	cpi	r18, 0x02	; 2
    1de8:	31 05       	cpc	r19, r1
    1dea:	09 f4       	brne	.+2      	; 0x1dee <_ZN16Adafruit_SSD13069drawPixelEiij+0x76>
    1dec:	4a c0       	rjmp	.+148    	; 0x1e82 <_ZN16Adafruit_SSD13069drawPixelEiij+0x10a>
    1dee:	08 95       	ret
    1df0:	ca 01       	movw	r24, r20
    1df2:	57 fd       	sbrc	r21, 7
    1df4:	07 96       	adiw	r24, 0x07	; 7
    1df6:	9c 01       	movw	r18, r24
    1df8:	a3 e0       	ldi	r26, 0x03	; 3
    1dfa:	35 95       	asr	r19
    1dfc:	27 95       	ror	r18
    1dfe:	aa 95       	dec	r26
    1e00:	e1 f7       	brne	.-8      	; 0x1dfa <_ZN16Adafruit_SSD13069drawPixelEiij+0x82>
    1e02:	a4 81       	ldd	r26, Z+4	; 0x04
    1e04:	b5 81       	ldd	r27, Z+5	; 0x05
    1e06:	2a 9f       	mul	r18, r26
    1e08:	c0 01       	movw	r24, r0
    1e0a:	2b 9f       	mul	r18, r27
    1e0c:	90 0d       	add	r25, r0
    1e0e:	3a 9f       	mul	r19, r26
    1e10:	90 0d       	add	r25, r0
    1e12:	11 24       	eor	r1, r1
    1e14:	68 0f       	add	r22, r24
    1e16:	79 1f       	adc	r23, r25
    1e18:	07 8c       	ldd	r0, Z+31	; 0x1f
    1e1a:	f0 a1       	ldd	r31, Z+32	; 0x20
    1e1c:	e0 2d       	mov	r30, r0
    1e1e:	e6 0f       	add	r30, r22
    1e20:	f7 1f       	adc	r31, r23
    1e22:	47 70       	andi	r20, 0x07	; 7
    1e24:	55 27       	eor	r21, r21
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	01 c0       	rjmp	.+2      	; 0x1e2e <_ZN16Adafruit_SSD13069drawPixelEiij+0xb6>
    1e2c:	88 0f       	add	r24, r24
    1e2e:	4a 95       	dec	r20
    1e30:	ea f7       	brpl	.-6      	; 0x1e2c <_ZN16Adafruit_SSD13069drawPixelEiij+0xb4>
    1e32:	90 81       	ld	r25, Z
    1e34:	89 2b       	or	r24, r25
    1e36:	48 c0       	rjmp	.+144    	; 0x1ec8 <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    1e38:	ca 01       	movw	r24, r20
    1e3a:	57 fd       	sbrc	r21, 7
    1e3c:	07 96       	adiw	r24, 0x07	; 7
    1e3e:	9c 01       	movw	r18, r24
    1e40:	93 e0       	ldi	r25, 0x03	; 3
    1e42:	35 95       	asr	r19
    1e44:	27 95       	ror	r18
    1e46:	9a 95       	dec	r25
    1e48:	e1 f7       	brne	.-8      	; 0x1e42 <_ZN16Adafruit_SSD13069drawPixelEiij+0xca>
    1e4a:	a4 81       	ldd	r26, Z+4	; 0x04
    1e4c:	b5 81       	ldd	r27, Z+5	; 0x05
    1e4e:	2a 9f       	mul	r18, r26
    1e50:	c0 01       	movw	r24, r0
    1e52:	2b 9f       	mul	r18, r27
    1e54:	90 0d       	add	r25, r0
    1e56:	3a 9f       	mul	r19, r26
    1e58:	90 0d       	add	r25, r0
    1e5a:	11 24       	eor	r1, r1
    1e5c:	68 0f       	add	r22, r24
    1e5e:	79 1f       	adc	r23, r25
    1e60:	07 8c       	ldd	r0, Z+31	; 0x1f
    1e62:	f0 a1       	ldd	r31, Z+32	; 0x20
    1e64:	e0 2d       	mov	r30, r0
    1e66:	e6 0f       	add	r30, r22
    1e68:	f7 1f       	adc	r31, r23
    1e6a:	47 70       	andi	r20, 0x07	; 7
    1e6c:	55 27       	eor	r21, r21
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	01 c0       	rjmp	.+2      	; 0x1e76 <_ZN16Adafruit_SSD13069drawPixelEiij+0xfe>
    1e74:	88 0f       	add	r24, r24
    1e76:	4a 95       	dec	r20
    1e78:	ea f7       	brpl	.-6      	; 0x1e74 <_ZN16Adafruit_SSD13069drawPixelEiij+0xfc>
    1e7a:	80 95       	com	r24
    1e7c:	90 81       	ld	r25, Z
    1e7e:	89 23       	and	r24, r25
    1e80:	23 c0       	rjmp	.+70     	; 0x1ec8 <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    1e82:	ca 01       	movw	r24, r20
    1e84:	57 fd       	sbrc	r21, 7
    1e86:	07 96       	adiw	r24, 0x07	; 7
    1e88:	9c 01       	movw	r18, r24
    1e8a:	83 e0       	ldi	r24, 0x03	; 3
    1e8c:	35 95       	asr	r19
    1e8e:	27 95       	ror	r18
    1e90:	8a 95       	dec	r24
    1e92:	e1 f7       	brne	.-8      	; 0x1e8c <_ZN16Adafruit_SSD13069drawPixelEiij+0x114>
    1e94:	a4 81       	ldd	r26, Z+4	; 0x04
    1e96:	b5 81       	ldd	r27, Z+5	; 0x05
    1e98:	2a 9f       	mul	r18, r26
    1e9a:	c0 01       	movw	r24, r0
    1e9c:	2b 9f       	mul	r18, r27
    1e9e:	90 0d       	add	r25, r0
    1ea0:	3a 9f       	mul	r19, r26
    1ea2:	90 0d       	add	r25, r0
    1ea4:	11 24       	eor	r1, r1
    1ea6:	68 0f       	add	r22, r24
    1ea8:	79 1f       	adc	r23, r25
    1eaa:	07 8c       	ldd	r0, Z+31	; 0x1f
    1eac:	f0 a1       	ldd	r31, Z+32	; 0x20
    1eae:	e0 2d       	mov	r30, r0
    1eb0:	e6 0f       	add	r30, r22
    1eb2:	f7 1f       	adc	r31, r23
    1eb4:	47 70       	andi	r20, 0x07	; 7
    1eb6:	55 27       	eor	r21, r21
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	01 c0       	rjmp	.+2      	; 0x1ec0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x148>
    1ebe:	88 0f       	add	r24, r24
    1ec0:	4a 95       	dec	r20
    1ec2:	ea f7       	brpl	.-6      	; 0x1ebe <_ZN16Adafruit_SSD13069drawPixelEiij+0x146>
    1ec4:	90 81       	ld	r25, Z
    1ec6:	89 27       	eor	r24, r25
    1ec8:	80 83       	st	Z, r24
    1eca:	08 95       	ret
    1ecc:	81 30       	cpi	r24, 0x01	; 1
    1ece:	09 f0       	breq	.+2      	; 0x1ed2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x15a>
    1ed0:	86 cf       	rjmp	.-244    	; 0x1dde <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    1ed2:	64 27       	eor	r22, r20
    1ed4:	75 27       	eor	r23, r21
    1ed6:	46 27       	eor	r20, r22
    1ed8:	57 27       	eor	r21, r23
    1eda:	64 27       	eor	r22, r20
    1edc:	75 27       	eor	r23, r21
    1ede:	84 81       	ldd	r24, Z+4	; 0x04
    1ee0:	95 81       	ldd	r25, Z+5	; 0x05
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	a6 1b       	sub	r26, r22
    1ee6:	b7 0b       	sbc	r27, r23
    1ee8:	bd 01       	movw	r22, r26
    1eea:	61 50       	subi	r22, 0x01	; 1
    1eec:	71 09       	sbc	r23, r1
    1eee:	77 cf       	rjmp	.-274    	; 0x1dde <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    1ef0:	08 95       	ret

00001ef2 <_ZN8SPIClass8transferEh>:
    1ef2:	8e bd       	out	0x2e, r24	; 46
    1ef4:	00 00       	nop
    1ef6:	0d b4       	in	r0, 0x2d	; 45
    1ef8:	07 fe       	sbrs	r0, 7
    1efa:	fd cf       	rjmp	.-6      	; 0x1ef6 <_ZN8SPIClass8transferEh+0x4>
    1efc:	8e b5       	in	r24, 0x2e	; 46
    1efe:	08 95       	ret

00001f00 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
    1f00:	4f 92       	push	r4
    1f02:	5f 92       	push	r5
    1f04:	6f 92       	push	r6
    1f06:	7f 92       	push	r7
    1f08:	8f 92       	push	r8
    1f0a:	9f 92       	push	r9
    1f0c:	af 92       	push	r10
    1f0e:	bf 92       	push	r11
    1f10:	cf 92       	push	r12
    1f12:	df 92       	push	r13
    1f14:	ef 92       	push	r14
    1f16:	ff 92       	push	r15
    1f18:	0f 93       	push	r16
    1f1a:	cf 93       	push	r28
    1f1c:	df 93       	push	r29
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
    1f22:	3c 01       	movw	r6, r24
    1f24:	29 01       	movw	r4, r18
    1f26:	50 e0       	ldi	r21, 0x00	; 0
    1f28:	70 e0       	ldi	r23, 0x00	; 0
    1f2a:	4e db       	rcall	.-2404   	; 0x15c8 <_ZN12Adafruit_GFXC1Eii>
    1f2c:	87 e5       	ldi	r24, 0x57	; 87
    1f2e:	94 e0       	ldi	r25, 0x04	; 4
    1f30:	f3 01       	movw	r30, r6
    1f32:	91 83       	std	Z+1, r25	; 0x01
    1f34:	80 83       	st	Z, r24
    1f36:	14 8e       	std	Z+28, r1	; 0x1c
    1f38:	13 8e       	std	Z+27, r1	; 0x1b
    1f3a:	41 14       	cp	r4, r1
    1f3c:	51 04       	cpc	r5, r1
    1f3e:	11 f0       	breq	.+4      	; 0x1f44 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x44>
    1f40:	c2 01       	movw	r24, r4
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x48>
    1f44:	87 ef       	ldi	r24, 0xF7	; 247
    1f46:	95 e0       	ldi	r25, 0x05	; 5
    1f48:	f3 01       	movw	r30, r6
    1f4a:	96 8f       	std	Z+30, r25	; 0x1e
    1f4c:	85 8f       	std	Z+29, r24	; 0x1d
    1f4e:	10 a2       	std	Z+32, r1	; 0x20
    1f50:	17 8e       	std	Z+31, r1	; 0x1f
    1f52:	8f ef       	ldi	r24, 0xFF	; 255
    1f54:	84 a3       	std	Z+36, r24	; 0x24
    1f56:	85 a3       	std	Z+37, r24	; 0x25
    1f58:	86 a3       	std	Z+38, r24	; 0x26
    1f5a:	87 a3       	std	Z+39, r24	; 0x27
    1f5c:	00 a7       	std	Z+40, r16	; 0x28
    1f5e:	c5 aa       	std	Z+53, r12	; 0x35
    1f60:	d6 aa       	std	Z+54, r13	; 0x36
    1f62:	e7 aa       	std	Z+55, r14	; 0x37
    1f64:	f0 ae       	std	Z+56, r15	; 0x38
    1f66:	81 ae       	std	Z+57, r8	; 0x39
    1f68:	92 ae       	std	Z+58, r9	; 0x3a
    1f6a:	a3 ae       	std	Z+59, r10	; 0x3b
    1f6c:	b4 ae       	std	Z+60, r11	; 0x3c
    1f6e:	80 e5       	ldi	r24, 0x50	; 80
    1f70:	86 af       	std	Z+62, r24	; 0x3e
    1f72:	17 ae       	std	Z+63, r1	; 0x3f
    1f74:	df 91       	pop	r29
    1f76:	cf 91       	pop	r28
    1f78:	0f 91       	pop	r16
    1f7a:	ff 90       	pop	r15
    1f7c:	ef 90       	pop	r14
    1f7e:	df 90       	pop	r13
    1f80:	cf 90       	pop	r12
    1f82:	bf 90       	pop	r11
    1f84:	af 90       	pop	r10
    1f86:	9f 90       	pop	r9
    1f88:	8f 90       	pop	r8
    1f8a:	7f 90       	pop	r7
    1f8c:	6f 90       	pop	r6
    1f8e:	5f 90       	pop	r5
    1f90:	4f 90       	pop	r4
    1f92:	08 95       	ret

00001f94 <_ZN16Adafruit_SSD1306D1Ev>:
    1f94:	27 e5       	ldi	r18, 0x57	; 87
    1f96:	34 e0       	ldi	r19, 0x04	; 4
    1f98:	fc 01       	movw	r30, r24
    1f9a:	31 83       	std	Z+1, r19	; 0x01
    1f9c:	20 83       	st	Z, r18
    1f9e:	87 8d       	ldd	r24, Z+31	; 0x1f
    1fa0:	90 a1       	ldd	r25, Z+32	; 0x20
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	11 f0       	breq	.+4      	; 0x1faa <_ZN16Adafruit_SSD1306D1Ev+0x16>
    1fa6:	0c 94 f7 2e 	jmp	0x5dee	; 0x5dee <free>
    1faa:	08 95       	ret

00001fac <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
    1fac:	1f 93       	push	r17
    1fae:	cf 93       	push	r28
    1fb0:	df 93       	push	r29
    1fb2:	fc 01       	movw	r30, r24
    1fb4:	85 8d       	ldd	r24, Z+29	; 0x1d
    1fb6:	96 8d       	ldd	r25, Z+30	; 0x1e
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	19 f1       	breq	.+70     	; 0x2002 <__DATA_REGION_LENGTH__+0x2>
    1fbc:	16 2f       	mov	r17, r22
    1fbe:	ef 01       	movw	r28, r30
    1fc0:	61 a1       	ldd	r22, Z+33	; 0x21
    1fc2:	06 2e       	mov	r0, r22
    1fc4:	00 0c       	add	r0, r0
    1fc6:	77 0b       	sbc	r23, r23
    1fc8:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_ZN7TwoWire17beginTransmissionEi>
    1fcc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	ed 91       	ld	r30, X+
    1fd4:	fc 91       	ld	r31, X
    1fd6:	01 90       	ld	r0, Z+
    1fd8:	f0 81       	ld	r31, Z
    1fda:	e0 2d       	mov	r30, r0
    1fdc:	60 e0       	ldi	r22, 0x00	; 0
    1fde:	19 95       	eicall
    1fe0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fe2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	ed 91       	ld	r30, X+
    1fe8:	fc 91       	ld	r31, X
    1fea:	01 90       	ld	r0, Z+
    1fec:	f0 81       	ld	r31, Z
    1fee:	e0 2d       	mov	r30, r0
    1ff0:	61 2f       	mov	r22, r17
    1ff2:	19 95       	eicall
    1ff4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ff6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ff8:	df 91       	pop	r29
    1ffa:	cf 91       	pop	r28
    1ffc:	1f 91       	pop	r17
    1ffe:	0c 94 a7 25 	jmp	0x4b4e	; 0x4b4e <_ZN7TwoWire15endTransmissionEv>
    2002:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2004:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2006:	9c 91       	ld	r25, X
    2008:	83 a9       	ldd	r24, Z+51	; 0x33
    200a:	80 95       	com	r24
    200c:	89 23       	and	r24, r25
    200e:	8c 93       	st	X, r24
    2010:	83 8d       	ldd	r24, Z+27	; 0x1b
    2012:	94 8d       	ldd	r25, Z+28	; 0x1c
    2014:	89 2b       	or	r24, r25
    2016:	29 f0       	breq	.+10     	; 0x2022 <__DATA_REGION_LENGTH__+0x22>
    2018:	86 2f       	mov	r24, r22
    201a:	df 91       	pop	r29
    201c:	cf 91       	pop	r28
    201e:	1f 91       	pop	r17
    2020:	68 cf       	rjmp	.-304    	; 0x1ef2 <_ZN8SPIClass8transferEh>
    2022:	28 e0       	ldi	r18, 0x08	; 8
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	80 e8       	ldi	r24, 0x80	; 128
    2028:	a1 a5       	ldd	r26, Z+41	; 0x29
    202a:	b2 a5       	ldd	r27, Z+42	; 0x2a
    202c:	91 a9       	ldd	r25, Z+49	; 0x31
    202e:	46 2f       	mov	r20, r22
    2030:	48 23       	and	r20, r24
    2032:	19 f0       	breq	.+6      	; 0x203a <__DATA_REGION_LENGTH__+0x3a>
    2034:	4c 91       	ld	r20, X
    2036:	94 2b       	or	r25, r20
    2038:	03 c0       	rjmp	.+6      	; 0x2040 <__DATA_REGION_LENGTH__+0x40>
    203a:	4c 91       	ld	r20, X
    203c:	90 95       	com	r25
    203e:	94 23       	and	r25, r20
    2040:	9c 93       	st	X, r25
    2042:	a3 a5       	ldd	r26, Z+43	; 0x2b
    2044:	b4 a5       	ldd	r27, Z+44	; 0x2c
    2046:	4c 91       	ld	r20, X
    2048:	92 a9       	ldd	r25, Z+50	; 0x32
    204a:	94 2b       	or	r25, r20
    204c:	9c 93       	st	X, r25
    204e:	a3 a5       	ldd	r26, Z+43	; 0x2b
    2050:	b4 a5       	ldd	r27, Z+44	; 0x2c
    2052:	4c 91       	ld	r20, X
    2054:	92 a9       	ldd	r25, Z+50	; 0x32
    2056:	90 95       	com	r25
    2058:	94 23       	and	r25, r20
    205a:	9c 93       	st	X, r25
    205c:	86 95       	lsr	r24
    205e:	21 50       	subi	r18, 0x01	; 1
    2060:	31 09       	sbc	r19, r1
    2062:	11 f7       	brne	.-60     	; 0x2028 <__DATA_REGION_LENGTH__+0x28>
    2064:	df 91       	pop	r29
    2066:	cf 91       	pop	r28
    2068:	1f 91       	pop	r17
    206a:	08 95       	ret

0000206c <_ZN16Adafruit_SSD130613invertDisplayEb>:
    206c:	1f 93       	push	r17
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	ec 01       	movw	r28, r24
    2074:	16 2f       	mov	r17, r22
    2076:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2078:	9e 8d       	ldd	r25, Y+30	; 0x1e
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	39 f0       	breq	.+14     	; 0x208c <_ZN16Adafruit_SSD130613invertDisplayEb+0x20>
    207e:	4d a9       	ldd	r20, Y+53	; 0x35
    2080:	5e a9       	ldd	r21, Y+54	; 0x36
    2082:	6f a9       	ldd	r22, Y+55	; 0x37
    2084:	78 ad       	ldd	r23, Y+56	; 0x38
    2086:	0e 94 25 25 	call	0x4a4a	; 0x4a4a <_ZN7TwoWire8setClockEm>
    208a:	0f c0       	rjmp	.+30     	; 0x20aa <_ZN16Adafruit_SSD130613invertDisplayEb+0x3e>
    208c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    208e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2090:	89 2b       	or	r24, r25
    2092:	21 f0       	breq	.+8      	; 0x209c <_ZN16Adafruit_SSD130613invertDisplayEb+0x30>
    2094:	8e ad       	ldd	r24, Y+62	; 0x3e
    2096:	9f ad       	ldd	r25, Y+63	; 0x3f
    2098:	0e 94 1e 08 	call	0x103c	; 0x103c <_ZN8SPIClass16beginTransactionE11SPISettings>
    209c:	ef a5       	ldd	r30, Y+47	; 0x2f
    209e:	f8 a9       	ldd	r31, Y+48	; 0x30
    20a0:	90 81       	ld	r25, Z
    20a2:	8c a9       	ldd	r24, Y+52	; 0x34
    20a4:	80 95       	com	r24
    20a6:	89 23       	and	r24, r25
    20a8:	80 83       	st	Z, r24
    20aa:	11 11       	cpse	r17, r1
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
    20ae:	66 ea       	ldi	r22, 0xA6	; 166
    20b0:	01 c0       	rjmp	.+2      	; 0x20b4 <_ZN16Adafruit_SSD130613invertDisplayEb+0x48>
    20b2:	67 ea       	ldi	r22, 0xA7	; 167
    20b4:	ce 01       	movw	r24, r28
    20b6:	7a df       	rcall	.-268    	; 0x1fac <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    20b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	49 f0       	breq	.+18     	; 0x20d2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x66>
    20c0:	49 ad       	ldd	r20, Y+57	; 0x39
    20c2:	5a ad       	ldd	r21, Y+58	; 0x3a
    20c4:	6b ad       	ldd	r22, Y+59	; 0x3b
    20c6:	7c ad       	ldd	r23, Y+60	; 0x3c
    20c8:	df 91       	pop	r29
    20ca:	cf 91       	pop	r28
    20cc:	1f 91       	pop	r17
    20ce:	0c 94 25 25 	jmp	0x4a4a	; 0x4a4a <_ZN7TwoWire8setClockEm>
    20d2:	ef a5       	ldd	r30, Y+47	; 0x2f
    20d4:	f8 a9       	ldd	r31, Y+48	; 0x30
    20d6:	90 81       	ld	r25, Z
    20d8:	8c a9       	ldd	r24, Y+52	; 0x34
    20da:	89 2b       	or	r24, r25
    20dc:	80 83       	st	Z, r24
    20de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20e2:	89 2b       	or	r24, r25
    20e4:	29 f0       	breq	.+10     	; 0x20f0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x84>
    20e6:	df 91       	pop	r29
    20e8:	cf 91       	pop	r28
    20ea:	1f 91       	pop	r17
    20ec:	0c 94 38 08 	jmp	0x1070	; 0x1070 <_ZN8SPIClass14endTransactionEv>
    20f0:	df 91       	pop	r29
    20f2:	cf 91       	pop	r28
    20f4:	1f 91       	pop	r17
    20f6:	08 95       	ret

000020f8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
    20f8:	bf 92       	push	r11
    20fa:	cf 92       	push	r12
    20fc:	df 92       	push	r13
    20fe:	ef 92       	push	r14
    2100:	ff 92       	push	r15
    2102:	0f 93       	push	r16
    2104:	1f 93       	push	r17
    2106:	cf 93       	push	r28
    2108:	df 93       	push	r29
    210a:	ec 01       	movw	r28, r24
    210c:	b6 2e       	mov	r11, r22
    210e:	07 2f       	mov	r16, r23
    2110:	14 2f       	mov	r17, r20
    2112:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2114:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2116:	00 97       	sbiw	r24, 0x00	; 0
    2118:	09 f4       	brne	.+2      	; 0x211c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x24>
    211a:	52 c0       	rjmp	.+164    	; 0x21c0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xc8>
    211c:	69 a1       	ldd	r22, Y+33	; 0x21
    211e:	06 2e       	mov	r0, r22
    2120:	00 0c       	add	r0, r0
    2122:	77 0b       	sbc	r23, r23
    2124:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_ZN7TwoWire17beginTransmissionEi>
    2128:	8d 8d       	ldd	r24, Y+29	; 0x1d
    212a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    212c:	dc 01       	movw	r26, r24
    212e:	ed 91       	ld	r30, X+
    2130:	fc 91       	ld	r31, X
    2132:	01 90       	ld	r0, Z+
    2134:	f0 81       	ld	r31, Z
    2136:	e0 2d       	mov	r30, r0
    2138:	60 e0       	ldi	r22, 0x00	; 0
    213a:	19 95       	eicall
    213c:	cb 2c       	mov	r12, r11
    213e:	d0 2e       	mov	r13, r16
    2140:	ee 24       	eor	r14, r14
    2142:	e3 94       	inc	r14
    2144:	f1 2c       	mov	r15, r1
    2146:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2148:	9e 8d       	ldd	r25, Y+30	; 0x1e
    214a:	11 23       	and	r17, r17
    214c:	71 f1       	breq	.+92     	; 0x21aa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb2>
    214e:	b0 e2       	ldi	r27, 0x20	; 32
    2150:	eb 16       	cp	r14, r27
    2152:	f1 04       	cpc	r15, r1
    2154:	b8 f0       	brcs	.+46     	; 0x2184 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x8c>
    2156:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <_ZN7TwoWire15endTransmissionEv>
    215a:	69 a1       	ldd	r22, Y+33	; 0x21
    215c:	06 2e       	mov	r0, r22
    215e:	00 0c       	add	r0, r0
    2160:	77 0b       	sbc	r23, r23
    2162:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2164:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2166:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_ZN7TwoWire17beginTransmissionEi>
    216a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    216c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    216e:	dc 01       	movw	r26, r24
    2170:	ed 91       	ld	r30, X+
    2172:	fc 91       	ld	r31, X
    2174:	01 90       	ld	r0, Z+
    2176:	f0 81       	ld	r31, Z
    2178:	e0 2d       	mov	r30, r0
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	19 95       	eicall
    217e:	ee 24       	eor	r14, r14
    2180:	e3 94       	inc	r14
    2182:	f1 2c       	mov	r15, r1
    2184:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2186:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2188:	f6 01       	movw	r30, r12
    218a:	64 91       	lpm	r22, Z
    218c:	dc 01       	movw	r26, r24
    218e:	ed 91       	ld	r30, X+
    2190:	fc 91       	ld	r31, X
    2192:	01 90       	ld	r0, Z+
    2194:	f0 81       	ld	r31, Z
    2196:	e0 2d       	mov	r30, r0
    2198:	19 95       	eicall
    219a:	bf ef       	ldi	r27, 0xFF	; 255
    219c:	eb 1a       	sub	r14, r27
    219e:	fb 0a       	sbc	r15, r27
    21a0:	11 50       	subi	r17, 0x01	; 1
    21a2:	f6 01       	movw	r30, r12
    21a4:	31 96       	adiw	r30, 0x01	; 1
    21a6:	6f 01       	movw	r12, r30
    21a8:	ce cf       	rjmp	.-100    	; 0x2146 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x4e>
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	1f 91       	pop	r17
    21b0:	0f 91       	pop	r16
    21b2:	ff 90       	pop	r15
    21b4:	ef 90       	pop	r14
    21b6:	df 90       	pop	r13
    21b8:	cf 90       	pop	r12
    21ba:	bf 90       	pop	r11
    21bc:	0c 94 a7 25 	jmp	0x4b4e	; 0x4b4e <_ZN7TwoWire15endTransmissionEv>
    21c0:	ed a5       	ldd	r30, Y+45	; 0x2d
    21c2:	fe a5       	ldd	r31, Y+46	; 0x2e
    21c4:	90 81       	ld	r25, Z
    21c6:	8b a9       	ldd	r24, Y+51	; 0x33
    21c8:	80 95       	com	r24
    21ca:	89 23       	and	r24, r25
    21cc:	80 83       	st	Z, r24
    21ce:	e6 2e       	mov	r14, r22
    21d0:	f7 2e       	mov	r15, r23
    21d2:	11 23       	and	r17, r17
    21d4:	71 f1       	breq	.+92     	; 0x2232 <__stack+0x33>
    21d6:	f7 01       	movw	r30, r14
    21d8:	84 91       	lpm	r24, Z
    21da:	2b 8d       	ldd	r18, Y+27	; 0x1b
    21dc:	3c 8d       	ldd	r19, Y+28	; 0x1c
    21de:	23 2b       	or	r18, r19
    21e0:	31 f0       	breq	.+12     	; 0x21ee <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xf6>
    21e2:	87 de       	rcall	.-754    	; 0x1ef2 <_ZN8SPIClass8transferEh>
    21e4:	11 50       	subi	r17, 0x01	; 1
    21e6:	c7 01       	movw	r24, r14
    21e8:	01 96       	adiw	r24, 0x01	; 1
    21ea:	7c 01       	movw	r14, r24
    21ec:	f2 cf       	rjmp	.-28     	; 0x21d2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xda>
    21ee:	28 e0       	ldi	r18, 0x08	; 8
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e8       	ldi	r20, 0x80	; 128
    21f4:	e9 a5       	ldd	r30, Y+41	; 0x29
    21f6:	fa a5       	ldd	r31, Y+42	; 0x2a
    21f8:	99 a9       	ldd	r25, Y+49	; 0x31
    21fa:	58 2f       	mov	r21, r24
    21fc:	54 23       	and	r21, r20
    21fe:	19 f0       	breq	.+6      	; 0x2206 <__stack+0x7>
    2200:	50 81       	ld	r21, Z
    2202:	95 2b       	or	r25, r21
    2204:	03 c0       	rjmp	.+6      	; 0x220c <__stack+0xd>
    2206:	50 81       	ld	r21, Z
    2208:	90 95       	com	r25
    220a:	95 23       	and	r25, r21
    220c:	90 83       	st	Z, r25
    220e:	eb a5       	ldd	r30, Y+43	; 0x2b
    2210:	fc a5       	ldd	r31, Y+44	; 0x2c
    2212:	50 81       	ld	r21, Z
    2214:	9a a9       	ldd	r25, Y+50	; 0x32
    2216:	95 2b       	or	r25, r21
    2218:	90 83       	st	Z, r25
    221a:	eb a5       	ldd	r30, Y+43	; 0x2b
    221c:	fc a5       	ldd	r31, Y+44	; 0x2c
    221e:	50 81       	ld	r21, Z
    2220:	9a a9       	ldd	r25, Y+50	; 0x32
    2222:	90 95       	com	r25
    2224:	95 23       	and	r25, r21
    2226:	90 83       	st	Z, r25
    2228:	46 95       	lsr	r20
    222a:	21 50       	subi	r18, 0x01	; 1
    222c:	31 09       	sbc	r19, r1
    222e:	11 f7       	brne	.-60     	; 0x21f4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xfc>
    2230:	d9 cf       	rjmp	.-78     	; 0x21e4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xec>
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	1f 91       	pop	r17
    2238:	0f 91       	pop	r16
    223a:	ff 90       	pop	r15
    223c:	ef 90       	pop	r14
    223e:	df 90       	pop	r13
    2240:	cf 90       	pop	r12
    2242:	bf 90       	pop	r11
    2244:	08 95       	ret

00002246 <_ZN16Adafruit_SSD130612clearDisplayEv>:
    2246:	fc 01       	movw	r30, r24
    2248:	86 81       	ldd	r24, Z+6	; 0x06
    224a:	97 81       	ldd	r25, Z+7	; 0x07
    224c:	9c 01       	movw	r18, r24
    224e:	29 5f       	subi	r18, 0xF9	; 249
    2250:	3f 4f       	sbci	r19, 0xFF	; 255
    2252:	37 ff       	sbrs	r19, 7
    2254:	02 c0       	rjmp	.+4      	; 0x225a <_ZN16Adafruit_SSD130612clearDisplayEv+0x14>
    2256:	29 5f       	subi	r18, 0xF9	; 249
    2258:	3f 4f       	sbci	r19, 0xFF	; 255
    225a:	83 e0       	ldi	r24, 0x03	; 3
    225c:	35 95       	asr	r19
    225e:	27 95       	ror	r18
    2260:	8a 95       	dec	r24
    2262:	e1 f7       	brne	.-8      	; 0x225c <_ZN16Adafruit_SSD130612clearDisplayEv+0x16>
    2264:	84 81       	ldd	r24, Z+4	; 0x04
    2266:	95 81       	ldd	r25, Z+5	; 0x05
    2268:	28 9f       	mul	r18, r24
    226a:	a0 01       	movw	r20, r0
    226c:	29 9f       	mul	r18, r25
    226e:	50 0d       	add	r21, r0
    2270:	38 9f       	mul	r19, r24
    2272:	50 0d       	add	r21, r0
    2274:	11 24       	eor	r1, r1
    2276:	60 e0       	ldi	r22, 0x00	; 0
    2278:	70 e0       	ldi	r23, 0x00	; 0
    227a:	87 8d       	ldd	r24, Z+31	; 0x1f
    227c:	90 a1       	ldd	r25, Z+32	; 0x20
    227e:	0c 94 84 2f 	jmp	0x5f08	; 0x5f08 <memset>

00002282 <_ZN16Adafruit_SSD13065beginEhhbb>:
    2282:	8f 92       	push	r8
    2284:	9f 92       	push	r9
    2286:	af 92       	push	r10
    2288:	bf 92       	push	r11
    228a:	cf 92       	push	r12
    228c:	df 92       	push	r13
    228e:	ef 92       	push	r14
    2290:	ff 92       	push	r15
    2292:	0f 93       	push	r16
    2294:	1f 93       	push	r17
    2296:	cf 93       	push	r28
    2298:	df 93       	push	r29
    229a:	ec 01       	movw	r28, r24
    229c:	86 2e       	mov	r8, r22
    229e:	b4 2e       	mov	r11, r20
    22a0:	a2 2e       	mov	r10, r18
    22a2:	90 2e       	mov	r9, r16
    22a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22a6:	98 a1       	ldd	r25, Y+32	; 0x20
    22a8:	89 2b       	or	r24, r25
    22aa:	e9 f4       	brne	.+58     	; 0x22e6 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    22ac:	2e 81       	ldd	r18, Y+6	; 0x06
    22ae:	3f 81       	ldd	r19, Y+7	; 0x07
    22b0:	c9 01       	movw	r24, r18
    22b2:	07 96       	adiw	r24, 0x07	; 7
    22b4:	97 fd       	sbrc	r25, 7
    22b6:	07 96       	adiw	r24, 0x07	; 7
    22b8:	23 e0       	ldi	r18, 0x03	; 3
    22ba:	95 95       	asr	r25
    22bc:	87 95       	ror	r24
    22be:	2a 95       	dec	r18
    22c0:	e1 f7       	brne	.-8      	; 0x22ba <_ZN16Adafruit_SSD13065beginEhhbb+0x38>
    22c2:	2c 81       	ldd	r18, Y+4	; 0x04
    22c4:	3d 81       	ldd	r19, Y+5	; 0x05
    22c6:	ac 01       	movw	r20, r24
    22c8:	42 9f       	mul	r20, r18
    22ca:	c0 01       	movw	r24, r0
    22cc:	43 9f       	mul	r20, r19
    22ce:	90 0d       	add	r25, r0
    22d0:	52 9f       	mul	r21, r18
    22d2:	90 0d       	add	r25, r0
    22d4:	11 24       	eor	r1, r1
    22d6:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <malloc>
    22da:	98 a3       	std	Y+32, r25	; 0x20
    22dc:	8f 8f       	std	Y+31, r24	; 0x1f
    22de:	89 2b       	or	r24, r25
    22e0:	11 f4       	brne	.+4      	; 0x22e6 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	84 c1       	rjmp	.+776    	; 0x25ee <_ZN16Adafruit_SSD13065beginEhhbb+0x36c>
    22e6:	ce 01       	movw	r24, r28
    22e8:	ae df       	rcall	.-164    	; 0x2246 <_ZN16Adafruit_SSD130612clearDisplayEv>
    22ea:	8e 81       	ldd	r24, Y+6	; 0x06
    22ec:	9f 81       	ldd	r25, Y+7	; 0x07
    22ee:	6c 81       	ldd	r22, Y+4	; 0x04
    22f0:	7d 81       	ldd	r23, Y+5	; 0x05
    22f2:	81 32       	cpi	r24, 0x21	; 33
    22f4:	91 05       	cpc	r25, r1
    22f6:	e4 f0       	brlt	.+56     	; 0x2330 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    22f8:	ac 01       	movw	r20, r24
    22fa:	40 54       	subi	r20, 0x40	; 64
    22fc:	51 09       	sbc	r21, r1
    22fe:	57 ff       	sbrs	r21, 7
    2300:	02 c0       	rjmp	.+4      	; 0x2306 <_ZN16Adafruit_SSD13065beginEhhbb+0x84>
    2302:	4f 5f       	subi	r20, 0xFF	; 255
    2304:	5f 4f       	sbci	r21, 0xFF	; 255
    2306:	55 95       	asr	r21
    2308:	47 95       	ror	r20
    230a:	62 55       	subi	r22, 0x52	; 82
    230c:	71 09       	sbc	r23, r1
    230e:	77 ff       	sbrs	r23, 7
    2310:	02 c0       	rjmp	.+4      	; 0x2316 <_ZN16Adafruit_SSD13065beginEhhbb+0x94>
    2312:	6f 5f       	subi	r22, 0xFF	; 255
    2314:	7f 4f       	sbci	r23, 0xFF	; 255
    2316:	75 95       	asr	r23
    2318:	67 95       	ror	r22
    231a:	cc 24       	eor	r12, r12
    231c:	c3 94       	inc	r12
    231e:	d1 2c       	mov	r13, r1
    2320:	80 e4       	ldi	r24, 0x40	; 64
    2322:	e8 2e       	mov	r14, r24
    2324:	f1 2c       	mov	r15, r1
    2326:	02 e5       	ldi	r16, 0x52	; 82
    2328:	10 e0       	ldi	r17, 0x00	; 0
    232a:	2e e7       	ldi	r18, 0x7E	; 126
    232c:	38 e0       	ldi	r19, 0x08	; 8
    232e:	1b c0       	rjmp	.+54     	; 0x2366 <_ZN16Adafruit_SSD13065beginEhhbb+0xe4>
    2330:	ac 01       	movw	r20, r24
    2332:	40 52       	subi	r20, 0x20	; 32
    2334:	51 09       	sbc	r21, r1
    2336:	57 ff       	sbrs	r21, 7
    2338:	02 c0       	rjmp	.+4      	; 0x233e <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
    233a:	4f 5f       	subi	r20, 0xFF	; 255
    233c:	5f 4f       	sbci	r21, 0xFF	; 255
    233e:	55 95       	asr	r21
    2340:	47 95       	ror	r20
    2342:	63 57       	subi	r22, 0x73	; 115
    2344:	71 09       	sbc	r23, r1
    2346:	77 ff       	sbrs	r23, 7
    2348:	02 c0       	rjmp	.+4      	; 0x234e <_ZN16Adafruit_SSD13065beginEhhbb+0xcc>
    234a:	6f 5f       	subi	r22, 0xFF	; 255
    234c:	7f 4f       	sbci	r23, 0xFF	; 255
    234e:	75 95       	asr	r23
    2350:	67 95       	ror	r22
    2352:	cc 24       	eor	r12, r12
    2354:	c3 94       	inc	r12
    2356:	d1 2c       	mov	r13, r1
    2358:	a0 e2       	ldi	r26, 0x20	; 32
    235a:	ea 2e       	mov	r14, r26
    235c:	f1 2c       	mov	r15, r1
    235e:	03 e7       	ldi	r16, 0x73	; 115
    2360:	10 e0       	ldi	r17, 0x00	; 0
    2362:	2e e9       	ldi	r18, 0x9E	; 158
    2364:	36 e0       	ldi	r19, 0x06	; 6
    2366:	ce 01       	movw	r24, r28
    2368:	51 d9       	rcall	.-3422   	; 0x160c <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    236a:	8a a2       	std	Y+34, r8	; 0x22
    236c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    236e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	99 f0       	breq	.+38     	; 0x239a <_ZN16Adafruit_SSD13065beginEhhbb+0x118>
    2374:	b1 10       	cpse	r11, r1
    2376:	07 c0       	rjmp	.+14     	; 0x2386 <_ZN16Adafruit_SSD13065beginEhhbb+0x104>
    2378:	2e 81       	ldd	r18, Y+6	; 0x06
    237a:	3f 81       	ldd	r19, Y+7	; 0x07
    237c:	20 32       	cpi	r18, 0x20	; 32
    237e:	31 05       	cpc	r19, r1
    2380:	21 f4       	brne	.+8      	; 0x238a <_ZN16Adafruit_SSD13065beginEhhbb+0x108>
    2382:	2c e3       	ldi	r18, 0x3C	; 60
    2384:	03 c0       	rjmp	.+6      	; 0x238c <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
    2386:	2b 2d       	mov	r18, r11
    2388:	01 c0       	rjmp	.+2      	; 0x238c <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
    238a:	2d e3       	ldi	r18, 0x3D	; 61
    238c:	29 a3       	std	Y+33, r18	; 0x21
    238e:	99 20       	and	r9, r9
    2390:	09 f4       	brne	.+2      	; 0x2394 <_ZN16Adafruit_SSD13065beginEhhbb+0x112>
    2392:	2a c1       	rjmp	.+596    	; 0x25e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x366>
    2394:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <_ZN7TwoWire5beginEv>
    2398:	79 c0       	rjmp	.+242    	; 0x248c <_ZN16Adafruit_SSD13065beginEhhbb+0x20a>
    239a:	61 e0       	ldi	r22, 0x01	; 1
    239c:	8e a1       	ldd	r24, Y+38	; 0x26
    239e:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <pinMode>
    23a2:	61 e0       	ldi	r22, 0x01	; 1
    23a4:	8f a1       	ldd	r24, Y+39	; 0x27
    23a6:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <pinMode>
    23aa:	8e a1       	ldd	r24, Y+38	; 0x26
    23ac:	08 2e       	mov	r0, r24
    23ae:	00 0c       	add	r0, r0
    23b0:	99 0b       	sbc	r25, r25
    23b2:	fc 01       	movw	r30, r24
    23b4:	ea 52       	subi	r30, 0x2A	; 42
    23b6:	f4 4f       	sbci	r31, 0xF4	; 244
    23b8:	e4 91       	lpm	r30, Z
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	ee 0f       	add	r30, r30
    23be:	ff 1f       	adc	r31, r31
    23c0:	ea 5c       	subi	r30, 0xCA	; 202
    23c2:	f3 4f       	sbci	r31, 0xF3	; 243
    23c4:	25 91       	lpm	r18, Z+
    23c6:	34 91       	lpm	r19, Z
    23c8:	3e a7       	std	Y+46, r19	; 0x2e
    23ca:	2d a7       	std	Y+45, r18	; 0x2d
    23cc:	fc 01       	movw	r30, r24
    23ce:	e0 57       	subi	r30, 0x70	; 112
    23d0:	f4 4f       	sbci	r31, 0xF4	; 244
    23d2:	e4 91       	lpm	r30, Z
    23d4:	eb ab       	std	Y+51, r30	; 0x33
    23d6:	8f a1       	ldd	r24, Y+39	; 0x27
    23d8:	08 2e       	mov	r0, r24
    23da:	00 0c       	add	r0, r0
    23dc:	99 0b       	sbc	r25, r25
    23de:	fc 01       	movw	r30, r24
    23e0:	ea 52       	subi	r30, 0x2A	; 42
    23e2:	f4 4f       	sbci	r31, 0xF4	; 244
    23e4:	e4 91       	lpm	r30, Z
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	ee 0f       	add	r30, r30
    23ea:	ff 1f       	adc	r31, r31
    23ec:	ea 5c       	subi	r30, 0xCA	; 202
    23ee:	f3 4f       	sbci	r31, 0xF3	; 243
    23f0:	a5 91       	lpm	r26, Z+
    23f2:	b4 91       	lpm	r27, Z
    23f4:	b8 ab       	std	Y+48, r27	; 0x30
    23f6:	af a7       	std	Y+47, r26	; 0x2f
    23f8:	fc 01       	movw	r30, r24
    23fa:	e0 57       	subi	r30, 0x70	; 112
    23fc:	f4 4f       	sbci	r31, 0xF4	; 244
    23fe:	e4 91       	lpm	r30, Z
    2400:	ec ab       	std	Y+52, r30	; 0x34
    2402:	8c 91       	ld	r24, X
    2404:	e8 2b       	or	r30, r24
    2406:	ec 93       	st	X, r30
    2408:	8b 8d       	ldd	r24, Y+27	; 0x1b
    240a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    240c:	89 2b       	or	r24, r25
    240e:	31 f0       	breq	.+12     	; 0x241c <_ZN16Adafruit_SSD13065beginEhhbb+0x19a>
    2410:	99 20       	and	r9, r9
    2412:	09 f4       	brne	.+2      	; 0x2416 <_ZN16Adafruit_SSD13065beginEhhbb+0x194>
    2414:	3b c0       	rjmp	.+118    	; 0x248c <_ZN16Adafruit_SSD13065beginEhhbb+0x20a>
    2416:	0e 94 4e 20 	call	0x409c	; 0x409c <_ZN8SPIClass5beginEv>
    241a:	38 c0       	rjmp	.+112    	; 0x248c <_ZN16Adafruit_SSD13065beginEhhbb+0x20a>
    241c:	61 e0       	ldi	r22, 0x01	; 1
    241e:	8c a1       	ldd	r24, Y+36	; 0x24
    2420:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <pinMode>
    2424:	61 e0       	ldi	r22, 0x01	; 1
    2426:	8d a1       	ldd	r24, Y+37	; 0x25
    2428:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <pinMode>
    242c:	8c a1       	ldd	r24, Y+36	; 0x24
    242e:	08 2e       	mov	r0, r24
    2430:	00 0c       	add	r0, r0
    2432:	99 0b       	sbc	r25, r25
    2434:	fc 01       	movw	r30, r24
    2436:	ea 52       	subi	r30, 0x2A	; 42
    2438:	f4 4f       	sbci	r31, 0xF4	; 244
    243a:	e4 91       	lpm	r30, Z
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	ee 0f       	add	r30, r30
    2440:	ff 1f       	adc	r31, r31
    2442:	ea 5c       	subi	r30, 0xCA	; 202
    2444:	f3 4f       	sbci	r31, 0xF3	; 243
    2446:	25 91       	lpm	r18, Z+
    2448:	34 91       	lpm	r19, Z
    244a:	3a a7       	std	Y+42, r19	; 0x2a
    244c:	29 a7       	std	Y+41, r18	; 0x29
    244e:	fc 01       	movw	r30, r24
    2450:	e0 57       	subi	r30, 0x70	; 112
    2452:	f4 4f       	sbci	r31, 0xF4	; 244
    2454:	e4 91       	lpm	r30, Z
    2456:	e9 ab       	std	Y+49, r30	; 0x31
    2458:	8d a1       	ldd	r24, Y+37	; 0x25
    245a:	08 2e       	mov	r0, r24
    245c:	00 0c       	add	r0, r0
    245e:	99 0b       	sbc	r25, r25
    2460:	fc 01       	movw	r30, r24
    2462:	ea 52       	subi	r30, 0x2A	; 42
    2464:	f4 4f       	sbci	r31, 0xF4	; 244
    2466:	e4 91       	lpm	r30, Z
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	ee 0f       	add	r30, r30
    246c:	ff 1f       	adc	r31, r31
    246e:	ea 5c       	subi	r30, 0xCA	; 202
    2470:	f3 4f       	sbci	r31, 0xF3	; 243
    2472:	a5 91       	lpm	r26, Z+
    2474:	b4 91       	lpm	r27, Z
    2476:	bc a7       	std	Y+44, r27	; 0x2c
    2478:	ab a7       	std	Y+43, r26	; 0x2b
    247a:	fc 01       	movw	r30, r24
    247c:	e0 57       	subi	r30, 0x70	; 112
    247e:	f4 4f       	sbci	r31, 0xF4	; 244
    2480:	e4 91       	lpm	r30, Z
    2482:	ea ab       	std	Y+50, r30	; 0x32
    2484:	8c 91       	ld	r24, X
    2486:	e0 95       	com	r30
    2488:	e8 23       	and	r30, r24
    248a:	ec 93       	st	X, r30
    248c:	aa 20       	and	r10, r10
    248e:	f1 f0       	breq	.+60     	; 0x24cc <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
    2490:	88 a5       	ldd	r24, Y+40	; 0x28
    2492:	87 fd       	sbrc	r24, 7
    2494:	1b c0       	rjmp	.+54     	; 0x24cc <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
    2496:	61 e0       	ldi	r22, 0x01	; 1
    2498:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <pinMode>
    249c:	61 e0       	ldi	r22, 0x01	; 1
    249e:	88 a5       	ldd	r24, Y+40	; 0x28
    24a0:	0e 94 e2 2d 	call	0x5bc4	; 0x5bc4 <digitalWrite>
    24a4:	61 e0       	ldi	r22, 0x01	; 1
    24a6:	70 e0       	ldi	r23, 0x00	; 0
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	0e 94 ab 2c 	call	0x5956	; 0x5956 <delay>
    24b0:	60 e0       	ldi	r22, 0x00	; 0
    24b2:	88 a5       	ldd	r24, Y+40	; 0x28
    24b4:	0e 94 e2 2d 	call	0x5bc4	; 0x5bc4 <digitalWrite>
    24b8:	6a e0       	ldi	r22, 0x0A	; 10
    24ba:	70 e0       	ldi	r23, 0x00	; 0
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	0e 94 ab 2c 	call	0x5956	; 0x5956 <delay>
    24c4:	61 e0       	ldi	r22, 0x01	; 1
    24c6:	88 a5       	ldd	r24, Y+40	; 0x28
    24c8:	0e 94 e2 2d 	call	0x5bc4	; 0x5bc4 <digitalWrite>
    24cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24d0:	00 97       	sbiw	r24, 0x00	; 0
    24d2:	39 f0       	breq	.+14     	; 0x24e2 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>
    24d4:	4d a9       	ldd	r20, Y+53	; 0x35
    24d6:	5e a9       	ldd	r21, Y+54	; 0x36
    24d8:	6f a9       	ldd	r22, Y+55	; 0x37
    24da:	78 ad       	ldd	r23, Y+56	; 0x38
    24dc:	0e 94 25 25 	call	0x4a4a	; 0x4a4a <_ZN7TwoWire8setClockEm>
    24e0:	0f c0       	rjmp	.+30     	; 0x2500 <_ZN16Adafruit_SSD13065beginEhhbb+0x27e>
    24e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24e6:	89 2b       	or	r24, r25
    24e8:	21 f0       	breq	.+8      	; 0x24f2 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>
    24ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    24ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    24ee:	0e 94 1e 08 	call	0x103c	; 0x103c <_ZN8SPIClass16beginTransactionE11SPISettings>
    24f2:	ef a5       	ldd	r30, Y+47	; 0x2f
    24f4:	f8 a9       	ldd	r31, Y+48	; 0x30
    24f6:	90 81       	ld	r25, Z
    24f8:	8c a9       	ldd	r24, Y+52	; 0x34
    24fa:	80 95       	com	r24
    24fc:	89 23       	and	r24, r25
    24fe:	80 83       	st	Z, r24
    2500:	44 e0       	ldi	r20, 0x04	; 4
    2502:	6a e9       	ldi	r22, 0x9A	; 154
    2504:	76 e0       	ldi	r23, 0x06	; 6
    2506:	ce 01       	movw	r24, r28
    2508:	f7 dd       	rcall	.-1042   	; 0x20f8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    250a:	6e 81       	ldd	r22, Y+6	; 0x06
    250c:	61 50       	subi	r22, 0x01	; 1
    250e:	ce 01       	movw	r24, r28
    2510:	4d dd       	rcall	.-1382   	; 0x1fac <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2512:	44 e0       	ldi	r20, 0x04	; 4
    2514:	66 e9       	ldi	r22, 0x96	; 150
    2516:	76 e0       	ldi	r23, 0x06	; 6
    2518:	ce 01       	movw	r24, r28
    251a:	ee dd       	rcall	.-1060   	; 0x20f8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    251c:	8a a1       	ldd	r24, Y+34	; 0x22
    251e:	81 30       	cpi	r24, 0x01	; 1
    2520:	11 f4       	brne	.+4      	; 0x2526 <_ZN16Adafruit_SSD13065beginEhhbb+0x2a4>
    2522:	60 e1       	ldi	r22, 0x10	; 16
    2524:	01 c0       	rjmp	.+2      	; 0x2528 <_ZN16Adafruit_SSD13065beginEhhbb+0x2a6>
    2526:	64 e1       	ldi	r22, 0x14	; 20
    2528:	ce 01       	movw	r24, r28
    252a:	40 dd       	rcall	.-1408   	; 0x1fac <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    252c:	44 e0       	ldi	r20, 0x04	; 4
    252e:	62 e9       	ldi	r22, 0x92	; 146
    2530:	76 e0       	ldi	r23, 0x06	; 6
    2532:	ce 01       	movw	r24, r28
    2534:	e1 dd       	rcall	.-1086   	; 0x20f8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    2536:	8f e8       	ldi	r24, 0x8F	; 143
    2538:	8d af       	std	Y+61, r24	; 0x3d
    253a:	8c 81       	ldd	r24, Y+4	; 0x04
    253c:	9d 81       	ldd	r25, Y+5	; 0x05
    253e:	80 38       	cpi	r24, 0x80	; 128
    2540:	91 05       	cpc	r25, r1
    2542:	71 f4       	brne	.+28     	; 0x2560 <_ZN16Adafruit_SSD13065beginEhhbb+0x2de>
    2544:	8e 81       	ldd	r24, Y+6	; 0x06
    2546:	9f 81       	ldd	r25, Y+7	; 0x07
    2548:	80 34       	cpi	r24, 0x40	; 64
    254a:	91 05       	cpc	r25, r1
    254c:	b9 f4       	brne	.+46     	; 0x257c <_ZN16Adafruit_SSD13065beginEhhbb+0x2fa>
    254e:	8a a1       	ldd	r24, Y+34	; 0x22
    2550:	81 30       	cpi	r24, 0x01	; 1
    2552:	11 f4       	brne	.+4      	; 0x2558 <_ZN16Adafruit_SSD13065beginEhhbb+0x2d6>
    2554:	8f e9       	ldi	r24, 0x9F	; 159
    2556:	01 c0       	rjmp	.+2      	; 0x255a <_ZN16Adafruit_SSD13065beginEhhbb+0x2d8>
    2558:	8f ec       	ldi	r24, 0xCF	; 207
    255a:	8d af       	std	Y+61, r24	; 0x3d
    255c:	12 e1       	ldi	r17, 0x12	; 18
    255e:	0f c0       	rjmp	.+30     	; 0x257e <_ZN16Adafruit_SSD13065beginEhhbb+0x2fc>
    2560:	80 36       	cpi	r24, 0x60	; 96
    2562:	91 05       	cpc	r25, r1
    2564:	59 f4       	brne	.+22     	; 0x257c <_ZN16Adafruit_SSD13065beginEhhbb+0x2fa>
    2566:	8e 81       	ldd	r24, Y+6	; 0x06
    2568:	9f 81       	ldd	r25, Y+7	; 0x07
    256a:	40 97       	sbiw	r24, 0x10	; 16
    256c:	39 f4       	brne	.+14     	; 0x257c <_ZN16Adafruit_SSD13065beginEhhbb+0x2fa>
    256e:	8a a1       	ldd	r24, Y+34	; 0x22
    2570:	81 30       	cpi	r24, 0x01	; 1
    2572:	11 f4       	brne	.+4      	; 0x2578 <_ZN16Adafruit_SSD13065beginEhhbb+0x2f6>
    2574:	80 e1       	ldi	r24, 0x10	; 16
    2576:	01 c0       	rjmp	.+2      	; 0x257a <_ZN16Adafruit_SSD13065beginEhhbb+0x2f8>
    2578:	8f ea       	ldi	r24, 0xAF	; 175
    257a:	8d af       	std	Y+61, r24	; 0x3d
    257c:	12 e0       	ldi	r17, 0x02	; 2
    257e:	6a ed       	ldi	r22, 0xDA	; 218
    2580:	ce 01       	movw	r24, r28
    2582:	14 dd       	rcall	.-1496   	; 0x1fac <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2584:	61 2f       	mov	r22, r17
    2586:	ce 01       	movw	r24, r28
    2588:	11 dd       	rcall	.-1502   	; 0x1fac <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    258a:	61 e8       	ldi	r22, 0x81	; 129
    258c:	ce 01       	movw	r24, r28
    258e:	0e dd       	rcall	.-1508   	; 0x1fac <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2590:	6d ad       	ldd	r22, Y+61	; 0x3d
    2592:	ce 01       	movw	r24, r28
    2594:	0b dd       	rcall	.-1514   	; 0x1fac <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    2596:	69 ed       	ldi	r22, 0xD9	; 217
    2598:	ce 01       	movw	r24, r28
    259a:	08 dd       	rcall	.-1520   	; 0x1fac <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    259c:	8a a1       	ldd	r24, Y+34	; 0x22
    259e:	81 30       	cpi	r24, 0x01	; 1
    25a0:	11 f4       	brne	.+4      	; 0x25a6 <_ZN16Adafruit_SSD13065beginEhhbb+0x324>
    25a2:	62 e2       	ldi	r22, 0x22	; 34
    25a4:	01 c0       	rjmp	.+2      	; 0x25a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x326>
    25a6:	61 ef       	ldi	r22, 0xF1	; 241
    25a8:	ce 01       	movw	r24, r28
    25aa:	00 dd       	rcall	.-1536   	; 0x1fac <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    25ac:	46 e0       	ldi	r20, 0x06	; 6
    25ae:	6c e8       	ldi	r22, 0x8C	; 140
    25b0:	76 e0       	ldi	r23, 0x06	; 6
    25b2:	ce 01       	movw	r24, r28
    25b4:	a1 dd       	rcall	.-1214   	; 0x20f8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    25b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	39 f0       	breq	.+14     	; 0x25cc <_ZN16Adafruit_SSD13065beginEhhbb+0x34a>
    25be:	49 ad       	ldd	r20, Y+57	; 0x39
    25c0:	5a ad       	ldd	r21, Y+58	; 0x3a
    25c2:	6b ad       	ldd	r22, Y+59	; 0x3b
    25c4:	7c ad       	ldd	r23, Y+60	; 0x3c
    25c6:	0e 94 25 25 	call	0x4a4a	; 0x4a4a <_ZN7TwoWire8setClockEm>
    25ca:	0c c0       	rjmp	.+24     	; 0x25e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x362>
    25cc:	ef a5       	ldd	r30, Y+47	; 0x2f
    25ce:	f8 a9       	ldd	r31, Y+48	; 0x30
    25d0:	90 81       	ld	r25, Z
    25d2:	8c a9       	ldd	r24, Y+52	; 0x34
    25d4:	89 2b       	or	r24, r25
    25d6:	80 83       	st	Z, r24
    25d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25dc:	89 2b       	or	r24, r25
    25de:	11 f0       	breq	.+4      	; 0x25e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x362>
    25e0:	0e 94 38 08 	call	0x1070	; 0x1070 <_ZN8SPIClass14endTransactionEv>
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	03 c0       	rjmp	.+6      	; 0x25ee <_ZN16Adafruit_SSD13065beginEhhbb+0x36c>
    25e8:	a1 10       	cpse	r10, r1
    25ea:	52 cf       	rjmp	.-348    	; 0x2490 <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    25ec:	73 cf       	rjmp	.-282    	; 0x24d4 <_ZN16Adafruit_SSD13065beginEhhbb+0x252>
    25ee:	df 91       	pop	r29
    25f0:	cf 91       	pop	r28
    25f2:	1f 91       	pop	r17
    25f4:	0f 91       	pop	r16
    25f6:	ff 90       	pop	r15
    25f8:	ef 90       	pop	r14
    25fa:	df 90       	pop	r13
    25fc:	cf 90       	pop	r12
    25fe:	bf 90       	pop	r11
    2600:	af 90       	pop	r10
    2602:	9f 90       	pop	r9
    2604:	8f 90       	pop	r8
    2606:	08 95       	ret

00002608 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>:
    2608:	0f 93       	push	r16
    260a:	1f 93       	push	r17
    260c:	cf 93       	push	r28
    260e:	df 93       	push	r29
    2610:	dc 01       	movw	r26, r24
    2612:	57 fd       	sbrc	r21, 7
    2614:	64 c0       	rjmp	.+200    	; 0x26de <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2616:	16 96       	adiw	r26, 0x06	; 6
    2618:	8d 91       	ld	r24, X+
    261a:	9c 91       	ld	r25, X
    261c:	17 97       	sbiw	r26, 0x07	; 7
    261e:	48 17       	cp	r20, r24
    2620:	59 07       	cpc	r21, r25
    2622:	0c f0       	brlt	.+2      	; 0x2626 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1e>
    2624:	5c c0       	rjmp	.+184    	; 0x26de <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2626:	77 ff       	sbrs	r23, 7
    2628:	04 c0       	rjmp	.+8      	; 0x2632 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x2a>
    262a:	26 0f       	add	r18, r22
    262c:	37 1f       	adc	r19, r23
    262e:	60 e0       	ldi	r22, 0x00	; 0
    2630:	70 e0       	ldi	r23, 0x00	; 0
    2632:	14 96       	adiw	r26, 0x04	; 4
    2634:	cd 91       	ld	r28, X+
    2636:	dc 91       	ld	r29, X
    2638:	15 97       	sbiw	r26, 0x05	; 5
    263a:	cb 01       	movw	r24, r22
    263c:	82 0f       	add	r24, r18
    263e:	93 1f       	adc	r25, r19
    2640:	c8 17       	cp	r28, r24
    2642:	d9 07       	cpc	r29, r25
    2644:	1c f4       	brge	.+6      	; 0x264c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x44>
    2646:	9e 01       	movw	r18, r28
    2648:	26 1b       	sub	r18, r22
    264a:	37 0b       	sbc	r19, r23
    264c:	12 16       	cp	r1, r18
    264e:	13 06       	cpc	r1, r19
    2650:	0c f0       	brlt	.+2      	; 0x2654 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x4c>
    2652:	45 c0       	rjmp	.+138    	; 0x26de <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    2654:	fa 01       	movw	r30, r20
    2656:	57 fd       	sbrc	r21, 7
    2658:	37 96       	adiw	r30, 0x07	; 7
    265a:	cf 01       	movw	r24, r30
    265c:	e3 e0       	ldi	r30, 0x03	; 3
    265e:	95 95       	asr	r25
    2660:	87 95       	ror	r24
    2662:	ea 95       	dec	r30
    2664:	e1 f7       	brne	.-8      	; 0x265e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x56>
    2666:	8c 9f       	mul	r24, r28
    2668:	f0 01       	movw	r30, r0
    266a:	8d 9f       	mul	r24, r29
    266c:	f0 0d       	add	r31, r0
    266e:	9c 9f       	mul	r25, r28
    2670:	f0 0d       	add	r31, r0
    2672:	11 24       	eor	r1, r1
    2674:	6e 0f       	add	r22, r30
    2676:	7f 1f       	adc	r23, r31
    2678:	5f 96       	adiw	r26, 0x1f	; 31
    267a:	ed 91       	ld	r30, X+
    267c:	fc 91       	ld	r31, X
    267e:	90 97       	sbiw	r26, 0x20	; 32
    2680:	e6 0f       	add	r30, r22
    2682:	f7 1f       	adc	r31, r23
    2684:	47 70       	andi	r20, 0x07	; 7
    2686:	55 27       	eor	r21, r21
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	01 c0       	rjmp	.+2      	; 0x2690 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x88>
    268e:	88 0f       	add	r24, r24
    2690:	4a 95       	dec	r20
    2692:	ea f7       	brpl	.-6      	; 0x268e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x86>
    2694:	48 2f       	mov	r20, r24
    2696:	01 30       	cpi	r16, 0x01	; 1
    2698:	11 05       	cpc	r17, r1
    269a:	39 f0       	breq	.+14     	; 0x26aa <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa2>
    269c:	78 f0       	brcs	.+30     	; 0x26bc <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xb4>
    269e:	02 30       	cpi	r16, 0x02	; 2
    26a0:	11 05       	cpc	r17, r1
    26a2:	e9 f4       	brne	.+58     	; 0x26de <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    26a4:	2e 0f       	add	r18, r30
    26a6:	3f 1f       	adc	r19, r31
    26a8:	13 c0       	rjmp	.+38     	; 0x26d0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    26aa:	2e 0f       	add	r18, r30
    26ac:	3f 1f       	adc	r19, r31
    26ae:	e2 17       	cp	r30, r18
    26b0:	f3 07       	cpc	r31, r19
    26b2:	a9 f0       	breq	.+42     	; 0x26de <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    26b4:	80 81       	ld	r24, Z
    26b6:	84 2b       	or	r24, r20
    26b8:	81 93       	st	Z+, r24
    26ba:	f9 cf       	rjmp	.-14     	; 0x26ae <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa6>
    26bc:	80 95       	com	r24
    26be:	2e 0f       	add	r18, r30
    26c0:	3f 1f       	adc	r19, r31
    26c2:	e2 17       	cp	r30, r18
    26c4:	f3 07       	cpc	r31, r19
    26c6:	59 f0       	breq	.+22     	; 0x26de <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    26c8:	90 81       	ld	r25, Z
    26ca:	98 23       	and	r25, r24
    26cc:	91 93       	st	Z+, r25
    26ce:	f9 cf       	rjmp	.-14     	; 0x26c2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xba>
    26d0:	e2 17       	cp	r30, r18
    26d2:	f3 07       	cpc	r31, r19
    26d4:	21 f0       	breq	.+8      	; 0x26de <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    26d6:	80 81       	ld	r24, Z
    26d8:	84 27       	eor	r24, r20
    26da:	81 93       	st	Z+, r24
    26dc:	f9 cf       	rjmp	.-14     	; 0x26d0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    26de:	df 91       	pop	r29
    26e0:	cf 91       	pop	r28
    26e2:	1f 91       	pop	r17
    26e4:	0f 91       	pop	r16
    26e6:	08 95       	ret

000026e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>:
    26e8:	ef 92       	push	r14
    26ea:	ff 92       	push	r15
    26ec:	0f 93       	push	r16
    26ee:	1f 93       	push	r17
    26f0:	cf 93       	push	r28
    26f2:	df 93       	push	r29
    26f4:	ec 01       	movw	r28, r24
    26f6:	77 fd       	sbrc	r23, 7
    26f8:	a5 c0       	rjmp	.+330    	; 0x2844 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    26fa:	ec 80       	ldd	r14, Y+4	; 0x04
    26fc:	fd 80       	ldd	r15, Y+5	; 0x05
    26fe:	6e 15       	cp	r22, r14
    2700:	7f 05       	cpc	r23, r15
    2702:	0c f0       	brlt	.+2      	; 0x2706 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1e>
    2704:	9f c0       	rjmp	.+318    	; 0x2844 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2706:	57 ff       	sbrs	r21, 7
    2708:	04 c0       	rjmp	.+8      	; 0x2712 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2a>
    270a:	24 0f       	add	r18, r20
    270c:	35 1f       	adc	r19, r21
    270e:	40 e0       	ldi	r20, 0x00	; 0
    2710:	50 e0       	ldi	r21, 0x00	; 0
    2712:	8e 81       	ldd	r24, Y+6	; 0x06
    2714:	9f 81       	ldd	r25, Y+7	; 0x07
    2716:	fa 01       	movw	r30, r20
    2718:	e2 0f       	add	r30, r18
    271a:	f3 1f       	adc	r31, r19
    271c:	8e 17       	cp	r24, r30
    271e:	9f 07       	cpc	r25, r31
    2720:	1c f4       	brge	.+6      	; 0x2728 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x40>
    2722:	9c 01       	movw	r18, r24
    2724:	24 1b       	sub	r18, r20
    2726:	35 0b       	sbc	r19, r21
    2728:	12 16       	cp	r1, r18
    272a:	13 06       	cpc	r1, r19
    272c:	0c f0       	brlt	.+2      	; 0x2730 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x48>
    272e:	8a c0       	rjmp	.+276    	; 0x2844 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2730:	92 2f       	mov	r25, r18
    2732:	84 2f       	mov	r24, r20
    2734:	86 95       	lsr	r24
    2736:	86 95       	lsr	r24
    2738:	86 95       	lsr	r24
    273a:	8e 9d       	mul	r24, r14
    273c:	d0 01       	movw	r26, r0
    273e:	8f 9d       	mul	r24, r15
    2740:	b0 0d       	add	r27, r0
    2742:	11 24       	eor	r1, r1
    2744:	6a 0f       	add	r22, r26
    2746:	7b 1f       	adc	r23, r27
    2748:	af 8d       	ldd	r26, Y+31	; 0x1f
    274a:	b8 a1       	ldd	r27, Y+32	; 0x20
    274c:	a6 0f       	add	r26, r22
    274e:	b7 1f       	adc	r27, r23
    2750:	47 70       	andi	r20, 0x07	; 7
    2752:	b1 f1       	breq	.+108    	; 0x27c0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    2754:	88 e0       	ldi	r24, 0x08	; 8
    2756:	84 1b       	sub	r24, r20
    2758:	48 2f       	mov	r20, r24
    275a:	68 2f       	mov	r22, r24
    275c:	70 e0       	ldi	r23, 0x00	; 0
    275e:	fb 01       	movw	r30, r22
    2760:	ec 57       	subi	r30, 0x7C	; 124
    2762:	f9 4f       	sbci	r31, 0xF9	; 249
    2764:	e4 91       	lpm	r30, Z
    2766:	28 17       	cp	r18, r24
    2768:	98 f4       	brcc	.+38     	; 0x2790 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa8>
    276a:	62 1b       	sub	r22, r18
    276c:	71 09       	sbc	r23, r1
    276e:	2f ef       	ldi	r18, 0xFF	; 255
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	02 c0       	rjmp	.+4      	; 0x2778 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x90>
    2774:	35 95       	asr	r19
    2776:	27 95       	ror	r18
    2778:	6a 95       	dec	r22
    277a:	e2 f7       	brpl	.-8      	; 0x2774 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x8c>
    277c:	e2 23       	and	r30, r18
    277e:	01 30       	cpi	r16, 0x01	; 1
    2780:	11 05       	cpc	r17, r1
    2782:	49 f0       	breq	.+18     	; 0x2796 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xae>
    2784:	78 f0       	brcs	.+30     	; 0x27a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    2786:	02 30       	cpi	r16, 0x02	; 2
    2788:	11 05       	cpc	r17, r1
    278a:	09 f0       	breq	.+2      	; 0x278e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa6>
    278c:	5b c0       	rjmp	.+182    	; 0x2844 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    278e:	0e c0       	rjmp	.+28     	; 0x27ac <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    2790:	01 30       	cpi	r16, 0x01	; 1
    2792:	11 05       	cpc	r17, r1
    2794:	19 f4       	brne	.+6      	; 0x279c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xb4>
    2796:	8c 91       	ld	r24, X
    2798:	e8 2b       	or	r30, r24
    279a:	0a c0       	rjmp	.+20     	; 0x27b0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    279c:	01 30       	cpi	r16, 0x01	; 1
    279e:	11 05       	cpc	r17, r1
    27a0:	08 f0       	brcs	.+2      	; 0x27a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    27a2:	49 c0       	rjmp	.+146    	; 0x2836 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14e>
    27a4:	e0 95       	com	r30
    27a6:	8c 91       	ld	r24, X
    27a8:	e8 23       	and	r30, r24
    27aa:	02 c0       	rjmp	.+4      	; 0x27b0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    27ac:	8c 91       	ld	r24, X
    27ae:	e8 27       	eor	r30, r24
    27b0:	ec 93       	st	X, r30
    27b2:	94 17       	cp	r25, r20
    27b4:	08 f4       	brcc	.+2      	; 0x27b8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd0>
    27b6:	46 c0       	rjmp	.+140    	; 0x2844 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    27b8:	2c 81       	ldd	r18, Y+4	; 0x04
    27ba:	3d 81       	ldd	r19, Y+5	; 0x05
    27bc:	a2 0f       	add	r26, r18
    27be:	b3 1f       	adc	r27, r19
    27c0:	e9 2f       	mov	r30, r25
    27c2:	e4 1b       	sub	r30, r20
    27c4:	e8 30       	cpi	r30, 0x08	; 8
    27c6:	f8 f0       	brcs	.+62     	; 0x2806 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11e>
    27c8:	02 30       	cpi	r16, 0x02	; 2
    27ca:	11 05       	cpc	r17, r1
    27cc:	61 f4       	brne	.+24     	; 0x27e6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xfe>
    27ce:	8e 2f       	mov	r24, r30
    27d0:	9c 91       	ld	r25, X
    27d2:	90 95       	com	r25
    27d4:	9c 93       	st	X, r25
    27d6:	2c 81       	ldd	r18, Y+4	; 0x04
    27d8:	3d 81       	ldd	r19, Y+5	; 0x05
    27da:	a2 0f       	add	r26, r18
    27dc:	b3 1f       	adc	r27, r19
    27de:	88 50       	subi	r24, 0x08	; 8
    27e0:	88 30       	cpi	r24, 0x08	; 8
    27e2:	b0 f7       	brcc	.-20     	; 0x27d0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xe8>
    27e4:	0f c0       	rjmp	.+30     	; 0x2804 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11c>
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	01 15       	cp	r16, r1
    27ea:	11 05       	cpc	r17, r1
    27ec:	09 f4       	brne	.+2      	; 0x27f0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x108>
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	81 95       	neg	r24
    27f2:	9e 2f       	mov	r25, r30
    27f4:	8c 93       	st	X, r24
    27f6:	2c 81       	ldd	r18, Y+4	; 0x04
    27f8:	3d 81       	ldd	r19, Y+5	; 0x05
    27fa:	a2 0f       	add	r26, r18
    27fc:	b3 1f       	adc	r27, r19
    27fe:	98 50       	subi	r25, 0x08	; 8
    2800:	98 30       	cpi	r25, 0x08	; 8
    2802:	c0 f7       	brcc	.-16     	; 0x27f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x10c>
    2804:	e7 70       	andi	r30, 0x07	; 7
    2806:	ee 23       	and	r30, r30
    2808:	e9 f0       	breq	.+58     	; 0x2844 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	e4 58       	subi	r30, 0x84	; 132
    280e:	f9 4f       	sbci	r31, 0xF9	; 249
    2810:	e4 91       	lpm	r30, Z
    2812:	01 30       	cpi	r16, 0x01	; 1
    2814:	11 05       	cpc	r17, r1
    2816:	39 f0       	breq	.+14     	; 0x2826 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x13e>
    2818:	48 f0       	brcs	.+18     	; 0x282c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x144>
    281a:	02 30       	cpi	r16, 0x02	; 2
    281c:	11 05       	cpc	r17, r1
    281e:	91 f4       	brne	.+36     	; 0x2844 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2820:	8c 91       	ld	r24, X
    2822:	e8 27       	eor	r30, r24
    2824:	06 c0       	rjmp	.+12     	; 0x2832 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    2826:	8c 91       	ld	r24, X
    2828:	e8 2b       	or	r30, r24
    282a:	03 c0       	rjmp	.+6      	; 0x2832 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    282c:	e0 95       	com	r30
    282e:	8c 91       	ld	r24, X
    2830:	e8 23       	and	r30, r24
    2832:	ec 93       	st	X, r30
    2834:	07 c0       	rjmp	.+14     	; 0x2844 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    2836:	02 30       	cpi	r16, 0x02	; 2
    2838:	11 05       	cpc	r17, r1
    283a:	09 f4       	brne	.+2      	; 0x283e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x156>
    283c:	b7 cf       	rjmp	.-146    	; 0x27ac <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    283e:	ae 0d       	add	r26, r14
    2840:	bf 1d       	adc	r27, r15
    2842:	be cf       	rjmp	.-132    	; 0x27c0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    2844:	df 91       	pop	r29
    2846:	cf 91       	pop	r28
    2848:	1f 91       	pop	r17
    284a:	0f 91       	pop	r16
    284c:	ff 90       	pop	r15
    284e:	ef 90       	pop	r14
    2850:	08 95       	ret

00002852 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>:
    2852:	0f 93       	push	r16
    2854:	1f 93       	push	r17
    2856:	dc 01       	movw	r26, r24
    2858:	56 96       	adiw	r26, 0x16	; 22
    285a:	ec 91       	ld	r30, X
    285c:	56 97       	sbiw	r26, 0x16	; 22
    285e:	e2 30       	cpi	r30, 0x02	; 2
    2860:	61 f0       	breq	.+24     	; 0x287a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x28>
    2862:	e3 30       	cpi	r30, 0x03	; 3
    2864:	09 f1       	breq	.+66     	; 0x28a8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x56>
    2866:	e1 30       	cpi	r30, 0x01	; 1
    2868:	79 f5       	brne	.+94     	; 0x28c8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x76>
    286a:	14 96       	adiw	r26, 0x04	; 4
    286c:	ed 91       	ld	r30, X+
    286e:	fc 91       	ld	r31, X
    2870:	15 97       	sbiw	r26, 0x05	; 5
    2872:	e4 1b       	sub	r30, r20
    2874:	f5 0b       	sbc	r31, r21
    2876:	31 97       	sbiw	r30, 0x01	; 1
    2878:	23 c0       	rjmp	.+70     	; 0x28c0 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x6e>
    287a:	dc 01       	movw	r26, r24
    287c:	14 96       	adiw	r26, 0x04	; 4
    287e:	ed 91       	ld	r30, X+
    2880:	fc 91       	ld	r31, X
    2882:	15 97       	sbiw	r26, 0x05	; 5
    2884:	df 01       	movw	r26, r30
    2886:	a6 1b       	sub	r26, r22
    2888:	b7 0b       	sbc	r27, r23
    288a:	bd 01       	movw	r22, r26
    288c:	dc 01       	movw	r26, r24
    288e:	16 96       	adiw	r26, 0x06	; 6
    2890:	ed 91       	ld	r30, X+
    2892:	fc 91       	ld	r31, X
    2894:	17 97       	sbiw	r26, 0x07	; 7
    2896:	df 01       	movw	r26, r30
    2898:	a4 1b       	sub	r26, r20
    289a:	b5 0b       	sbc	r27, r21
    289c:	ad 01       	movw	r20, r26
    289e:	41 50       	subi	r20, 0x01	; 1
    28a0:	51 09       	sbc	r21, r1
    28a2:	62 1b       	sub	r22, r18
    28a4:	73 0b       	sbc	r23, r19
    28a6:	10 c0       	rjmp	.+32     	; 0x28c8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x76>
    28a8:	fa 01       	movw	r30, r20
    28aa:	dc 01       	movw	r26, r24
    28ac:	16 96       	adiw	r26, 0x06	; 6
    28ae:	4d 91       	ld	r20, X+
    28b0:	5c 91       	ld	r21, X
    28b2:	17 97       	sbiw	r26, 0x07	; 7
    28b4:	da 01       	movw	r26, r20
    28b6:	a6 1b       	sub	r26, r22
    28b8:	b7 0b       	sbc	r27, r23
    28ba:	bd 01       	movw	r22, r26
    28bc:	62 1b       	sub	r22, r18
    28be:	73 0b       	sbc	r23, r19
    28c0:	ab 01       	movw	r20, r22
    28c2:	bf 01       	movw	r22, r30
    28c4:	11 df       	rcall	.-478    	; 0x26e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    28c6:	01 c0       	rjmp	.+2      	; 0x28ca <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x78>
    28c8:	9f de       	rcall	.-706    	; 0x2608 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    28ca:	1f 91       	pop	r17
    28cc:	0f 91       	pop	r16
    28ce:	08 95       	ret

000028d0 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>:
    28d0:	0f 93       	push	r16
    28d2:	1f 93       	push	r17
    28d4:	dc 01       	movw	r26, r24
    28d6:	56 96       	adiw	r26, 0x16	; 22
    28d8:	ec 91       	ld	r30, X
    28da:	56 97       	sbiw	r26, 0x16	; 22
    28dc:	e2 30       	cpi	r30, 0x02	; 2
    28de:	69 f0       	breq	.+26     	; 0x28fa <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2a>
    28e0:	e3 30       	cpi	r30, 0x03	; 3
    28e2:	11 f1       	breq	.+68     	; 0x2928 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x58>
    28e4:	e1 30       	cpi	r30, 0x01	; 1
    28e6:	81 f5       	brne	.+96     	; 0x2948 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x78>
    28e8:	14 96       	adiw	r26, 0x04	; 4
    28ea:	ed 91       	ld	r30, X+
    28ec:	fc 91       	ld	r31, X
    28ee:	15 97       	sbiw	r26, 0x05	; 5
    28f0:	e4 1b       	sub	r30, r20
    28f2:	f5 0b       	sbc	r31, r21
    28f4:	e2 1b       	sub	r30, r18
    28f6:	f3 0b       	sbc	r31, r19
    28f8:	23 c0       	rjmp	.+70     	; 0x2940 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x70>
    28fa:	dc 01       	movw	r26, r24
    28fc:	14 96       	adiw	r26, 0x04	; 4
    28fe:	ed 91       	ld	r30, X+
    2900:	fc 91       	ld	r31, X
    2902:	15 97       	sbiw	r26, 0x05	; 5
    2904:	df 01       	movw	r26, r30
    2906:	a6 1b       	sub	r26, r22
    2908:	b7 0b       	sbc	r27, r23
    290a:	bd 01       	movw	r22, r26
    290c:	61 50       	subi	r22, 0x01	; 1
    290e:	71 09       	sbc	r23, r1
    2910:	dc 01       	movw	r26, r24
    2912:	16 96       	adiw	r26, 0x06	; 6
    2914:	ed 91       	ld	r30, X+
    2916:	fc 91       	ld	r31, X
    2918:	17 97       	sbiw	r26, 0x07	; 7
    291a:	df 01       	movw	r26, r30
    291c:	a4 1b       	sub	r26, r20
    291e:	b5 0b       	sbc	r27, r21
    2920:	ad 01       	movw	r20, r26
    2922:	42 1b       	sub	r20, r18
    2924:	53 0b       	sbc	r21, r19
    2926:	10 c0       	rjmp	.+32     	; 0x2948 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x78>
    2928:	fa 01       	movw	r30, r20
    292a:	dc 01       	movw	r26, r24
    292c:	16 96       	adiw	r26, 0x06	; 6
    292e:	4d 91       	ld	r20, X+
    2930:	5c 91       	ld	r21, X
    2932:	17 97       	sbiw	r26, 0x07	; 7
    2934:	da 01       	movw	r26, r20
    2936:	a6 1b       	sub	r26, r22
    2938:	b7 0b       	sbc	r27, r23
    293a:	bd 01       	movw	r22, r26
    293c:	61 50       	subi	r22, 0x01	; 1
    293e:	71 09       	sbc	r23, r1
    2940:	ab 01       	movw	r20, r22
    2942:	bf 01       	movw	r22, r30
    2944:	61 de       	rcall	.-830    	; 0x2608 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    2946:	01 c0       	rjmp	.+2      	; 0x294a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7a>
    2948:	cf de       	rcall	.-610    	; 0x26e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    294a:	1f 91       	pop	r17
    294c:	0f 91       	pop	r16
    294e:	08 95       	ret

00002950 <_ZN16Adafruit_SSD13067displayEv>:
    @return None (void).
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
    2950:	cf 92       	push	r12
    2952:	df 92       	push	r13
    2954:	ef 92       	push	r14
    2956:	ff 92       	push	r15
    2958:	0f 93       	push	r16
    295a:	1f 93       	push	r17
    295c:	cf 93       	push	r28
    295e:	df 93       	push	r29
    2960:	ec 01       	movw	r28, r24
  TRANSACTION_START
    2962:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2964:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2966:	00 97       	sbiw	r24, 0x00	; 0
    2968:	39 f0       	breq	.+14     	; 0x2978 <_ZN16Adafruit_SSD13067displayEv+0x28>
    296a:	4d a9       	ldd	r20, Y+53	; 0x35
    296c:	5e a9       	ldd	r21, Y+54	; 0x36
    296e:	6f a9       	ldd	r22, Y+55	; 0x37
    2970:	78 ad       	ldd	r23, Y+56	; 0x38
    2972:	0e 94 25 25 	call	0x4a4a	; 0x4a4a <_ZN7TwoWire8setClockEm>
    2976:	0f c0       	rjmp	.+30     	; 0x2996 <_ZN16Adafruit_SSD13067displayEv+0x46>
    2978:	8b 8d       	ldd	r24, Y+27	; 0x1b
    297a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    297c:	89 2b       	or	r24, r25
    297e:	21 f0       	breq	.+8      	; 0x2988 <_ZN16Adafruit_SSD13067displayEv+0x38>
    2980:	8e ad       	ldd	r24, Y+62	; 0x3e
    2982:	9f ad       	ldd	r25, Y+63	; 0x3f
    2984:	0e 94 1e 08 	call	0x103c	; 0x103c <_ZN8SPIClass16beginTransactionE11SPISettings>
    2988:	ef a5       	ldd	r30, Y+47	; 0x2f
    298a:	f8 a9       	ldd	r31, Y+48	; 0x30
    298c:	90 81       	ld	r25, Z
    298e:	8c a9       	ldd	r24, Y+52	; 0x34
    2990:	80 95       	com	r24
    2992:	89 23       	and	r24, r25
    2994:	80 83       	st	Z, r24
  static const uint8_t PROGMEM dlist1[] = {
      SSD1306_PAGEADDR,
      0,                      // Page start address
      0xFF,                   // Page end (not really, but works here)
      SSD1306_COLUMNADDR, 0}; // Column start address
  ssd1306_commandList(dlist1, sizeof(dlist1));
    2996:	45 e0       	ldi	r20, 0x05	; 5
    2998:	67 e7       	ldi	r22, 0x77	; 119
    299a:	76 e0       	ldi	r23, 0x06	; 6
    299c:	ce 01       	movw	r24, r28
    299e:	ac db       	rcall	.-2216   	; 0x20f8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
    29a0:	6c 81       	ldd	r22, Y+4	; 0x04
    29a2:	61 50       	subi	r22, 0x01	; 1
    29a4:	ce 01       	movw	r24, r28
    29a6:	02 db       	rcall	.-2556   	; 0x1fac <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
    29a8:	2e 81       	ldd	r18, Y+6	; 0x06
    29aa:	3f 81       	ldd	r19, Y+7	; 0x07
    29ac:	c9 01       	movw	r24, r18
    29ae:	07 96       	adiw	r24, 0x07	; 7
    29b0:	97 fd       	sbrc	r25, 7
    29b2:	07 96       	adiw	r24, 0x07	; 7
    29b4:	23 e0       	ldi	r18, 0x03	; 3
    29b6:	95 95       	asr	r25
    29b8:	87 95       	ror	r24
    29ba:	2a 95       	dec	r18
    29bc:	e1 f7       	brne	.-8      	; 0x29b6 <_ZN16Adafruit_SSD13067displayEv+0x66>
    29be:	2c 81       	ldd	r18, Y+4	; 0x04
    29c0:	3d 81       	ldd	r19, Y+5	; 0x05
    29c2:	82 9f       	mul	r24, r18
    29c4:	70 01       	movw	r14, r0
    29c6:	83 9f       	mul	r24, r19
    29c8:	f0 0c       	add	r15, r0
    29ca:	92 9f       	mul	r25, r18
    29cc:	f0 0c       	add	r15, r0
    29ce:	11 24       	eor	r1, r1
  uint8_t *ptr = buffer;
    29d0:	0f 8d       	ldd	r16, Y+31	; 0x1f
    29d2:	18 a1       	ldd	r17, Y+32	; 0x20
  if (wire) { // I2C
    29d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29d8:	e0 0e       	add	r14, r16
    29da:	f1 1e       	adc	r15, r17
    29dc:	00 97       	sbiw	r24, 0x00	; 0
    29de:	09 f4       	brne	.+2      	; 0x29e2 <_ZN16Adafruit_SSD13067displayEv+0x92>
    29e0:	43 c0       	rjmp	.+134    	; 0x2a68 <_ZN16Adafruit_SSD13067displayEv+0x118>
    wire->beginTransmission(i2caddr);
    29e2:	69 a1       	ldd	r22, Y+33	; 0x21
    29e4:	06 2e       	mov	r0, r22
    29e6:	00 0c       	add	r0, r0
    29e8:	77 0b       	sbc	r23, r23
    29ea:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
    29ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29f2:	dc 01       	movw	r26, r24
    29f4:	ed 91       	ld	r30, X+
    29f6:	fc 91       	ld	r31, X
    29f8:	01 90       	ld	r0, Z+
    29fa:	f0 81       	ld	r31, Z
    29fc:	e0 2d       	mov	r30, r0
    29fe:	60 e4       	ldi	r22, 0x40	; 64
    2a00:	19 95       	eicall
    2a02:	68 01       	movw	r12, r16
    uint16_t bytesOut = 1;
    2a04:	01 e0       	ldi	r16, 0x01	; 1
    2a06:	10 e0       	ldi	r17, 0x00	; 0
    2a08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    while (count--) {
    2a0c:	ec 14       	cp	r14, r12
    2a0e:	fd 04       	cpc	r15, r13
    2a10:	41 f1       	breq	.+80     	; 0x2a62 <_ZN16Adafruit_SSD13067displayEv+0x112>
      if (bytesOut >= WIRE_MAX) {
    2a12:	00 32       	cpi	r16, 0x20	; 32
    2a14:	11 05       	cpc	r17, r1
    2a16:	b0 f0       	brcs	.+44     	; 0x2a44 <_ZN16Adafruit_SSD13067displayEv+0xf4>
        wire->endTransmission();
    2a18:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
    2a1c:	69 a1       	ldd	r22, Y+33	; 0x21
    2a1e:	06 2e       	mov	r0, r22
    2a20:	00 0c       	add	r0, r0
    2a22:	77 0b       	sbc	r23, r23
    2a24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a26:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a28:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
    2a2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a30:	dc 01       	movw	r26, r24
    2a32:	ed 91       	ld	r30, X+
    2a34:	fc 91       	ld	r31, X
    2a36:	01 90       	ld	r0, Z+
    2a38:	f0 81       	ld	r31, Z
    2a3a:	e0 2d       	mov	r30, r0
    2a3c:	60 e4       	ldi	r22, 0x40	; 64
    2a3e:	19 95       	eicall
        bytesOut = 1;
    2a40:	01 e0       	ldi	r16, 0x01	; 1
    2a42:	10 e0       	ldi	r17, 0x00	; 0
      }
      WIRE_WRITE(*ptr++);
    2a44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a46:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a48:	f6 01       	movw	r30, r12
    2a4a:	61 91       	ld	r22, Z+
    2a4c:	6f 01       	movw	r12, r30
    2a4e:	dc 01       	movw	r26, r24
    2a50:	ed 91       	ld	r30, X+
    2a52:	fc 91       	ld	r31, X
    2a54:	01 90       	ld	r0, Z+
    2a56:	f0 81       	ld	r31, Z
    2a58:	e0 2d       	mov	r30, r0
    2a5a:	19 95       	eicall
      bytesOut++;
    2a5c:	0f 5f       	subi	r16, 0xFF	; 255
    2a5e:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t *ptr = buffer;
  if (wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x40);
    uint16_t bytesOut = 1;
    while (count--) {
    2a60:	d3 cf       	rjmp	.-90     	; 0x2a08 <_ZN16Adafruit_SSD13067displayEv+0xb8>
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
    2a62:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <_ZN7TwoWire15endTransmissionEv>
    2a66:	34 c0       	rjmp	.+104    	; 0x2ad0 <_ZN16Adafruit_SSD13067displayEv+0x180>
  } else { // SPI
    SSD1306_MODE_DATA
    2a68:	ed a5       	ldd	r30, Y+45	; 0x2d
    2a6a:	fe a5       	ldd	r31, Y+46	; 0x2e
    2a6c:	90 81       	ld	r25, Z
    2a6e:	8b a9       	ldd	r24, Y+51	; 0x33
    2a70:	89 2b       	or	r24, r25
    2a72:	80 83       	st	Z, r24
    while (count--)
    2a74:	0e 15       	cp	r16, r14
    2a76:	1f 05       	cpc	r17, r15
    2a78:	59 f1       	breq	.+86     	; 0x2ad0 <_ZN16Adafruit_SSD13067displayEv+0x180>
      SPIwrite(*ptr++);
    2a7a:	f8 01       	movw	r30, r16
    2a7c:	81 91       	ld	r24, Z+
    2a7e:	8f 01       	movw	r16, r30
// LOW-LEVEL UTILS ---------------------------------------------------------

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    2a80:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2a82:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2a84:	23 2b       	or	r18, r19
    (void)spi->transfer(d);
    2a86:	11 f0       	breq	.+4      	; 0x2a8c <_ZN16Adafruit_SSD13067displayEv+0x13c>
    2a88:	34 da       	rcall	.-2968   	; 0x1ef2 <_ZN8SPIClass8transferEh>
    2a8a:	f4 cf       	rjmp	.-24     	; 0x2a74 <_ZN16Adafruit_SSD13067displayEv+0x124>
// LOW-LEVEL UTILS ---------------------------------------------------------

// Issue single byte out SPI, either soft or hardware as appropriate.
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    2a8c:	28 e0       	ldi	r18, 0x08	; 8
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	40 e8       	ldi	r20, 0x80	; 128
    2a92:	e9 a5       	ldd	r30, Y+41	; 0x29
    2a94:	fa a5       	ldd	r31, Y+42	; 0x2a
    2a96:	99 a9       	ldd	r25, Y+49	; 0x31
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
#ifdef HAVE_PORTREG
      if (d & bit)
    2a98:	58 2f       	mov	r21, r24
    2a9a:	54 23       	and	r21, r20
    2a9c:	19 f0       	breq	.+6      	; 0x2aa4 <_ZN16Adafruit_SSD13067displayEv+0x154>
        *mosiPort |= mosiPinMask;
    2a9e:	50 81       	ld	r21, Z
    2aa0:	95 2b       	or	r25, r21
    2aa2:	03 c0       	rjmp	.+6      	; 0x2aaa <_ZN16Adafruit_SSD13067displayEv+0x15a>
      else
        *mosiPort &= ~mosiPinMask;
    2aa4:	50 81       	ld	r21, Z
    2aa6:	90 95       	com	r25
    2aa8:	95 23       	and	r25, r21
    2aaa:	90 83       	st	Z, r25
      *clkPort |= clkPinMask;  // Clock high
    2aac:	eb a5       	ldd	r30, Y+43	; 0x2b
    2aae:	fc a5       	ldd	r31, Y+44	; 0x2c
    2ab0:	50 81       	ld	r21, Z
    2ab2:	9a a9       	ldd	r25, Y+50	; 0x32
    2ab4:	95 2b       	or	r25, r21
    2ab6:	90 83       	st	Z, r25
      *clkPort &= ~clkPinMask; // Clock low
    2ab8:	eb a5       	ldd	r30, Y+43	; 0x2b
    2aba:	fc a5       	ldd	r31, Y+44	; 0x2c
    2abc:	50 81       	ld	r21, Z
    2abe:	9a a9       	ldd	r25, Y+50	; 0x32
    2ac0:	90 95       	com	r25
    2ac2:	95 23       	and	r25, r21
    2ac4:	90 83       	st	Z, r25
// SPI transaction/selection must be performed in calling function.
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    2ac6:	46 95       	lsr	r20
    2ac8:	21 50       	subi	r18, 0x01	; 1
    2aca:	31 09       	sbc	r19, r1
    2acc:	11 f7       	brne	.-60     	; 0x2a92 <_ZN16Adafruit_SSD13067displayEv+0x142>
    2ace:	d2 cf       	rjmp	.-92     	; 0x2a74 <_ZN16Adafruit_SSD13067displayEv+0x124>
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    2ad0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ad2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ad4:	00 97       	sbiw	r24, 0x00	; 0
    2ad6:	71 f0       	breq	.+28     	; 0x2af4 <_ZN16Adafruit_SSD13067displayEv+0x1a4>
    2ad8:	49 ad       	ldd	r20, Y+57	; 0x39
    2ada:	5a ad       	ldd	r21, Y+58	; 0x3a
    2adc:	6b ad       	ldd	r22, Y+59	; 0x3b
    2ade:	7c ad       	ldd	r23, Y+60	; 0x3c
#if defined(ESP8266)
  yield();
#endif
}
    2ae0:	df 91       	pop	r29
    2ae2:	cf 91       	pop	r28
    2ae4:	1f 91       	pop	r17
    2ae6:	0f 91       	pop	r16
    2ae8:	ff 90       	pop	r15
    2aea:	ef 90       	pop	r14
    2aec:	df 90       	pop	r13
    2aee:	cf 90       	pop	r12
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    2af0:	0c 94 25 25 	jmp	0x4a4a	; 0x4a4a <_ZN7TwoWire8setClockEm>
    2af4:	ef a5       	ldd	r30, Y+47	; 0x2f
    2af6:	f8 a9       	ldd	r31, Y+48	; 0x30
    2af8:	90 81       	ld	r25, Z
    2afa:	8c a9       	ldd	r24, Y+52	; 0x34
    2afc:	89 2b       	or	r24, r25
    2afe:	80 83       	st	Z, r24
    2b00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b04:	89 2b       	or	r24, r25
    2b06:	51 f0       	breq	.+20     	; 0x2b1c <_ZN16Adafruit_SSD13067displayEv+0x1cc>
#if defined(ESP8266)
  yield();
#endif
}
    2b08:	df 91       	pop	r29
    2b0a:	cf 91       	pop	r28
    2b0c:	1f 91       	pop	r17
    2b0e:	0f 91       	pop	r16
    2b10:	ff 90       	pop	r15
    2b12:	ef 90       	pop	r14
    2b14:	df 90       	pop	r13
    2b16:	cf 90       	pop	r12
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    2b18:	0c 94 38 08 	jmp	0x1070	; 0x1070 <_ZN8SPIClass14endTransactionEv>
#if defined(ESP8266)
  yield();
#endif
}
    2b1c:	df 91       	pop	r29
    2b1e:	cf 91       	pop	r28
    2b20:	1f 91       	pop	r17
    2b22:	0f 91       	pop	r16
    2b24:	ff 90       	pop	r15
    2b26:	ef 90       	pop	r14
    2b28:	df 90       	pop	r13
    2b2a:	cf 90       	pop	r12
    2b2c:	08 95       	ret

00002b2e <_ZN3DHTC1Ehhh>:
 *  @brief  Converts Fahrenheit to Celcius
 *  @param  f
 *					value in Fahrenheit
 *	@return float value in Celcius
 */
float DHT::convertFtoC(float f) { return (f - 32) * 0.55555; }
    2b2e:	dc 01       	movw	r26, r24
    2b30:	15 96       	adiw	r26, 0x05	; 5
    2b32:	6c 93       	st	X, r22
    2b34:	15 97       	sbiw	r26, 0x05	; 5
    2b36:	16 96       	adiw	r26, 0x06	; 6
    2b38:	4c 93       	st	X, r20
    2b3a:	16 97       	sbiw	r26, 0x06	; 6
    2b3c:	70 e0       	ldi	r23, 0x00	; 0
    2b3e:	fb 01       	movw	r30, r22
    2b40:	e0 57       	subi	r30, 0x70	; 112
    2b42:	f4 4f       	sbci	r31, 0xF4	; 244
    2b44:	e4 91       	lpm	r30, Z
    2b46:	17 96       	adiw	r26, 0x07	; 7
    2b48:	ec 93       	st	X, r30
    2b4a:	17 97       	sbiw	r26, 0x07	; 7
    2b4c:	fb 01       	movw	r30, r22
    2b4e:	ea 52       	subi	r30, 0x2A	; 42
    2b50:	f4 4f       	sbci	r31, 0xF4	; 244
    2b52:	64 91       	lpm	r22, Z
    2b54:	18 96       	adiw	r26, 0x08	; 8
    2b56:	6c 93       	st	X, r22
    2b58:	18 97       	sbiw	r26, 0x08	; 8
    2b5a:	40 e8       	ldi	r20, 0x80	; 128
    2b5c:	5e e3       	ldi	r21, 0x3E	; 62
    2b5e:	60 e0       	ldi	r22, 0x00	; 0
    2b60:	70 e0       	ldi	r23, 0x00	; 0
    2b62:	1d 96       	adiw	r26, 0x0d	; 13
    2b64:	4d 93       	st	X+, r20
    2b66:	5d 93       	st	X+, r21
    2b68:	6d 93       	st	X+, r22
    2b6a:	7c 93       	st	X, r23
    2b6c:	50 97       	sbiw	r26, 0x10	; 16
    2b6e:	08 95       	ret

00002b70 <_ZN3DHT5beginEh>:
    2b70:	1f 93       	push	r17
    2b72:	cf 93       	push	r28
    2b74:	df 93       	push	r29
    2b76:	ec 01       	movw	r28, r24
    2b78:	16 2f       	mov	r17, r22
    2b7a:	62 e0       	ldi	r22, 0x02	; 2
    2b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7e:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <pinMode>
    2b82:	0e 94 7a 2c 	call	0x58f4	; 0x58f4 <millis>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	80 5d       	subi	r24, 0xD0	; 208
    2b8c:	97 40       	sbci	r25, 0x07	; 7
    2b8e:	a1 09       	sbc	r26, r1
    2b90:	b1 09       	sbc	r27, r1
    2b92:	89 87       	std	Y+9, r24	; 0x09
    2b94:	9a 87       	std	Y+10, r25	; 0x0a
    2b96:	ab 87       	std	Y+11, r26	; 0x0b
    2b98:	bc 87       	std	Y+12, r27	; 0x0c
    2b9a:	1a 8b       	std	Y+18, r17	; 0x12
    2b9c:	df 91       	pop	r29
    2b9e:	cf 91       	pop	r28
    2ba0:	1f 91       	pop	r17
    2ba2:	08 95       	ret

00002ba4 <_ZN3DHT16computeHeatIndexEffb>:
 *  @param  isFahrenheit
 * 					true if fahrenheit, false if celcius
 *	@return float heat index
 */
float DHT::computeHeatIndex(float temperature, float percentHumidity,
                            bool isFahrenheit) {
    2ba4:	4f 92       	push	r4
    2ba6:	5f 92       	push	r5
    2ba8:	6f 92       	push	r6
    2baa:	7f 92       	push	r7
    2bac:	8f 92       	push	r8
    2bae:	9f 92       	push	r9
    2bb0:	af 92       	push	r10
    2bb2:	bf 92       	push	r11
    2bb4:	cf 92       	push	r12
    2bb6:	df 92       	push	r13
    2bb8:	ef 92       	push	r14
    2bba:	ff 92       	push	r15
    2bbc:	0f 93       	push	r16
    2bbe:	1f 93       	push	r17
    2bc0:	cf 93       	push	r28
    2bc2:	df 93       	push	r29
    2bc4:	cd b7       	in	r28, 0x3d	; 61
    2bc6:	de b7       	in	r29, 0x3e	; 62
    2bc8:	29 97       	sbiw	r28, 0x09	; 9
    2bca:	0f b6       	in	r0, 0x3f	; 63
    2bcc:	f8 94       	cli
    2bce:	de bf       	out	0x3e, r29	; 62
    2bd0:	0f be       	out	0x3f, r0	; 63
    2bd2:	cd bf       	out	0x3d, r28	; 61
    2bd4:	4a 01       	movw	r8, r20
    2bd6:	5b 01       	movw	r10, r22
    2bd8:	28 01       	movw	r4, r16
    2bda:	39 01       	movw	r6, r18
    2bdc:	e9 86       	std	Y+9, r14	; 0x09
  float hi;

  if (!isFahrenheit)
    2bde:	e1 10       	cpse	r14, r1
    2be0:	10 c0       	rjmp	.+32     	; 0x2c02 <_ZN3DHT16computeHeatIndexEffb+0x5e>
 *  @brief  Converts Celcius to Fahrenheit
 *  @param  c
 *					value in Celcius
 *	@return float value in Fahrenheit
 */
float DHT::convertCtoF(float c) { return c * 1.8 + 32; }
    2be2:	26 e6       	ldi	r18, 0x66	; 102
    2be4:	36 e6       	ldi	r19, 0x66	; 102
    2be6:	46 ee       	ldi	r20, 0xE6	; 230
    2be8:	5f e3       	ldi	r21, 0x3F	; 63
    2bea:	c5 01       	movw	r24, r10
    2bec:	b4 01       	movw	r22, r8
    2bee:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e0       	ldi	r20, 0x00	; 0
    2bf8:	52 e4       	ldi	r21, 0x42	; 66
    2bfa:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <__addsf3>
    2bfe:	4b 01       	movw	r8, r22
    2c00:	5c 01       	movw	r10, r24

  if (!isFahrenheit)
    temperature = convertCtoF(temperature);

  hi = 0.5 * (temperature + 61.0 + ((temperature - 68.0) * 1.2) +
              (percentHumidity * 0.094));
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	48 e8       	ldi	r20, 0x88	; 136
    2c08:	52 e4       	ldi	r21, 0x42	; 66
    2c0a:	c5 01       	movw	r24, r10
    2c0c:	b4 01       	movw	r22, r8
    2c0e:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <__subsf3>
    2c12:	2a e9       	ldi	r18, 0x9A	; 154
    2c14:	39 e9       	ldi	r19, 0x99	; 153
    2c16:	49 e9       	ldi	r20, 0x99	; 153
    2c18:	5f e3       	ldi	r21, 0x3F	; 63
    2c1a:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2c1e:	6b 01       	movw	r12, r22
    2c20:	7c 01       	movw	r14, r24
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	44 e7       	ldi	r20, 0x74	; 116
    2c28:	52 e4       	ldi	r21, 0x42	; 66
    2c2a:	c5 01       	movw	r24, r10
    2c2c:	b4 01       	movw	r22, r8
    2c2e:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <__addsf3>
    2c32:	9b 01       	movw	r18, r22
    2c34:	ac 01       	movw	r20, r24
    2c36:	c7 01       	movw	r24, r14
    2c38:	b6 01       	movw	r22, r12
    2c3a:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <__addsf3>
    2c3e:	6b 01       	movw	r12, r22
    2c40:	7c 01       	movw	r14, r24
    2c42:	22 e1       	ldi	r18, 0x12	; 18
    2c44:	33 e8       	ldi	r19, 0x83	; 131
    2c46:	40 ec       	ldi	r20, 0xC0	; 192
    2c48:	5d e3       	ldi	r21, 0x3D	; 61
    2c4a:	c3 01       	movw	r24, r6
    2c4c:	b2 01       	movw	r22, r4
    2c4e:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2c52:	9b 01       	movw	r18, r22
    2c54:	ac 01       	movw	r20, r24
    2c56:	c7 01       	movw	r24, r14
    2c58:	b6 01       	movw	r22, r12
    2c5a:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <__addsf3>
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	40 e0       	ldi	r20, 0x00	; 0
    2c64:	5f e3       	ldi	r21, 0x3F	; 63
    2c66:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2c6a:	c6 2e       	mov	r12, r22
    2c6c:	e7 2e       	mov	r14, r23
    2c6e:	d8 2e       	mov	r13, r24
    2c70:	f9 2e       	mov	r15, r25

  if (hi > 79) {
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	4e e9       	ldi	r20, 0x9E	; 158
    2c78:	52 e4       	ldi	r21, 0x42	; 66
    2c7a:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <__gesf2>
    2c7e:	18 16       	cp	r1, r24
    2c80:	0c f0       	brlt	.+2      	; 0x2c84 <_ZN3DHT16computeHeatIndexEffb+0xe0>
    2c82:	7d c1       	rjmp	.+762    	; 0x2f7e <_ZN3DHT16computeHeatIndexEffb+0x3da>
    hi = -42.379 + 2.04901523 * temperature + 10.14333127 * percentHumidity +
         -0.22475541 * temperature * percentHumidity +
         -0.00683783 * pow(temperature, 2) +
    2c84:	a5 01       	movw	r20, r10
    2c86:	94 01       	movw	r18, r8
    2c88:	c5 01       	movw	r24, r10
    2c8a:	b4 01       	movw	r22, r8
    2c8c:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2c90:	6b 01       	movw	r12, r22
    2c92:	7c 01       	movw	r14, r24
         -0.05481717 * pow(percentHumidity, 2) +
    2c94:	a3 01       	movw	r20, r6
    2c96:	92 01       	movw	r18, r4
    2c98:	c3 01       	movw	r24, r6
    2c9a:	b2 01       	movw	r22, r4
    2c9c:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2ca0:	6d 83       	std	Y+5, r22	; 0x05
    2ca2:	7e 83       	std	Y+6, r23	; 0x06
    2ca4:	8f 83       	std	Y+7, r24	; 0x07
    2ca6:	98 87       	std	Y+8, r25	; 0x08
         0.00122874 * pow(temperature, 2) * percentHumidity +
         0.00085282 * temperature * pow(percentHumidity, 2) +
         -0.00000199 * pow(temperature, 2) * pow(percentHumidity, 2);
    2ca8:	21 e1       	ldi	r18, 0x11	; 17
    2caa:	33 e2       	ldi	r19, 0x23	; 35
    2cac:	43 e0       	ldi	r20, 0x03	; 3
    2cae:	50 e4       	ldi	r21, 0x40	; 64
    2cb0:	c5 01       	movw	r24, r10
    2cb2:	b4 01       	movw	r22, r8
    2cb4:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2cb8:	29 e1       	ldi	r18, 0x19	; 25
    2cba:	34 e8       	ldi	r19, 0x84	; 132
    2cbc:	49 e2       	ldi	r20, 0x29	; 41
    2cbe:	52 e4       	ldi	r21, 0x42	; 66
    2cc0:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <__subsf3>
    2cc4:	69 83       	std	Y+1, r22	; 0x01
    2cc6:	7a 83       	std	Y+2, r23	; 0x02
    2cc8:	8b 83       	std	Y+3, r24	; 0x03
    2cca:	9c 83       	std	Y+4, r25	; 0x04
    2ccc:	26 e1       	ldi	r18, 0x16	; 22
    2cce:	3b e4       	ldi	r19, 0x4B	; 75
    2cd0:	42 e2       	ldi	r20, 0x22	; 34
    2cd2:	51 e4       	ldi	r21, 0x41	; 65
    2cd4:	c3 01       	movw	r24, r6
    2cd6:	b2 01       	movw	r22, r4
    2cd8:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2cdc:	9b 01       	movw	r18, r22
    2cde:	ac 01       	movw	r20, r24
    2ce0:	69 81       	ldd	r22, Y+1	; 0x01
    2ce2:	7a 81       	ldd	r23, Y+2	; 0x02
    2ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce8:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <__addsf3>
    2cec:	69 83       	std	Y+1, r22	; 0x01
    2cee:	7a 83       	std	Y+2, r23	; 0x02
    2cf0:	8b 83       	std	Y+3, r24	; 0x03
    2cf2:	9c 83       	std	Y+4, r25	; 0x04
    2cf4:	28 e4       	ldi	r18, 0x48	; 72
    2cf6:	36 e2       	ldi	r19, 0x26	; 38
    2cf8:	46 e6       	ldi	r20, 0x66	; 102
    2cfa:	5e eb       	ldi	r21, 0xBE	; 190
    2cfc:	c5 01       	movw	r24, r10
    2cfe:	b4 01       	movw	r22, r8
    2d00:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2d04:	a3 01       	movw	r20, r6
    2d06:	92 01       	movw	r18, r4
    2d08:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2d0c:	9b 01       	movw	r18, r22
    2d0e:	ac 01       	movw	r20, r24
    2d10:	69 81       	ldd	r22, Y+1	; 0x01
    2d12:	7a 81       	ldd	r23, Y+2	; 0x02
    2d14:	8b 81       	ldd	r24, Y+3	; 0x03
    2d16:	9c 81       	ldd	r25, Y+4	; 0x04
    2d18:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <__addsf3>
    2d1c:	69 83       	std	Y+1, r22	; 0x01
    2d1e:	7a 83       	std	Y+2, r23	; 0x02
    2d20:	8b 83       	std	Y+3, r24	; 0x03
    2d22:	9c 83       	std	Y+4, r25	; 0x04
    2d24:	20 ee       	ldi	r18, 0xE0	; 224
    2d26:	3f e0       	ldi	r19, 0x0F	; 15
    2d28:	40 ee       	ldi	r20, 0xE0	; 224
    2d2a:	5b eb       	ldi	r21, 0xBB	; 187
    2d2c:	c7 01       	movw	r24, r14
    2d2e:	b6 01       	movw	r22, r12
    2d30:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2d34:	9b 01       	movw	r18, r22
    2d36:	ac 01       	movw	r20, r24
    2d38:	69 81       	ldd	r22, Y+1	; 0x01
    2d3a:	7a 81       	ldd	r23, Y+2	; 0x02
    2d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d40:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <__addsf3>
    2d44:	69 83       	std	Y+1, r22	; 0x01
    2d46:	7a 83       	std	Y+2, r23	; 0x02
    2d48:	8b 83       	std	Y+3, r24	; 0x03
    2d4a:	9c 83       	std	Y+4, r25	; 0x04
    2d4c:	28 ef       	ldi	r18, 0xF8	; 248
    2d4e:	37 e8       	ldi	r19, 0x87	; 135
    2d50:	40 e6       	ldi	r20, 0x60	; 96
    2d52:	5d eb       	ldi	r21, 0xBD	; 189
    2d54:	6d 81       	ldd	r22, Y+5	; 0x05
    2d56:	7e 81       	ldd	r23, Y+6	; 0x06
    2d58:	8f 81       	ldd	r24, Y+7	; 0x07
    2d5a:	98 85       	ldd	r25, Y+8	; 0x08
    2d5c:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2d60:	9b 01       	movw	r18, r22
    2d62:	ac 01       	movw	r20, r24
    2d64:	69 81       	ldd	r22, Y+1	; 0x01
    2d66:	7a 81       	ldd	r23, Y+2	; 0x02
    2d68:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d6c:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <__addsf3>
    2d70:	69 83       	std	Y+1, r22	; 0x01
    2d72:	7a 83       	std	Y+2, r23	; 0x02
    2d74:	8b 83       	std	Y+3, r24	; 0x03
    2d76:	9c 83       	std	Y+4, r25	; 0x04
    2d78:	2c ea       	ldi	r18, 0xAC	; 172
    2d7a:	3d e0       	ldi	r19, 0x0D	; 13
    2d7c:	41 ea       	ldi	r20, 0xA1	; 161
    2d7e:	5a e3       	ldi	r21, 0x3A	; 58
    2d80:	c7 01       	movw	r24, r14
    2d82:	b6 01       	movw	r22, r12
    2d84:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2d88:	a3 01       	movw	r20, r6
    2d8a:	92 01       	movw	r18, r4
    2d8c:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2d90:	9b 01       	movw	r18, r22
    2d92:	ac 01       	movw	r20, r24
    2d94:	69 81       	ldd	r22, Y+1	; 0x01
    2d96:	7a 81       	ldd	r23, Y+2	; 0x02
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9c:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <__addsf3>
    2da0:	69 83       	std	Y+1, r22	; 0x01
    2da2:	7a 83       	std	Y+2, r23	; 0x02
    2da4:	8b 83       	std	Y+3, r24	; 0x03
    2da6:	9c 83       	std	Y+4, r25	; 0x04
    2da8:	28 ec       	ldi	r18, 0xC8	; 200
    2daa:	3f e8       	ldi	r19, 0x8F	; 143
    2dac:	4f e5       	ldi	r20, 0x5F	; 95
    2dae:	5a e3       	ldi	r21, 0x3A	; 58
    2db0:	c5 01       	movw	r24, r10
    2db2:	b4 01       	movw	r22, r8
    2db4:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2db8:	2d 81       	ldd	r18, Y+5	; 0x05
    2dba:	3e 81       	ldd	r19, Y+6	; 0x06
    2dbc:	4f 81       	ldd	r20, Y+7	; 0x07
    2dbe:	58 85       	ldd	r21, Y+8	; 0x08
    2dc0:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2dc4:	9b 01       	movw	r18, r22
    2dc6:	ac 01       	movw	r20, r24
    2dc8:	69 81       	ldd	r22, Y+1	; 0x01
    2dca:	7a 81       	ldd	r23, Y+2	; 0x02
    2dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dce:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd0:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <__addsf3>
    2dd4:	69 83       	std	Y+1, r22	; 0x01
    2dd6:	7a 83       	std	Y+2, r23	; 0x02
    2dd8:	8b 83       	std	Y+3, r24	; 0x03
    2dda:	9c 83       	std	Y+4, r25	; 0x04
    2ddc:	21 ef       	ldi	r18, 0xF1	; 241
    2dde:	3b e8       	ldi	r19, 0x8B	; 139
    2de0:	45 e0       	ldi	r20, 0x05	; 5
    2de2:	56 eb       	ldi	r21, 0xB6	; 182
    2de4:	c7 01       	movw	r24, r14
    2de6:	b6 01       	movw	r22, r12
    2de8:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2dec:	2d 81       	ldd	r18, Y+5	; 0x05
    2dee:	3e 81       	ldd	r19, Y+6	; 0x06
    2df0:	4f 81       	ldd	r20, Y+7	; 0x07
    2df2:	58 85       	ldd	r21, Y+8	; 0x08
    2df4:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2df8:	9b 01       	movw	r18, r22
    2dfa:	ac 01       	movw	r20, r24
    2dfc:	69 81       	ldd	r22, Y+1	; 0x01
    2dfe:	7a 81       	ldd	r23, Y+2	; 0x02
    2e00:	8b 81       	ldd	r24, Y+3	; 0x03
    2e02:	9c 81       	ldd	r25, Y+4	; 0x04
    2e04:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <__addsf3>
    2e08:	c6 2e       	mov	r12, r22
    2e0a:	e7 2e       	mov	r14, r23
    2e0c:	d8 2e       	mov	r13, r24
    2e0e:	f9 2e       	mov	r15, r25

    if ((percentHumidity < 13) && (temperature >= 80.0) &&
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	40 e5       	ldi	r20, 0x50	; 80
    2e16:	51 e4       	ldi	r21, 0x41	; 65
    2e18:	c3 01       	movw	r24, r6
    2e1a:	b2 01       	movw	r22, r4
    2e1c:	0e 94 11 26 	call	0x4c22	; 0x4c22 <__cmpsf2>
    2e20:	87 ff       	sbrs	r24, 7
    2e22:	5e c0       	rjmp	.+188    	; 0x2ee0 <_ZN3DHT16computeHeatIndexEffb+0x33c>
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	40 ea       	ldi	r20, 0xA0	; 160
    2e2a:	52 e4       	ldi	r21, 0x42	; 66
    2e2c:	c5 01       	movw	r24, r10
    2e2e:	b4 01       	movw	r22, r8
    2e30:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <__gesf2>
    2e34:	87 fd       	sbrc	r24, 7
    2e36:	54 c0       	rjmp	.+168    	; 0x2ee0 <_ZN3DHT16computeHeatIndexEffb+0x33c>
    2e38:	20 e0       	ldi	r18, 0x00	; 0
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	40 ee       	ldi	r20, 0xE0	; 224
    2e3e:	52 e4       	ldi	r21, 0x42	; 66
    2e40:	c5 01       	movw	r24, r10
    2e42:	b4 01       	movw	r22, r8
    2e44:	0e 94 11 26 	call	0x4c22	; 0x4c22 <__cmpsf2>
    2e48:	18 16       	cp	r1, r24
    2e4a:	0c f4       	brge	.+2      	; 0x2e4e <_ZN3DHT16computeHeatIndexEffb+0x2aa>
    2e4c:	b1 c0       	rjmp	.+354    	; 0x2fb0 <_ZN3DHT16computeHeatIndexEffb+0x40c>
        (temperature <= 112.0))
      hi -= ((13.0 - percentHumidity) * 0.25) *
    2e4e:	a3 01       	movw	r20, r6
    2e50:	92 01       	movw	r18, r4
    2e52:	60 e0       	ldi	r22, 0x00	; 0
    2e54:	70 e0       	ldi	r23, 0x00	; 0
    2e56:	80 e5       	ldi	r24, 0x50	; 80
    2e58:	91 e4       	ldi	r25, 0x41	; 65
    2e5a:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <__subsf3>
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	40 e8       	ldi	r20, 0x80	; 128
    2e64:	5e e3       	ldi	r21, 0x3E	; 62
    2e66:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2e6a:	2b 01       	movw	r4, r22
    2e6c:	3c 01       	movw	r6, r24
            sqrt((17.0 - abs(temperature - 95.0)) * 0.05882);
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	4e eb       	ldi	r20, 0xBE	; 190
    2e74:	52 e4       	ldi	r21, 0x42	; 66
    2e76:	c5 01       	movw	r24, r10
    2e78:	b4 01       	movw	r22, r8
    2e7a:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <__subsf3>
    2e7e:	4b 01       	movw	r8, r22
    2e80:	5c 01       	movw	r10, r24
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	a9 01       	movw	r20, r18
    2e88:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <__gesf2>
    2e8c:	18 16       	cp	r1, r24
    2e8e:	4c f4       	brge	.+18     	; 0x2ea2 <_ZN3DHT16computeHeatIndexEffb+0x2fe>
    2e90:	a5 01       	movw	r20, r10
    2e92:	94 01       	movw	r18, r8
    2e94:	60 e0       	ldi	r22, 0x00	; 0
    2e96:	70 e0       	ldi	r23, 0x00	; 0
    2e98:	88 e8       	ldi	r24, 0x88	; 136
    2e9a:	91 e4       	ldi	r25, 0x41	; 65
    2e9c:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <__subsf3>
    2ea0:	08 c0       	rjmp	.+16     	; 0x2eb2 <_ZN3DHT16computeHeatIndexEffb+0x30e>
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	48 e8       	ldi	r20, 0x88	; 136
    2ea8:	51 e4       	ldi	r21, 0x41	; 65
    2eaa:	c5 01       	movw	r24, r10
    2eac:	b4 01       	movw	r22, r8
    2eae:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <__addsf3>
    2eb2:	2e e3       	ldi	r18, 0x3E	; 62
    2eb4:	3d ee       	ldi	r19, 0xED	; 237
    2eb6:	40 e7       	ldi	r20, 0x70	; 112
    2eb8:	5d e3       	ldi	r21, 0x3D	; 61
    2eba:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2ebe:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <sqrt>
    2ec2:	9b 01       	movw	r18, r22
    2ec4:	ac 01       	movw	r20, r24
    2ec6:	c3 01       	movw	r24, r6
    2ec8:	b2 01       	movw	r22, r4
    2eca:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2ece:	9b 01       	movw	r18, r22
    2ed0:	ac 01       	movw	r20, r24
    2ed2:	6c 2d       	mov	r22, r12
    2ed4:	7e 2d       	mov	r23, r14
    2ed6:	8d 2d       	mov	r24, r13
    2ed8:	9f 2d       	mov	r25, r15
    2eda:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <__subsf3>
    2ede:	4b c0       	rjmp	.+150    	; 0x2f76 <_ZN3DHT16computeHeatIndexEffb+0x3d2>

    else if ((percentHumidity > 85.0) && (temperature >= 80.0) &&
    2ee0:	20 e0       	ldi	r18, 0x00	; 0
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	4a ea       	ldi	r20, 0xAA	; 170
    2ee6:	52 e4       	ldi	r21, 0x42	; 66
    2ee8:	c3 01       	movw	r24, r6
    2eea:	b2 01       	movw	r22, r4
    2eec:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <__gesf2>
    2ef0:	18 16       	cp	r1, r24
    2ef2:	0c f0       	brlt	.+2      	; 0x2ef6 <_ZN3DHT16computeHeatIndexEffb+0x352>
    2ef4:	44 c0       	rjmp	.+136    	; 0x2f7e <_ZN3DHT16computeHeatIndexEffb+0x3da>
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	40 ea       	ldi	r20, 0xA0	; 160
    2efc:	52 e4       	ldi	r21, 0x42	; 66
    2efe:	c5 01       	movw	r24, r10
    2f00:	b4 01       	movw	r22, r8
    2f02:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <__gesf2>
    2f06:	87 fd       	sbrc	r24, 7
    2f08:	3a c0       	rjmp	.+116    	; 0x2f7e <_ZN3DHT16computeHeatIndexEffb+0x3da>
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	4e ea       	ldi	r20, 0xAE	; 174
    2f10:	52 e4       	ldi	r21, 0x42	; 66
    2f12:	c5 01       	movw	r24, r10
    2f14:	b4 01       	movw	r22, r8
    2f16:	0e 94 11 26 	call	0x4c22	; 0x4c22 <__cmpsf2>
    2f1a:	18 16       	cp	r1, r24
    2f1c:	84 f1       	brlt	.+96     	; 0x2f7e <_ZN3DHT16computeHeatIndexEffb+0x3da>
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	4a ea       	ldi	r20, 0xAA	; 170
    2f24:	52 e4       	ldi	r21, 0x42	; 66
    2f26:	c3 01       	movw	r24, r6
    2f28:	b2 01       	movw	r22, r4
    2f2a:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <__subsf3>
    2f2e:	2d ec       	ldi	r18, 0xCD	; 205
    2f30:	3c ec       	ldi	r19, 0xCC	; 204
    2f32:	4c ec       	ldi	r20, 0xCC	; 204
    2f34:	5d e3       	ldi	r21, 0x3D	; 61
    2f36:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2f3a:	2b 01       	movw	r4, r22
    2f3c:	3c 01       	movw	r6, r24
    2f3e:	a5 01       	movw	r20, r10
    2f40:	94 01       	movw	r18, r8
    2f42:	60 e0       	ldi	r22, 0x00	; 0
    2f44:	70 e0       	ldi	r23, 0x00	; 0
    2f46:	8e ea       	ldi	r24, 0xAE	; 174
    2f48:	92 e4       	ldi	r25, 0x42	; 66
    2f4a:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <__subsf3>
    2f4e:	2d ec       	ldi	r18, 0xCD	; 205
    2f50:	3c ec       	ldi	r19, 0xCC	; 204
    2f52:	4c e4       	ldi	r20, 0x4C	; 76
    2f54:	5e e3       	ldi	r21, 0x3E	; 62
    2f56:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2f5a:	9b 01       	movw	r18, r22
    2f5c:	ac 01       	movw	r20, r24
    2f5e:	c3 01       	movw	r24, r6
    2f60:	b2 01       	movw	r22, r4
    2f62:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2f66:	9b 01       	movw	r18, r22
    2f68:	ac 01       	movw	r20, r24
    2f6a:	6c 2d       	mov	r22, r12
    2f6c:	7e 2d       	mov	r23, r14
    2f6e:	8d 2d       	mov	r24, r13
    2f70:	9f 2d       	mov	r25, r15
    2f72:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <__addsf3>
    2f76:	c6 2e       	mov	r12, r22
    2f78:	e7 2e       	mov	r14, r23
    2f7a:	d8 2e       	mov	r13, r24
    2f7c:	f9 2e       	mov	r15, r25
  }

  return isFahrenheit ? hi : convertFtoC(hi);
    2f7e:	89 85       	ldd	r24, Y+9	; 0x09
    2f80:	81 11       	cpse	r24, r1
    2f82:	11 c0       	rjmp	.+34     	; 0x2fa6 <_ZN3DHT16computeHeatIndexEffb+0x402>
 *  @brief  Converts Fahrenheit to Celcius
 *  @param  f
 *					value in Fahrenheit
 *	@return float value in Celcius
 */
float DHT::convertFtoC(float f) { return (f - 32) * 0.55555; }
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	40 e0       	ldi	r20, 0x00	; 0
    2f8a:	52 e4       	ldi	r21, 0x42	; 66
    2f8c:	6c 2d       	mov	r22, r12
    2f8e:	7e 2d       	mov	r23, r14
    2f90:	8d 2d       	mov	r24, r13
    2f92:	9f 2d       	mov	r25, r15
    2f94:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <__subsf3>
    2f98:	26 e8       	ldi	r18, 0x86	; 134
    2f9a:	38 e3       	ldi	r19, 0x38	; 56
    2f9c:	4e e0       	ldi	r20, 0x0E	; 14
    2f9e:	5f e3       	ldi	r21, 0x3F	; 63
    2fa0:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    2fa4:	11 c0       	rjmp	.+34     	; 0x2fc8 <_ZN3DHT16computeHeatIndexEffb+0x424>
    else if ((percentHumidity > 85.0) && (temperature >= 80.0) &&
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
    2fa6:	6c 2d       	mov	r22, r12
    2fa8:	7e 2d       	mov	r23, r14
    2faa:	8d 2d       	mov	r24, r13
    2fac:	9f 2d       	mov	r25, r15
    2fae:	0c c0       	rjmp	.+24     	; 0x2fc8 <_ZN3DHT16computeHeatIndexEffb+0x424>
    if ((percentHumidity < 13) && (temperature >= 80.0) &&
        (temperature <= 112.0))
      hi -= ((13.0 - percentHumidity) * 0.25) *
            sqrt((17.0 - abs(temperature - 95.0)) * 0.05882);

    else if ((percentHumidity > 85.0) && (temperature >= 80.0) &&
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	4a ea       	ldi	r20, 0xAA	; 170
    2fb6:	52 e4       	ldi	r21, 0x42	; 66
    2fb8:	c3 01       	movw	r24, r6
    2fba:	b2 01       	movw	r22, r4
    2fbc:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <__gesf2>
    2fc0:	18 16       	cp	r1, r24
    2fc2:	0c f4       	brge	.+2      	; 0x2fc6 <_ZN3DHT16computeHeatIndexEffb+0x422>
    2fc4:	a2 cf       	rjmp	.-188    	; 0x2f0a <_ZN3DHT16computeHeatIndexEffb+0x366>
    2fc6:	db cf       	rjmp	.-74     	; 0x2f7e <_ZN3DHT16computeHeatIndexEffb+0x3da>
             (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
    2fc8:	4b 01       	movw	r8, r22
    2fca:	5c 01       	movw	r10, r24
    2fcc:	c5 01       	movw	r24, r10
    2fce:	b4 01       	movw	r22, r8
    2fd0:	29 96       	adiw	r28, 0x09	; 9
    2fd2:	0f b6       	in	r0, 0x3f	; 63
    2fd4:	f8 94       	cli
    2fd6:	de bf       	out	0x3e, r29	; 62
    2fd8:	0f be       	out	0x3f, r0	; 63
    2fda:	cd bf       	out	0x3d, r28	; 61
    2fdc:	df 91       	pop	r29
    2fde:	cf 91       	pop	r28
    2fe0:	1f 91       	pop	r17
    2fe2:	0f 91       	pop	r16
    2fe4:	ff 90       	pop	r15
    2fe6:	ef 90       	pop	r14
    2fe8:	df 90       	pop	r13
    2fea:	cf 90       	pop	r12
    2fec:	bf 90       	pop	r11
    2fee:	af 90       	pop	r10
    2ff0:	9f 90       	pop	r9
    2ff2:	8f 90       	pop	r8
    2ff4:	7f 90       	pop	r7
    2ff6:	6f 90       	pop	r6
    2ff8:	5f 90       	pop	r5
    2ffa:	4f 90       	pop	r4
    2ffc:	08 95       	ret

00002ffe <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    2ffe:	cf 92       	push	r12
    3000:	df 92       	push	r13
    3002:	ef 92       	push	r14
    3004:	ff 92       	push	r15
    3006:	1f 93       	push	r17
    3008:	cf 93       	push	r28
    300a:	df 93       	push	r29
    300c:	ec 01       	movw	r28, r24
    300e:	1f 81       	ldd	r17, Y+7	; 0x07
  uint16_t count = 0; // To work fast enough on slower AVR boards
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
    3010:	66 23       	and	r22, r22
    3012:	11 f0       	breq	.+4      	; 0x3018 <_ZN3DHT11expectPulseEb+0x1a>
    3014:	91 2f       	mov	r25, r17
    3016:	01 c0       	rjmp	.+2      	; 0x301a <_ZN3DHT11expectPulseEb+0x1c>
    3018:	90 e0       	ldi	r25, 0x00	; 0
  while ((*portInputRegister(_port) & _bit) == portState) {
    301a:	28 85       	ldd	r18, Y+8	; 0x08
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	22 0f       	add	r18, r18
    3020:	33 1f       	adc	r19, r19
    3022:	24 5e       	subi	r18, 0xE4	; 228
    3024:	33 4f       	sbci	r19, 0xF3	; 243
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
#if (F_CPU > 16000000L)
  uint32_t count = 0;
#else
  uint16_t count = 0; // To work fast enough on slower AVR boards
    3026:	a0 e0       	ldi	r26, 0x00	; 0
    3028:	b0 e0       	ldi	r27, 0x00	; 0
#endif
// On AVR platforms use direct GPIO port access as it's much faster and better
// for catching pulses that are 10's of microseconds in length:
#ifdef __AVR
  uint8_t portState = level ? _bit : 0;
  while ((*portInputRegister(_port) & _bit) == portState) {
    302a:	f9 01       	movw	r30, r18
    302c:	45 91       	lpm	r20, Z+
    302e:	54 91       	lpm	r21, Z
    3030:	fa 01       	movw	r30, r20
    3032:	80 81       	ld	r24, Z
    3034:	81 23       	and	r24, r17
    3036:	ad 01       	movw	r20, r26
    3038:	60 e0       	ldi	r22, 0x00	; 0
    303a:	70 e0       	ldi	r23, 0x00	; 0
    303c:	98 13       	cpse	r25, r24
    303e:	0f c0       	rjmp	.+30     	; 0x305e <_ZN3DHT11expectPulseEb+0x60>
    if (count++ >= _maxcycles) {
    3040:	11 96       	adiw	r26, 0x01	; 1
    3042:	cd 84       	ldd	r12, Y+13	; 0x0d
    3044:	de 84       	ldd	r13, Y+14	; 0x0e
    3046:	ef 84       	ldd	r14, Y+15	; 0x0f
    3048:	f8 88       	ldd	r15, Y+16	; 0x10
    304a:	4c 15       	cp	r20, r12
    304c:	5d 05       	cpc	r21, r13
    304e:	6e 05       	cpc	r22, r14
    3050:	7f 05       	cpc	r23, r15
    3052:	58 f3       	brcs	.-42     	; 0x302a <_ZN3DHT11expectPulseEb+0x2c>
      return TIMEOUT; // Exceeded timeout, fail.
    3054:	3f ef       	ldi	r19, 0xFF	; 255
    3056:	2f ef       	ldi	r18, 0xFF	; 255
    3058:	8f ef       	ldi	r24, 0xFF	; 255
    305a:	9f ef       	ldi	r25, 0xFF	; 255
    305c:	03 c0       	rjmp	.+6      	; 0x3064 <_ZN3DHT11expectPulseEb+0x66>
      return TIMEOUT; // Exceeded timeout, fail.
    }
  }
#endif

  return count;
    305e:	3a 2f       	mov	r19, r26
    3060:	25 2f       	mov	r18, r21
    3062:	cb 01       	movw	r24, r22
}
    3064:	63 2f       	mov	r22, r19
    3066:	72 2f       	mov	r23, r18
    3068:	df 91       	pop	r29
    306a:	cf 91       	pop	r28
    306c:	1f 91       	pop	r17
    306e:	ff 90       	pop	r15
    3070:	ef 90       	pop	r14
    3072:	df 90       	pop	r13
    3074:	cf 90       	pop	r12
    3076:	08 95       	ret

00003078 <_ZN3DHT4readEb>:
 *seconds.
 *  @param  force
 *          true if using force mode
 *	@return float value
 */
bool DHT::read(bool force) {
    3078:	8f 92       	push	r8
    307a:	9f 92       	push	r9
    307c:	af 92       	push	r10
    307e:	bf 92       	push	r11
    3080:	cf 92       	push	r12
    3082:	df 92       	push	r13
    3084:	ef 92       	push	r14
    3086:	ff 92       	push	r15
    3088:	0f 93       	push	r16
    308a:	1f 93       	push	r17
    308c:	cf 93       	push	r28
    308e:	df 93       	push	r29
    3090:	cd b7       	in	r28, 0x3d	; 61
    3092:	de b7       	in	r29, 0x3e	; 62
    3094:	c0 54       	subi	r28, 0x40	; 64
    3096:	d1 40       	sbci	r29, 0x01	; 1
    3098:	0f b6       	in	r0, 0x3f	; 63
    309a:	f8 94       	cli
    309c:	de bf       	out	0x3e, r29	; 62
    309e:	0f be       	out	0x3f, r0	; 63
    30a0:	cd bf       	out	0x3d, r28	; 61
    30a2:	8c 01       	movw	r16, r24
    30a4:	f6 2e       	mov	r15, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
    30a6:	0e 94 7a 2c 	call	0x58f4	; 0x58f4 <millis>
  if (!force && ((currenttime - _lastreadtime) < MIN_INTERVAL)) {
    30aa:	f1 10       	cpse	r15, r1
    30ac:	16 c0       	rjmp	.+44     	; 0x30da <_ZN3DHT4readEb+0x62>
    30ae:	f8 01       	movw	r30, r16
    30b0:	c1 84       	ldd	r12, Z+9	; 0x09
    30b2:	d2 84       	ldd	r13, Z+10	; 0x0a
    30b4:	e3 84       	ldd	r14, Z+11	; 0x0b
    30b6:	f4 84       	ldd	r15, Z+12	; 0x0c
    30b8:	9b 01       	movw	r18, r22
    30ba:	ac 01       	movw	r20, r24
    30bc:	2c 19       	sub	r18, r12
    30be:	3d 09       	sbc	r19, r13
    30c0:	4e 09       	sbc	r20, r14
    30c2:	5f 09       	sbc	r21, r15
    30c4:	69 01       	movw	r12, r18
    30c6:	7a 01       	movw	r14, r20
    30c8:	30 ed       	ldi	r19, 0xD0	; 208
    30ca:	c3 16       	cp	r12, r19
    30cc:	37 e0       	ldi	r19, 0x07	; 7
    30ce:	d3 06       	cpc	r13, r19
    30d0:	e1 04       	cpc	r14, r1
    30d2:	f1 04       	cpc	r15, r1
    30d4:	10 f4       	brcc	.+4      	; 0x30da <_ZN3DHT4readEb+0x62>
    return _lastresult; // return last correct measurement
    30d6:	81 89       	ldd	r24, Z+17	; 0x11
    30d8:	b6 c0       	rjmp	.+364    	; 0x3246 <_ZN3DHT4readEb+0x1ce>
  }
  _lastreadtime = currenttime;
    30da:	f8 01       	movw	r30, r16
    30dc:	61 87       	std	Z+9, r22	; 0x09
    30de:	72 87       	std	Z+10, r23	; 0x0a
    30e0:	83 87       	std	Z+11, r24	; 0x0b
    30e2:	94 87       	std	Z+12, r25	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    30e4:	14 82       	std	Z+4, r1	; 0x04
    30e6:	13 82       	std	Z+3, r1	; 0x03
    30e8:	12 82       	std	Z+2, r1	; 0x02
    30ea:	11 82       	std	Z+1, r1	; 0x01
    30ec:	10 82       	st	Z, r1
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedence state to let pull-up raise data line level and
  // start the reading process.
  pinMode(_pin, INPUT_PULLUP);
    30ee:	62 e0       	ldi	r22, 0x02	; 2
    30f0:	85 81       	ldd	r24, Z+5	; 0x05
    30f2:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <pinMode>
  delay(1);
    30f6:	61 e0       	ldi	r22, 0x01	; 1
    30f8:	70 e0       	ldi	r23, 0x00	; 0
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	0e 94 ab 2c 	call	0x5956	; 0x5956 <delay>

  // First set data line low for a period according to sensor type
  pinMode(_pin, OUTPUT);
    3102:	61 e0       	ldi	r22, 0x01	; 1
    3104:	f8 01       	movw	r30, r16
    3106:	85 81       	ldd	r24, Z+5	; 0x05
    3108:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <pinMode>
  digitalWrite(_pin, LOW);
    310c:	60 e0       	ldi	r22, 0x00	; 0
    310e:	f8 01       	movw	r30, r16
    3110:	85 81       	ldd	r24, Z+5	; 0x05
    3112:	0e 94 e2 2d 	call	0x5bc4	; 0x5bc4 <digitalWrite>
  switch (_type) {
    3116:	f8 01       	movw	r30, r16
    3118:	86 81       	ldd	r24, Z+6	; 0x06
    311a:	85 51       	subi	r24, 0x15	; 21
    311c:	82 30       	cpi	r24, 0x02	; 2
    311e:	28 f4       	brcc	.+10     	; 0x312a <_ZN3DHT4readEb+0xb2>
  case DHT22:
  case DHT21:
    delayMicroseconds(1100); // data sheet says "at least 1ms"
    3120:	8c e4       	ldi	r24, 0x4C	; 76
    3122:	94 e0       	ldi	r25, 0x04	; 4
    3124:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <delayMicroseconds>
    break;
    3128:	06 c0       	rjmp	.+12     	; 0x3136 <_ZN3DHT4readEb+0xbe>
  case DHT11:
  default:
    delay(20); // data sheet says at least 18ms, 20ms just to be safe
    312a:	64 e1       	ldi	r22, 0x14	; 20
    312c:	70 e0       	ldi	r23, 0x00	; 0
    312e:	80 e0       	ldi	r24, 0x00	; 0
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	0e 94 ab 2c 	call	0x5956	; 0x5956 <delay>
  }

  uint32_t cycles[80];
  {
    // End the start signal by setting data line high for 40 microseconds.
    pinMode(_pin, INPUT_PULLUP);
    3136:	62 e0       	ldi	r22, 0x02	; 2
    3138:	f8 01       	movw	r30, r16
    313a:	85 81       	ldd	r24, Z+5	; 0x05
    313c:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <pinMode>

    // Delay a moment to let sensor pull data line low.
    delayMicroseconds(pullTime);
    3140:	f8 01       	movw	r30, r16
    3142:	82 89       	ldd	r24, Z+18	; 0x12
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <delayMicroseconds>
 */
class InterruptLock {
public:
  InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    noInterrupts();
    314a:	f8 94       	cli
    // are timing critical and we don't want any interruptions.
    InterruptLock lock;

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == TIMEOUT) {
    314c:	60 e0       	ldi	r22, 0x00	; 0
    314e:	c8 01       	movw	r24, r16
    3150:	56 df       	rcall	.-340    	; 0x2ffe <_ZN3DHT11expectPulseEb>
    3152:	6f 3f       	cpi	r22, 0xFF	; 255
    3154:	7f 4f       	sbci	r23, 0xFF	; 255
    3156:	8f 4f       	sbci	r24, 0xFF	; 255
    3158:	9f 4f       	sbci	r25, 0xFF	; 255
    315a:	21 f4       	brne	.+8      	; 0x3164 <_ZN3DHT4readEb+0xec>
      DEBUG_PRINTLN(F("DHT timeout waiting for start signal low pulse."));
      _lastresult = false;
    315c:	f8 01       	movw	r30, r16
    315e:	11 8a       	std	Z+17, r1	; 0x11
#endif
  }
  ~InterruptLock() {
#if !defined(ARDUINO_ARCH_NRF52)
    interrupts();
    3160:	78 94       	sei
    3162:	42 c0       	rjmp	.+132    	; 0x31e8 <_ZN3DHT4readEb+0x170>
      return _lastresult;
    }
    if (expectPulse(HIGH) == TIMEOUT) {
    3164:	61 e0       	ldi	r22, 0x01	; 1
    3166:	c8 01       	movw	r24, r16
    3168:	4a df       	rcall	.-364    	; 0x2ffe <_ZN3DHT11expectPulseEb>
    316a:	6f 3f       	cpi	r22, 0xFF	; 255
    316c:	7f 4f       	sbci	r23, 0xFF	; 255
    316e:	8f 4f       	sbci	r24, 0xFF	; 255
    3170:	9f 4f       	sbci	r25, 0xFF	; 255
    3172:	a1 f3       	breq	.-24     	; 0x315c <_ZN3DHT4readEb+0xe4>
    3174:	9e 01       	movw	r18, r28
    3176:	2f 5f       	subi	r18, 0xFF	; 255
    3178:	3f 4f       	sbci	r19, 0xFF	; 255
    317a:	79 01       	movw	r14, r18
    317c:	5e 01       	movw	r10, r28
    317e:	3f eb       	ldi	r19, 0xBF	; 191
    3180:	a3 1a       	sub	r10, r19
    3182:	3e ef       	ldi	r19, 0xFE	; 254
    3184:	b3 0a       	sbc	r11, r19
    3186:	67 01       	movw	r12, r14
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
      cycles[i] = expectPulse(LOW);
    3188:	60 e0       	ldi	r22, 0x00	; 0
    318a:	c8 01       	movw	r24, r16
    318c:	38 df       	rcall	.-400    	; 0x2ffe <_ZN3DHT11expectPulseEb>
    318e:	f6 01       	movw	r30, r12
    3190:	60 83       	st	Z, r22
    3192:	71 83       	std	Z+1, r23	; 0x01
    3194:	82 83       	std	Z+2, r24	; 0x02
    3196:	93 83       	std	Z+3, r25	; 0x03
      cycles[i + 1] = expectPulse(HIGH);
    3198:	61 e0       	ldi	r22, 0x01	; 1
    319a:	c8 01       	movw	r24, r16
    319c:	30 df       	rcall	.-416    	; 0x2ffe <_ZN3DHT11expectPulseEb>
    319e:	f6 01       	movw	r30, r12
    31a0:	64 83       	std	Z+4, r22	; 0x04
    31a2:	75 83       	std	Z+5, r23	; 0x05
    31a4:	86 83       	std	Z+6, r24	; 0x06
    31a6:	97 83       	std	Z+7, r25	; 0x07
    31a8:	f8 e0       	ldi	r31, 0x08	; 8
    31aa:	cf 0e       	add	r12, r31
    31ac:	d1 1c       	adc	r13, r1
    31ae:	ca 14       	cp	r12, r10
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed
    // all the pulses are read into a array and then examined in a later step.
    for (int i = 0; i < 80; i += 2) {
    31b0:	db 04       	cpc	r13, r11
    31b2:	51 f7       	brne	.-44     	; 0x3188 <_ZN3DHT4readEb+0x110>
    31b4:	78 94       	sei
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	f7 01       	movw	r30, r14
    uint32_t lowCycles = cycles[2 * i];
    31bc:	80 80       	ld	r8, Z
    31be:	91 80       	ldd	r9, Z+1	; 0x01
    31c0:	a2 80       	ldd	r10, Z+2	; 0x02
    31c2:	b3 80       	ldd	r11, Z+3	; 0x03
    31c4:	44 81       	ldd	r20, Z+4	; 0x04
    uint32_t highCycles = cycles[2 * i + 1];
    31c6:	55 81       	ldd	r21, Z+5	; 0x05
    31c8:	66 81       	ldd	r22, Z+6	; 0x06
    31ca:	77 81       	ldd	r23, Z+7	; 0x07
    31cc:	ff ef       	ldi	r31, 0xFF	; 255
    if ((lowCycles == TIMEOUT) || (highCycles == TIMEOUT)) {
    31ce:	8f 16       	cp	r8, r31
    31d0:	9f 06       	cpc	r9, r31
    31d2:	af 06       	cpc	r10, r31
    31d4:	bf 06       	cpc	r11, r31
    31d6:	31 f0       	breq	.+12     	; 0x31e4 <_ZN3DHT4readEb+0x16c>
    31d8:	4f 3f       	cpi	r20, 0xFF	; 255
    31da:	8f ef       	ldi	r24, 0xFF	; 255
    31dc:	58 07       	cpc	r21, r24
    31de:	68 07       	cpc	r22, r24
    31e0:	78 07       	cpc	r23, r24
    31e2:	21 f4       	brne	.+8      	; 0x31ec <_ZN3DHT4readEb+0x174>
    31e4:	f8 01       	movw	r30, r16
      DEBUG_PRINTLN(F("DHT timeout waiting for pulse."));
      _lastresult = false;
    31e6:	11 8a       	std	Z+17, r1	; 0x11
    31e8:	80 e0       	ldi	r24, 0x00	; 0
      return _lastresult;
    31ea:	2d c0       	rjmp	.+90     	; 0x3246 <_ZN3DHT4readEb+0x1ce>
    31ec:	f9 01       	movw	r30, r18
    }
    data[i / 8] <<= 1;
    31ee:	83 e0       	ldi	r24, 0x03	; 3
    31f0:	f5 95       	asr	r31
    31f2:	e7 95       	ror	r30
    31f4:	8a 95       	dec	r24
    31f6:	e1 f7       	brne	.-8      	; 0x31f0 <_ZN3DHT4readEb+0x178>
    31f8:	e0 0f       	add	r30, r16
    31fa:	f1 1f       	adc	r31, r17
    31fc:	80 81       	ld	r24, Z
    31fe:	88 0f       	add	r24, r24
    3200:	84 16       	cp	r8, r20
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
    3202:	95 06       	cpc	r9, r21
    3204:	a6 06       	cpc	r10, r22
    3206:	b7 06       	cpc	r11, r23
    3208:	08 f4       	brcc	.+2      	; 0x320c <_ZN3DHT4readEb+0x194>
    320a:	81 60       	ori	r24, 0x01	; 1
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i / 8] |= 1;
    320c:	80 83       	st	Z, r24
    320e:	2f 5f       	subi	r18, 0xFF	; 255
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i = 0; i < 40; ++i) {
    3210:	3f 4f       	sbci	r19, 0xFF	; 255
    3212:	f8 e0       	ldi	r31, 0x08	; 8
    3214:	ef 0e       	add	r14, r31
    3216:	f1 1c       	adc	r15, r1
    3218:	28 32       	cpi	r18, 0x28	; 40
    321a:	31 05       	cpc	r19, r1
    321c:	71 f6       	brne	.-100    	; 0x31ba <_ZN3DHT4readEb+0x142>
    321e:	f8 01       	movw	r30, r16
  DEBUG_PRINT(data[4], HEX);
  DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    3220:	24 81       	ldd	r18, Z+4	; 0x04
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	40 81       	ld	r20, Z
    3226:	81 81       	ldd	r24, Z+1	; 0x01
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	84 0f       	add	r24, r20
    322c:	91 1d       	adc	r25, r1
    322e:	42 81       	ldd	r20, Z+2	; 0x02
    3230:	84 0f       	add	r24, r20
    3232:	91 1d       	adc	r25, r1
    3234:	43 81       	ldd	r20, Z+3	; 0x03
    3236:	84 0f       	add	r24, r20
    3238:	91 1d       	adc	r25, r1
    323a:	99 27       	eor	r25, r25
    323c:	28 17       	cp	r18, r24
    323e:	39 07       	cpc	r19, r25
    3240:	89 f6       	brne	.-94     	; 0x31e4 <_ZN3DHT4readEb+0x16c>
    3242:	81 e0       	ldi	r24, 0x01	; 1
    _lastresult = true;
    3244:	81 8b       	std	Z+17, r24	; 0x11
    3246:	c0 5c       	subi	r28, 0xC0	; 192
  } else {
    DEBUG_PRINTLN(F("DHT checksum failure!"));
    _lastresult = false;
    return _lastresult;
  }
}
    3248:	de 4f       	sbci	r29, 0xFE	; 254
    324a:	0f b6       	in	r0, 0x3f	; 63
    324c:	f8 94       	cli
    324e:	de bf       	out	0x3e, r29	; 62
    3250:	0f be       	out	0x3f, r0	; 63
    3252:	cd bf       	out	0x3d, r28	; 61
    3254:	df 91       	pop	r29
    3256:	cf 91       	pop	r28
    3258:	1f 91       	pop	r17
    325a:	0f 91       	pop	r16
    325c:	ff 90       	pop	r15
    325e:	ef 90       	pop	r14
    3260:	df 90       	pop	r13
    3262:	cf 90       	pop	r12
    3264:	bf 90       	pop	r11
    3266:	af 90       	pop	r10
    3268:	9f 90       	pop	r9
    326a:	8f 90       	pop	r8
    326c:	08 95       	ret

0000326e <_ZN3DHT15readTemperatureEbb>:
    326e:	cf 92       	push	r12
 *					- false = Celcius
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
    3270:	df 92       	push	r13
    3272:	ef 92       	push	r14
    3274:	ff 92       	push	r15
    3276:	0f 93       	push	r16
    3278:	1f 93       	push	r17
    327a:	cf 93       	push	r28
    327c:	df 93       	push	r29
    327e:	8c 01       	movw	r16, r24
    3280:	c6 2f       	mov	r28, r22
  float f = NAN;

  if (read(force)) {
    3282:	64 2f       	mov	r22, r20
    3284:	f9 de       	rcall	.-526    	; 0x3078 <_ZN3DHT4readEb>
    3286:	88 23       	and	r24, r24
    3288:	09 f4       	brne	.+2      	; 0x328c <_ZN3DHT15readTemperatureEbb+0x1e>
    328a:	78 c0       	rjmp	.+240    	; 0x337c <_ZN3DHT15readTemperatureEbb+0x10e>
    switch (_type) {
    328c:	f8 01       	movw	r30, r16
    328e:	86 81       	ldd	r24, Z+6	; 0x06
    3290:	8c 30       	cpi	r24, 0x0C	; 12
    3292:	09 f4       	brne	.+2      	; 0x3296 <_ZN3DHT15readTemperatureEbb+0x28>
    3294:	45 c0       	rjmp	.+138    	; 0x3320 <_ZN3DHT15readTemperatureEbb+0xb2>
    3296:	18 f4       	brcc	.+6      	; 0x329e <_ZN3DHT15readTemperatureEbb+0x30>
    3298:	8b 30       	cpi	r24, 0x0B	; 11
    329a:	c9 f0       	breq	.+50     	; 0x32ce <_ZN3DHT15readTemperatureEbb+0x60>
    329c:	6f c0       	rjmp	.+222    	; 0x337c <_ZN3DHT15readTemperatureEbb+0x10e>
    329e:	85 51       	subi	r24, 0x15	; 21
    32a0:	82 30       	cpi	r24, 0x02	; 2
    32a2:	08 f0       	brcs	.+2      	; 0x32a6 <_ZN3DHT15readTemperatureEbb+0x38>
    32a4:	6b c0       	rjmp	.+214    	; 0x337c <_ZN3DHT15readTemperatureEbb+0x10e>
        f = convertCtoF(f);
      }
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
    32a6:	f8 01       	movw	r30, r16
    32a8:	d2 81       	ldd	r29, Z+2	; 0x02
      f *= 0.1;
    32aa:	6d 2f       	mov	r22, r29
    32ac:	6f 77       	andi	r22, 0x7F	; 127
    32ae:	70 e0       	ldi	r23, 0x00	; 0
    32b0:	76 2f       	mov	r23, r22
    32b2:	66 27       	eor	r22, r22
    32b4:	83 81       	ldd	r24, Z+3	; 0x03
    32b6:	68 2b       	or	r22, r24
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__floatunsisf>
    32c0:	2d ec       	ldi	r18, 0xCD	; 205
    32c2:	3c ec       	ldi	r19, 0xCC	; 204
    32c4:	4c ec       	ldi	r20, 0xCC	; 204
    32c6:	5d e3       	ldi	r21, 0x3D	; 61
    32c8:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    32cc:	46 c0       	rjmp	.+140    	; 0x335a <_ZN3DHT15readTemperatureEbb+0xec>
  float f = NAN;

  if (read(force)) {
    switch (_type) {
    case DHT11:
      f = data[2];
    32ce:	f8 01       	movw	r30, r16
    32d0:	62 81       	ldd	r22, Z+2	; 0x02
    32d2:	70 e0       	ldi	r23, 0x00	; 0
    32d4:	80 e0       	ldi	r24, 0x00	; 0
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__floatunsisf>
    32dc:	6b 01       	movw	r12, r22
    32de:	7c 01       	movw	r14, r24
      if (data[3] & 0x80) {
    32e0:	f8 01       	movw	r30, r16
    32e2:	d3 81       	ldd	r29, Z+3	; 0x03
    32e4:	d7 ff       	sbrs	r29, 7
    32e6:	0a c0       	rjmp	.+20     	; 0x32fc <_ZN3DHT15readTemperatureEbb+0x8e>
        f = -1 - f;
    32e8:	9b 01       	movw	r18, r22
    32ea:	ac 01       	movw	r20, r24
    32ec:	60 e0       	ldi	r22, 0x00	; 0
    32ee:	70 e0       	ldi	r23, 0x00	; 0
    32f0:	80 e8       	ldi	r24, 0x80	; 128
    32f2:	9f eb       	ldi	r25, 0xBF	; 191
    32f4:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <__subsf3>
    32f8:	6b 01       	movw	r12, r22
    32fa:	7c 01       	movw	r14, r24
      }
      f += (data[3] & 0x0f) * 0.1;
    32fc:	6d 2f       	mov	r22, r29
    32fe:	6f 70       	andi	r22, 0x0F	; 15
    3300:	70 e0       	ldi	r23, 0x00	; 0
    3302:	80 e0       	ldi	r24, 0x00	; 0
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <__floatsisf>
    330a:	2d ec       	ldi	r18, 0xCD	; 205
    330c:	3c ec       	ldi	r19, 0xCC	; 204
    330e:	4c ec       	ldi	r20, 0xCC	; 204
    3310:	5d e3       	ldi	r21, 0x3D	; 61
    3312:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    3316:	a7 01       	movw	r20, r14
    3318:	96 01       	movw	r18, r12
    331a:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <__addsf3>
    331e:	1f c0       	rjmp	.+62     	; 0x335e <_ZN3DHT15readTemperatureEbb+0xf0>
      if (S) {
        f = convertCtoF(f);
      }
      break;
    case DHT12:
      f = data[2];
    3320:	f8 01       	movw	r30, r16
    3322:	d2 81       	ldd	r29, Z+2	; 0x02
      f += (data[3] & 0x0f) * 0.1;
    3324:	63 81       	ldd	r22, Z+3	; 0x03
    3326:	6f 70       	andi	r22, 0x0F	; 15
    3328:	70 e0       	ldi	r23, 0x00	; 0
    332a:	80 e0       	ldi	r24, 0x00	; 0
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <__floatsisf>
    3332:	2d ec       	ldi	r18, 0xCD	; 205
    3334:	3c ec       	ldi	r19, 0xCC	; 204
    3336:	4c ec       	ldi	r20, 0xCC	; 204
    3338:	5d e3       	ldi	r21, 0x3D	; 61
    333a:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    333e:	6b 01       	movw	r12, r22
    3340:	7c 01       	movw	r14, r24
    3342:	6d 2f       	mov	r22, r29
    3344:	70 e0       	ldi	r23, 0x00	; 0
    3346:	80 e0       	ldi	r24, 0x00	; 0
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__floatunsisf>
    334e:	9b 01       	movw	r18, r22
    3350:	ac 01       	movw	r20, r24
    3352:	c7 01       	movw	r24, r14
    3354:	b6 01       	movw	r22, r12
    3356:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <__addsf3>
      break;
    case DHT22:
    case DHT21:
      f = ((word)(data[2] & 0x7F)) << 8 | data[3];
      f *= 0.1;
      if (data[2] & 0x80) {
    335a:	d7 fd       	sbrc	r29, 7
        f *= -1;
    335c:	90 58       	subi	r25, 0x80	; 128
      }
      if (S) {
    335e:	cc 23       	and	r28, r28
    3360:	89 f0       	breq	.+34     	; 0x3384 <_ZN3DHT15readTemperatureEbb+0x116>
 *  @brief  Converts Celcius to Fahrenheit
 *  @param  c
 *					value in Celcius
 *	@return float value in Fahrenheit
 */
float DHT::convertCtoF(float c) { return c * 1.8 + 32; }
    3362:	26 e6       	ldi	r18, 0x66	; 102
    3364:	36 e6       	ldi	r19, 0x66	; 102
    3366:	46 ee       	ldi	r20, 0xE6	; 230
    3368:	5f e3       	ldi	r21, 0x3F	; 63
    336a:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	40 e0       	ldi	r20, 0x00	; 0
    3374:	52 e4       	ldi	r21, 0x42	; 66
    3376:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <__addsf3>
    337a:	04 c0       	rjmp	.+8      	; 0x3384 <_ZN3DHT15readTemperatureEbb+0x116>
 *  @param  force
 *          true if in force mode
 *	@return Temperature value in selected scale
 */
float DHT::readTemperature(bool S, bool force) {
  float f = NAN;
    337c:	60 e0       	ldi	r22, 0x00	; 0
    337e:	70 e0       	ldi	r23, 0x00	; 0
    3380:	80 ec       	ldi	r24, 0xC0	; 192
    3382:	9f e7       	ldi	r25, 0x7F	; 127
      }
      break;
    }
  }
  return f;
}
    3384:	df 91       	pop	r29
    3386:	cf 91       	pop	r28
    3388:	1f 91       	pop	r17
    338a:	0f 91       	pop	r16
    338c:	ff 90       	pop	r15
    338e:	ef 90       	pop	r14
    3390:	df 90       	pop	r13
    3392:	cf 90       	pop	r12
    3394:	08 95       	ret

00003396 <_ZN3DHT12readHumidityEb>:
 *  @brief  Read Humidity
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
    3396:	cf 92       	push	r12
    3398:	df 92       	push	r13
    339a:	ef 92       	push	r14
    339c:	ff 92       	push	r15
    339e:	cf 93       	push	r28
    33a0:	df 93       	push	r29
    33a2:	ec 01       	movw	r28, r24
  float f = NAN;
  if (read(force)) {
    33a4:	69 de       	rcall	.-814    	; 0x3078 <_ZN3DHT4readEb>
    33a6:	88 23       	and	r24, r24
    33a8:	99 f1       	breq	.+102    	; 0x3410 <_ZN3DHT12readHumidityEb+0x7a>
    switch (_type) {
    33aa:	8e 81       	ldd	r24, Y+6	; 0x06
    33ac:	8b 30       	cpi	r24, 0x0B	; 11
    33ae:	80 f1       	brcs	.+96     	; 0x3410 <_ZN3DHT12readHumidityEb+0x7a>
    33b0:	8d 30       	cpi	r24, 0x0D	; 13
    33b2:	98 f0       	brcs	.+38     	; 0x33da <_ZN3DHT12readHumidityEb+0x44>
    33b4:	85 51       	subi	r24, 0x15	; 21
    33b6:	82 30       	cpi	r24, 0x02	; 2
    33b8:	58 f5       	brcc	.+86     	; 0x3410 <_ZN3DHT12readHumidityEb+0x7a>
    case DHT12:
      f = data[0] + data[1] * 0.1;
      break;
    case DHT22:
    case DHT21:
      f = ((word)data[0]) << 8 | data[1];
    33ba:	68 81       	ld	r22, Y
    33bc:	79 81       	ldd	r23, Y+1	; 0x01
    33be:	76 27       	eor	r23, r22
    33c0:	67 27       	eor	r22, r23
    33c2:	76 27       	eor	r23, r22
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__floatunsisf>
      f *= 0.1;
    33cc:	2d ec       	ldi	r18, 0xCD	; 205
    33ce:	3c ec       	ldi	r19, 0xCC	; 204
    33d0:	4c ec       	ldi	r20, 0xCC	; 204
    33d2:	5d e3       	ldi	r21, 0x3D	; 61
    33d4:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
      break;
    33d8:	1f c0       	rjmp	.+62     	; 0x3418 <_ZN3DHT12readHumidityEb+0x82>
  float f = NAN;
  if (read(force)) {
    switch (_type) {
    case DHT11:
    case DHT12:
      f = data[0] + data[1] * 0.1;
    33da:	69 81       	ldd	r22, Y+1	; 0x01
    33dc:	70 e0       	ldi	r23, 0x00	; 0
    33de:	80 e0       	ldi	r24, 0x00	; 0
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <__floatsisf>
    33e6:	2d ec       	ldi	r18, 0xCD	; 205
    33e8:	3c ec       	ldi	r19, 0xCC	; 204
    33ea:	4c ec       	ldi	r20, 0xCC	; 204
    33ec:	5d e3       	ldi	r21, 0x3D	; 61
    33ee:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    33f2:	6b 01       	movw	r12, r22
    33f4:	7c 01       	movw	r14, r24
    33f6:	68 81       	ld	r22, Y
    33f8:	70 e0       	ldi	r23, 0x00	; 0
    33fa:	80 e0       	ldi	r24, 0x00	; 0
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <__floatsisf>
    3402:	9b 01       	movw	r18, r22
    3404:	ac 01       	movw	r20, r24
    3406:	c7 01       	movw	r24, r14
    3408:	b6 01       	movw	r22, r12
    340a:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <__addsf3>
    340e:	04 c0       	rjmp	.+8      	; 0x3418 <_ZN3DHT12readHumidityEb+0x82>
 *  @param  force
 *					force read mode
 *	@return float value - humidity in percent
 */
float DHT::readHumidity(bool force) {
  float f = NAN;
    3410:	60 e0       	ldi	r22, 0x00	; 0
    3412:	70 e0       	ldi	r23, 0x00	; 0
    3414:	80 ec       	ldi	r24, 0xC0	; 192
    3416:	9f e7       	ldi	r25, 0x7F	; 127
      f *= 0.1;
      break;
    }
  }
  return f;
}
    3418:	df 91       	pop	r29
    341a:	cf 91       	pop	r28
    341c:	ff 90       	pop	r15
    341e:	ef 90       	pop	r14
    3420:	df 90       	pop	r13
    3422:	cf 90       	pop	r12
    3424:	08 95       	ret

00003426 <_ZN3DHT16computeHeatIndexEb>:
 *  @param  isFahrenheit
 * 					true if fahrenheit, false if celcius
 *(default true)
 *	@return float heat index
 */
float DHT::computeHeatIndex(bool isFahrenheit) {
    3426:	8f 92       	push	r8
    3428:	9f 92       	push	r9
    342a:	af 92       	push	r10
    342c:	bf 92       	push	r11
    342e:	ef 92       	push	r14
    3430:	0f 93       	push	r16
    3432:	1f 93       	push	r17
    3434:	cf 93       	push	r28
    3436:	df 93       	push	r29
    3438:	ec 01       	movw	r28, r24
    343a:	e6 2e       	mov	r14, r22
  float hi = computeHeatIndex(readTemperature(isFahrenheit), readHumidity(),
    343c:	60 e0       	ldi	r22, 0x00	; 0
    343e:	ab df       	rcall	.-170    	; 0x3396 <_ZN3DHT12readHumidityEb>
    3440:	4b 01       	movw	r8, r22
    3442:	5c 01       	movw	r10, r24
    3444:	40 e0       	ldi	r20, 0x00	; 0
    3446:	6e 2d       	mov	r22, r14
    3448:	ce 01       	movw	r24, r28
    344a:	11 df       	rcall	.-478    	; 0x326e <_ZN3DHT15readTemperatureEbb>
    344c:	ab 01       	movw	r20, r22
    344e:	bc 01       	movw	r22, r24
                              isFahrenheit);
    3450:	95 01       	movw	r18, r10
    3452:	84 01       	movw	r16, r8
    3454:	ce 01       	movw	r24, r28
    3456:	a6 db       	rcall	.-2228   	; 0x2ba4 <_ZN3DHT16computeHeatIndexEffb>
  return hi;
}
    3458:	df 91       	pop	r29
    345a:	cf 91       	pop	r28
    345c:	1f 91       	pop	r17
    345e:	0f 91       	pop	r16
    3460:	ef 90       	pop	r14
    3462:	bf 90       	pop	r11
    3464:	af 90       	pop	r10
    3466:	9f 90       	pop	r9
    3468:	8f 90       	pop	r8
    346a:	08 95       	ret

0000346c <_ZN7TwoWire5writeEi>:
    value = readRegister8(DS3231_REG_CONTROL);

    value &= 0b11111011;
    value |= (!enabled << 2);

    writeRegister8(DS3231_REG_CONTROL, value);
    346c:	dc 01       	movw	r26, r24
    346e:	ed 91       	ld	r30, X+
    3470:	fc 91       	ld	r31, X
    3472:	01 90       	ld	r0, Z+
    3474:	f0 81       	ld	r31, Z
    3476:	e0 2d       	mov	r30, r0
    3478:	19 94       	eijmp

0000347a <_ZN6DS32316conv2dEPKc>:
    347a:	fb 01       	movw	r30, r22
    347c:	90 81       	ld	r25, Z
    347e:	90 53       	subi	r25, 0x30	; 48
    3480:	9a 30       	cpi	r25, 0x0A	; 10
    3482:	08 f0       	brcs	.+2      	; 0x3486 <_ZN6DS32316conv2dEPKc+0xc>
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	fb 01       	movw	r30, r22
    3488:	81 81       	ldd	r24, Z+1	; 0x01
    348a:	80 53       	subi	r24, 0x30	; 48
    348c:	fa e0       	ldi	r31, 0x0A	; 10
    348e:	9f 9f       	mul	r25, r31
    3490:	80 0d       	add	r24, r0
    3492:	11 24       	eor	r1, r1
    3494:	08 95       	ret

00003496 <_ZN6DS32313dowEjhh>:
    3496:	cf 93       	push	r28
    3498:	df 93       	push	r29
    349a:	52 2f       	mov	r21, r18
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	43 30       	cpi	r20, 0x03	; 3
    34a2:	10 f0       	brcs	.+4      	; 0x34a8 <_ZN6DS32313dowEjhh+0x12>
    34a4:	80 e0       	ldi	r24, 0x00	; 0
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	eb 01       	movw	r28, r22
    34aa:	c8 1b       	sub	r28, r24
    34ac:	d9 0b       	sbc	r29, r25
    34ae:	e4 2f       	mov	r30, r20
    34b0:	f0 e0       	ldi	r31, 0x00	; 0
    34b2:	e3 5c       	subi	r30, 0xC3	; 195
    34b4:	f4 4f       	sbci	r31, 0xF4	; 244
    34b6:	e4 91       	lpm	r30, Z
    34b8:	9e 01       	movw	r18, r28
    34ba:	36 95       	lsr	r19
    34bc:	27 95       	ror	r18
    34be:	36 95       	lsr	r19
    34c0:	27 95       	ror	r18
    34c2:	ce 01       	movw	r24, r28
    34c4:	85 0f       	add	r24, r21
    34c6:	91 1d       	adc	r25, r1
    34c8:	28 0f       	add	r18, r24
    34ca:	39 1f       	adc	r19, r25
    34cc:	ce 01       	movw	r24, r28
    34ce:	60 e9       	ldi	r22, 0x90	; 144
    34d0:	71 e0       	ldi	r23, 0x01	; 1
    34d2:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <__udivmodhi4>
    34d6:	26 0f       	add	r18, r22
    34d8:	37 1f       	adc	r19, r23
    34da:	ce 01       	movw	r24, r28
    34dc:	64 e6       	ldi	r22, 0x64	; 100
    34de:	70 e0       	ldi	r23, 0x00	; 0
    34e0:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <__udivmodhi4>
    34e4:	c9 01       	movw	r24, r18
    34e6:	86 1b       	sub	r24, r22
    34e8:	97 0b       	sbc	r25, r23
    34ea:	8e 0f       	add	r24, r30
    34ec:	91 1d       	adc	r25, r1
    34ee:	67 e0       	ldi	r22, 0x07	; 7
    34f0:	70 e0       	ldi	r23, 0x00	; 0
    34f2:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <__udivmodhi4>
    34f6:	81 11       	cpse	r24, r1
    34f8:	01 c0       	rjmp	.+2      	; 0x34fc <_ZN6DS32313dowEjhh+0x66>
    34fa:	87 e0       	ldi	r24, 0x07	; 7
    34fc:	df 91       	pop	r29
    34fe:	cf 91       	pop	r28
    3500:	08 95       	ret

00003502 <_ZN6DS323111setDateTimeEjhhhhh>:
    3502:	af 92       	push	r10
    3504:	bf 92       	push	r11
    3506:	cf 92       	push	r12
    3508:	df 92       	push	r13
    350a:	ef 92       	push	r14
    350c:	ff 92       	push	r15
    350e:	0f 93       	push	r16
    3510:	1f 93       	push	r17
    3512:	cf 93       	push	r28
    3514:	df 93       	push	r29
    3516:	5c 01       	movw	r10, r24
    3518:	d6 2f       	mov	r29, r22
    351a:	d7 2e       	mov	r13, r23
    351c:	14 2f       	mov	r17, r20
    351e:	f2 2e       	mov	r15, r18
    3520:	68 e6       	ldi	r22, 0x68	; 104
    3522:	70 e0       	ldi	r23, 0x00	; 0
    3524:	87 ef       	ldi	r24, 0xF7	; 247
    3526:	95 e0       	ldi	r25, 0x05	; 5
    3528:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_ZN7TwoWire17beginTransmissionEi>
    352c:	60 e0       	ldi	r22, 0x00	; 0
    352e:	70 e0       	ldi	r23, 0x00	; 0
    3530:	87 ef       	ldi	r24, 0xF7	; 247
    3532:	95 e0       	ldi	r25, 0x05	; 5
    3534:	9b df       	rcall	.-202    	; 0x346c <_ZN7TwoWire5writeEi>
    3536:	ca e0       	ldi	r28, 0x0A	; 10
    3538:	8c 2d       	mov	r24, r12
    353a:	6c 2f       	mov	r22, r28
    353c:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <__udivmodqi4>
    3540:	69 2f       	mov	r22, r25
    3542:	20 e1       	ldi	r18, 0x10	; 16
    3544:	82 9f       	mul	r24, r18
    3546:	60 0d       	add	r22, r0
    3548:	11 24       	eor	r1, r1
    354a:	87 ef       	ldi	r24, 0xF7	; 247
    354c:	95 e0       	ldi	r25, 0x05	; 5
    354e:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <_ZN7TwoWire5writeEh>
    3552:	8e 2d       	mov	r24, r14
    3554:	6c 2f       	mov	r22, r28
    3556:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <__udivmodqi4>
    355a:	69 2f       	mov	r22, r25
    355c:	20 e1       	ldi	r18, 0x10	; 16
    355e:	82 9f       	mul	r24, r18
    3560:	60 0d       	add	r22, r0
    3562:	11 24       	eor	r1, r1
    3564:	87 ef       	ldi	r24, 0xF7	; 247
    3566:	95 e0       	ldi	r25, 0x05	; 5
    3568:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <_ZN7TwoWire5writeEh>
    356c:	80 2f       	mov	r24, r16
    356e:	6c 2f       	mov	r22, r28
    3570:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <__udivmodqi4>
    3574:	69 2f       	mov	r22, r25
    3576:	20 e1       	ldi	r18, 0x10	; 16
    3578:	82 9f       	mul	r24, r18
    357a:	60 0d       	add	r22, r0
    357c:	11 24       	eor	r1, r1
    357e:	87 ef       	ldi	r24, 0xF7	; 247
    3580:	95 e0       	ldi	r25, 0x05	; 5
    3582:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <_ZN7TwoWire5writeEh>
    3586:	2f 2d       	mov	r18, r15
    3588:	41 2f       	mov	r20, r17
    358a:	6d 2f       	mov	r22, r29
    358c:	7d 2d       	mov	r23, r13
    358e:	c5 01       	movw	r24, r10
    3590:	82 df       	rcall	.-252    	; 0x3496 <_ZN6DS32313dowEjhh>
    3592:	6c 2f       	mov	r22, r28
    3594:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <__udivmodqi4>
    3598:	69 2f       	mov	r22, r25
    359a:	20 e1       	ldi	r18, 0x10	; 16
    359c:	82 9f       	mul	r24, r18
    359e:	60 0d       	add	r22, r0
    35a0:	11 24       	eor	r1, r1
    35a2:	87 ef       	ldi	r24, 0xF7	; 247
    35a4:	95 e0       	ldi	r25, 0x05	; 5
    35a6:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <_ZN7TwoWire5writeEh>
    35aa:	8f 2d       	mov	r24, r15
    35ac:	6c 2f       	mov	r22, r28
    35ae:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <__udivmodqi4>
    35b2:	69 2f       	mov	r22, r25
    35b4:	20 e1       	ldi	r18, 0x10	; 16
    35b6:	82 9f       	mul	r24, r18
    35b8:	60 0d       	add	r22, r0
    35ba:	11 24       	eor	r1, r1
    35bc:	87 ef       	ldi	r24, 0xF7	; 247
    35be:	95 e0       	ldi	r25, 0x05	; 5
    35c0:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <_ZN7TwoWire5writeEh>
    35c4:	81 2f       	mov	r24, r17
    35c6:	6c 2f       	mov	r22, r28
    35c8:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <__udivmodqi4>
    35cc:	69 2f       	mov	r22, r25
    35ce:	20 e1       	ldi	r18, 0x10	; 16
    35d0:	82 9f       	mul	r24, r18
    35d2:	60 0d       	add	r22, r0
    35d4:	11 24       	eor	r1, r1
    35d6:	87 ef       	ldi	r24, 0xF7	; 247
    35d8:	95 e0       	ldi	r25, 0x05	; 5
    35da:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <_ZN7TwoWire5writeEh>
    35de:	80 e3       	ldi	r24, 0x30	; 48
    35e0:	8d 0f       	add	r24, r29
    35e2:	6c 2f       	mov	r22, r28
    35e4:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <__udivmodqi4>
    35e8:	69 2f       	mov	r22, r25
    35ea:	20 e1       	ldi	r18, 0x10	; 16
    35ec:	82 9f       	mul	r24, r18
    35ee:	60 0d       	add	r22, r0
    35f0:	11 24       	eor	r1, r1
    35f2:	87 ef       	ldi	r24, 0xF7	; 247
    35f4:	95 e0       	ldi	r25, 0x05	; 5
    35f6:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <_ZN7TwoWire5writeEh>
    35fa:	60 e0       	ldi	r22, 0x00	; 0
    35fc:	70 e0       	ldi	r23, 0x00	; 0
    35fe:	87 ef       	ldi	r24, 0xF7	; 247
    3600:	95 e0       	ldi	r25, 0x05	; 5
    3602:	34 df       	rcall	.-408    	; 0x346c <_ZN7TwoWire5writeEi>
    3604:	87 ef       	ldi	r24, 0xF7	; 247
    3606:	95 e0       	ldi	r25, 0x05	; 5
    3608:	df 91       	pop	r29
    360a:	cf 91       	pop	r28
    360c:	1f 91       	pop	r17
    360e:	0f 91       	pop	r16
    3610:	ff 90       	pop	r15
    3612:	ef 90       	pop	r14
    3614:	df 90       	pop	r13
    3616:	cf 90       	pop	r12
    3618:	bf 90       	pop	r11
    361a:	af 90       	pop	r10
    361c:	0c 94 a7 25 	jmp	0x4b4e	; 0x4b4e <_ZN7TwoWire15endTransmissionEv>

00003620 <_ZN6DS323111setDateTimeEPKcS1_>:
    3620:	8f 92       	push	r8
    3622:	9f 92       	push	r9
    3624:	af 92       	push	r10
    3626:	bf 92       	push	r11
    3628:	cf 92       	push	r12
    362a:	df 92       	push	r13
    362c:	ef 92       	push	r14
    362e:	0f 93       	push	r16
    3630:	1f 93       	push	r17
    3632:	cf 93       	push	r28
    3634:	5c 01       	movw	r10, r24
    3636:	8b 01       	movw	r16, r22
    3638:	6a 01       	movw	r12, r20
    363a:	67 5f       	subi	r22, 0xF7	; 247
    363c:	7f 4f       	sbci	r23, 0xFF	; 255
    363e:	1d df       	rcall	.-454    	; 0x347a <_ZN6DS32316conv2dEPKc>
    3640:	88 2e       	mov	r8, r24
    3642:	91 2c       	mov	r9, r1
    3644:	d8 01       	movw	r26, r16
    3646:	ec 91       	ld	r30, X
    3648:	8e 2f       	mov	r24, r30
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	fc 01       	movw	r30, r24
    364e:	e1 54       	subi	r30, 0x41	; 65
    3650:	f1 09       	sbc	r31, r1
    3652:	e3 31       	cpi	r30, 0x13	; 19
    3654:	f1 05       	cpc	r31, r1
    3656:	68 f5       	brcc	.+90     	; 0x36b2 <_ZN6DS323111setDateTimeEPKcS1_+0x92>
    3658:	88 27       	eor	r24, r24
    365a:	e6 58       	subi	r30, 0x86	; 134
    365c:	ff 4f       	sbci	r31, 0xFF	; 255
    365e:	8f 4f       	sbci	r24, 0xFF	; 255
    3660:	0c 94 57 2e 	jmp	0x5cae	; 0x5cae <__tablejump2__>
    3664:	c2 e0       	ldi	r28, 0x02	; 2
    3666:	25 c0       	rjmp	.+74     	; 0x36b2 <_ZN6DS323111setDateTimeEPKcS1_+0x92>
    3668:	f8 01       	movw	r30, r16
    366a:	81 81       	ldd	r24, Z+1	; 0x01
    366c:	81 36       	cpi	r24, 0x61	; 97
    366e:	d1 f0       	breq	.+52     	; 0x36a4 <_ZN6DS323111setDateTimeEPKcS1_+0x84>
    3670:	82 81       	ldd	r24, Z+2	; 0x02
    3672:	8e 36       	cpi	r24, 0x6E	; 110
    3674:	c9 f0       	breq	.+50     	; 0x36a8 <_ZN6DS323111setDateTimeEPKcS1_+0x88>
    3676:	c7 e0       	ldi	r28, 0x07	; 7
    3678:	1c c0       	rjmp	.+56     	; 0x36b2 <_ZN6DS323111setDateTimeEPKcS1_+0x92>
    367a:	d8 01       	movw	r26, r16
    367c:	12 96       	adiw	r26, 0x02	; 2
    367e:	8c 91       	ld	r24, X
    3680:	82 37       	cpi	r24, 0x72	; 114
    3682:	a1 f0       	breq	.+40     	; 0x36ac <_ZN6DS323111setDateTimeEPKcS1_+0x8c>
    3684:	c8 e0       	ldi	r28, 0x08	; 8
    3686:	15 c0       	rjmp	.+42     	; 0x36b2 <_ZN6DS323111setDateTimeEPKcS1_+0x92>
    3688:	f8 01       	movw	r30, r16
    368a:	82 81       	ldd	r24, Z+2	; 0x02
    368c:	82 37       	cpi	r24, 0x72	; 114
    368e:	81 f0       	breq	.+32     	; 0x36b0 <_ZN6DS323111setDateTimeEPKcS1_+0x90>
    3690:	c5 e0       	ldi	r28, 0x05	; 5
    3692:	0f c0       	rjmp	.+30     	; 0x36b2 <_ZN6DS323111setDateTimeEPKcS1_+0x92>
    3694:	c9 e0       	ldi	r28, 0x09	; 9
    3696:	0d c0       	rjmp	.+26     	; 0x36b2 <_ZN6DS323111setDateTimeEPKcS1_+0x92>
    3698:	ca e0       	ldi	r28, 0x0A	; 10
    369a:	0b c0       	rjmp	.+22     	; 0x36b2 <_ZN6DS323111setDateTimeEPKcS1_+0x92>
    369c:	cb e0       	ldi	r28, 0x0B	; 11
    369e:	09 c0       	rjmp	.+18     	; 0x36b2 <_ZN6DS323111setDateTimeEPKcS1_+0x92>
    36a0:	cc e0       	ldi	r28, 0x0C	; 12
    36a2:	07 c0       	rjmp	.+14     	; 0x36b2 <_ZN6DS323111setDateTimeEPKcS1_+0x92>
    36a4:	c1 e0       	ldi	r28, 0x01	; 1
    36a6:	05 c0       	rjmp	.+10     	; 0x36b2 <_ZN6DS323111setDateTimeEPKcS1_+0x92>
    36a8:	c6 e0       	ldi	r28, 0x06	; 6
    36aa:	03 c0       	rjmp	.+6      	; 0x36b2 <_ZN6DS323111setDateTimeEPKcS1_+0x92>
    36ac:	c4 e0       	ldi	r28, 0x04	; 4
    36ae:	01 c0       	rjmp	.+2      	; 0x36b2 <_ZN6DS323111setDateTimeEPKcS1_+0x92>
    36b0:	c3 e0       	ldi	r28, 0x03	; 3
    36b2:	b8 01       	movw	r22, r16
    36b4:	6c 5f       	subi	r22, 0xFC	; 252
    36b6:	7f 4f       	sbci	r23, 0xFF	; 255
    36b8:	c5 01       	movw	r24, r10
    36ba:	df de       	rcall	.-578    	; 0x347a <_ZN6DS32316conv2dEPKc>
    36bc:	18 2f       	mov	r17, r24
    36be:	b6 01       	movw	r22, r12
    36c0:	c5 01       	movw	r24, r10
    36c2:	db de       	rcall	.-586    	; 0x347a <_ZN6DS32316conv2dEPKc>
    36c4:	08 2f       	mov	r16, r24
    36c6:	b6 01       	movw	r22, r12
    36c8:	6d 5f       	subi	r22, 0xFD	; 253
    36ca:	7f 4f       	sbci	r23, 0xFF	; 255
    36cc:	c5 01       	movw	r24, r10
    36ce:	d5 de       	rcall	.-598    	; 0x347a <_ZN6DS32316conv2dEPKc>
    36d0:	e8 2e       	mov	r14, r24
    36d2:	b6 01       	movw	r22, r12
    36d4:	6a 5f       	subi	r22, 0xFA	; 250
    36d6:	7f 4f       	sbci	r23, 0xFF	; 255
    36d8:	c5 01       	movw	r24, r10
    36da:	cf de       	rcall	.-610    	; 0x347a <_ZN6DS32316conv2dEPKc>
    36dc:	b4 01       	movw	r22, r8
    36de:	60 53       	subi	r22, 0x30	; 48
    36e0:	78 4f       	sbci	r23, 0xF8	; 248
    36e2:	c8 2e       	mov	r12, r24
    36e4:	21 2f       	mov	r18, r17
    36e6:	4c 2f       	mov	r20, r28
    36e8:	c5 01       	movw	r24, r10
    36ea:	0b df       	rcall	.-490    	; 0x3502 <_ZN6DS323111setDateTimeEjhhhhh>
    36ec:	cf 91       	pop	r28
    36ee:	1f 91       	pop	r17
    36f0:	0f 91       	pop	r16
    36f2:	ef 90       	pop	r14
    36f4:	df 90       	pop	r13
    36f6:	cf 90       	pop	r12
    36f8:	bf 90       	pop	r11
    36fa:	af 90       	pop	r10
    36fc:	9f 90       	pop	r9
    36fe:	8f 90       	pop	r8
    3700:	08 95       	ret

00003702 <_ZN6DS323114writeRegister8Ehh>:
    3702:	cf 93       	push	r28
    3704:	df 93       	push	r29
    3706:	d6 2f       	mov	r29, r22
    3708:	c4 2f       	mov	r28, r20
    370a:	68 e6       	ldi	r22, 0x68	; 104
    370c:	70 e0       	ldi	r23, 0x00	; 0
    370e:	87 ef       	ldi	r24, 0xF7	; 247
    3710:	95 e0       	ldi	r25, 0x05	; 5
    3712:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_ZN7TwoWire17beginTransmissionEi>
    3716:	6d 2f       	mov	r22, r29
    3718:	87 ef       	ldi	r24, 0xF7	; 247
    371a:	95 e0       	ldi	r25, 0x05	; 5
    371c:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <_ZN7TwoWire5writeEh>
    3720:	6c 2f       	mov	r22, r28
    3722:	87 ef       	ldi	r24, 0xF7	; 247
    3724:	95 e0       	ldi	r25, 0x05	; 5
    3726:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <_ZN7TwoWire5writeEh>
    372a:	87 ef       	ldi	r24, 0xF7	; 247
    372c:	95 e0       	ldi	r25, 0x05	; 5
    372e:	df 91       	pop	r29
    3730:	cf 91       	pop	r28
    3732:	0c 94 a7 25 	jmp	0x4b4e	; 0x4b4e <_ZN7TwoWire15endTransmissionEv>

00003736 <_ZN6DS323113readRegister8Eh>:
    3736:	cf 93       	push	r28
    3738:	c6 2f       	mov	r28, r22
    373a:	68 e6       	ldi	r22, 0x68	; 104
    373c:	70 e0       	ldi	r23, 0x00	; 0
    373e:	87 ef       	ldi	r24, 0xF7	; 247
    3740:	95 e0       	ldi	r25, 0x05	; 5
    3742:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_ZN7TwoWire17beginTransmissionEi>
    3746:	6c 2f       	mov	r22, r28
    3748:	87 ef       	ldi	r24, 0xF7	; 247
    374a:	95 e0       	ldi	r25, 0x05	; 5
    374c:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <_ZN7TwoWire5writeEh>
    3750:	87 ef       	ldi	r24, 0xF7	; 247
    3752:	95 e0       	ldi	r25, 0x05	; 5
    3754:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <_ZN7TwoWire15endTransmissionEv>
    3758:	41 e0       	ldi	r20, 0x01	; 1
    375a:	50 e0       	ldi	r21, 0x00	; 0
    375c:	68 e6       	ldi	r22, 0x68	; 104
    375e:	70 e0       	ldi	r23, 0x00	; 0
    3760:	87 ef       	ldi	r24, 0xF7	; 247
    3762:	95 e0       	ldi	r25, 0x05	; 5
    3764:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <_ZN7TwoWire11requestFromEii>
    3768:	87 ef       	ldi	r24, 0xF7	; 247
    376a:	95 e0       	ldi	r25, 0x05	; 5
    376c:	0e 94 4a 24 	call	0x4894	; 0x4894 <_ZN7TwoWire9availableEv>
    3770:	89 2b       	or	r24, r25
    3772:	d1 f3       	breq	.-12     	; 0x3768 <_ZN6DS323113readRegister8Eh+0x32>
    3774:	87 ef       	ldi	r24, 0xF7	; 247
    3776:	95 e0       	ldi	r25, 0x05	; 5
    3778:	0e 94 52 24 	call	0x48a4	; 0x48a4 <_ZN7TwoWire4readEv>
    377c:	c8 2f       	mov	r28, r24
    377e:	87 ef       	ldi	r24, 0xF7	; 247
    3780:	95 e0       	ldi	r25, 0x05	; 5
    3782:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <_ZN7TwoWire15endTransmissionEv>
    3786:	8c 2f       	mov	r24, r28
    3788:	cf 91       	pop	r28
    378a:	08 95       	ret

0000378c <_ZN6DS323110setBatteryEbb>:
}

void DS3231::setBattery(bool timeBattery, bool squareBattery)
{
    378c:	0f 93       	push	r16
    378e:	1f 93       	push	r17
    3790:	cf 93       	push	r28
    3792:	df 93       	push	r29
    3794:	ec 01       	movw	r28, r24
    3796:	16 2f       	mov	r17, r22
    3798:	04 2f       	mov	r16, r20
    uint8_t value;

    value = readRegister8(DS3231_REG_CONTROL);
    379a:	6e e0       	ldi	r22, 0x0E	; 14
    379c:	cc df       	rcall	.-104    	; 0x3736 <_ZN6DS323113readRegister8Eh>

    if (squareBattery)
    379e:	00 23       	and	r16, r16
    37a0:	11 f0       	breq	.+4      	; 0x37a6 <_ZN6DS323110setBatteryEbb+0x1a>
    {
        value |= 0b01000000;
    37a2:	80 64       	ori	r24, 0x40	; 64
    37a4:	01 c0       	rjmp	.+2      	; 0x37a8 <_ZN6DS323110setBatteryEbb+0x1c>
    } else
    {
        value &= 0b10111111;
    37a6:	8f 7b       	andi	r24, 0xBF	; 191
    }

    if (timeBattery)
    {
        value &= 0b01111011;
    37a8:	48 2f       	mov	r20, r24
    } else
    {
        value &= 0b10111111;
    }

    if (timeBattery)
    37aa:	11 23       	and	r17, r17
    37ac:	11 f0       	breq	.+4      	; 0x37b2 <_ZN6DS323110setBatteryEbb+0x26>
    {
        value &= 0b01111011;
    37ae:	4b 77       	andi	r20, 0x7B	; 123
    37b0:	01 c0       	rjmp	.+2      	; 0x37b4 <_ZN6DS323110setBatteryEbb+0x28>
    } else
    {
        value |= 0b10000000;
    37b2:	40 68       	ori	r20, 0x80	; 128
    }

    writeRegister8(DS3231_REG_CONTROL, value);
    37b4:	6e e0       	ldi	r22, 0x0E	; 14
    37b6:	ce 01       	movw	r24, r28
}
    37b8:	df 91       	pop	r29
    37ba:	cf 91       	pop	r28
    37bc:	1f 91       	pop	r17
    } else
    {
        value |= 0b10000000;
    }

    writeRegister8(DS3231_REG_CONTROL, value);
    37be:	0f 91       	pop	r16
    37c0:	a0 cf       	rjmp	.-192    	; 0x3702 <_ZN6DS323114writeRegister8Ehh>

000037c2 <_ZN6DS32315beginEv>:

const uint8_t daysArray [] PROGMEM = { 31,28,31,30,31,30,31,31,30,31,30,31 };
const uint8_t dowArray[] PROGMEM = { 0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4 };

bool DS3231::begin(void)
{
    37c2:	cf 93       	push	r28
    37c4:	df 93       	push	r29
    37c6:	ec 01       	movw	r28, r24
    Wire.begin();
    37c8:	87 ef       	ldi	r24, 0xF7	; 247
    37ca:	95 e0       	ldi	r25, 0x05	; 5
    37cc:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <_ZN7TwoWire5beginEv>

    setBattery(true, false);
    37d0:	40 e0       	ldi	r20, 0x00	; 0
    37d2:	61 e0       	ldi	r22, 0x01	; 1
    37d4:	ce 01       	movw	r24, r28
    37d6:	da df       	rcall	.-76     	; 0x378c <_ZN6DS323110setBatteryEbb>

    t.year = 2000;
    37d8:	80 ed       	ldi	r24, 0xD0	; 208
    37da:	97 e0       	ldi	r25, 0x07	; 7
    37dc:	99 83       	std	Y+1, r25	; 0x01
    37de:	88 83       	st	Y, r24
    t.month = 1;
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	8a 83       	std	Y+2, r24	; 0x02
    t.day = 1;
    37e4:	8b 83       	std	Y+3, r24	; 0x03
    t.hour = 0;
    37e6:	1c 82       	std	Y+4, r1	; 0x04
    t.minute = 0;
    37e8:	1d 82       	std	Y+5, r1	; 0x05
    t.second = 0;
    37ea:	1e 82       	std	Y+6, r1	; 0x06
    t.dayOfWeek = 6;
    37ec:	86 e0       	ldi	r24, 0x06	; 6
    37ee:	8f 83       	std	Y+7, r24	; 0x07
    t.unixtime = 946681200;
    37f0:	80 e7       	ldi	r24, 0x70	; 112
    37f2:	95 e3       	ldi	r25, 0x35	; 53
    37f4:	ad e6       	ldi	r26, 0x6D	; 109
    37f6:	b8 e3       	ldi	r27, 0x38	; 56
    37f8:	88 87       	std	Y+8, r24	; 0x08
    37fa:	99 87       	std	Y+9, r25	; 0x09
    37fc:	aa 87       	std	Y+10, r26	; 0x0a
    37fe:	bb 87       	std	Y+11, r27	; 0x0b

    return true;
}
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	df 91       	pop	r29
    3804:	cf 91       	pop	r28
    3806:	08 95       	ret

00003808 <_ZN7MPU605013fastRegister8Eh>:
	if (abs(ng.YAxis) < tg.YAxis) ng.YAxis = 0;
	if (abs(ng.ZAxis) < tg.ZAxis) ng.ZAxis = 0;
    }

    return ng;
}
    3808:	1f 93       	push	r17
    380a:	cf 93       	push	r28
    380c:	df 93       	push	r29
    380e:	16 2f       	mov	r17, r22
    3810:	ec 01       	movw	r28, r24
    3812:	c4 59       	subi	r28, 0x94	; 148
    3814:	df 4f       	sbci	r29, 0xFF	; 255
    3816:	68 81       	ld	r22, Y
    3818:	79 81       	ldd	r23, Y+1	; 0x01
    381a:	87 ef       	ldi	r24, 0xF7	; 247
    381c:	95 e0       	ldi	r25, 0x05	; 5
    381e:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_ZN7TwoWire17beginTransmissionEi>
    3822:	61 2f       	mov	r22, r17
    3824:	87 ef       	ldi	r24, 0xF7	; 247
    3826:	95 e0       	ldi	r25, 0x05	; 5
    3828:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <_ZN7TwoWire5writeEh>
    382c:	87 ef       	ldi	r24, 0xF7	; 247
    382e:	95 e0       	ldi	r25, 0x05	; 5
    3830:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <_ZN7TwoWire15endTransmissionEv>
    3834:	68 81       	ld	r22, Y
    3836:	79 81       	ldd	r23, Y+1	; 0x01
    3838:	87 ef       	ldi	r24, 0xF7	; 247
    383a:	95 e0       	ldi	r25, 0x05	; 5
    383c:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_ZN7TwoWire17beginTransmissionEi>
    3840:	68 81       	ld	r22, Y
    3842:	79 81       	ldd	r23, Y+1	; 0x01
    3844:	41 e0       	ldi	r20, 0x01	; 1
    3846:	50 e0       	ldi	r21, 0x00	; 0
    3848:	87 ef       	ldi	r24, 0xF7	; 247
    384a:	95 e0       	ldi	r25, 0x05	; 5
    384c:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <_ZN7TwoWire11requestFromEii>
    3850:	87 ef       	ldi	r24, 0xF7	; 247
    3852:	95 e0       	ldi	r25, 0x05	; 5
    3854:	0e 94 52 24 	call	0x48a4	; 0x48a4 <_ZN7TwoWire4readEv>
    3858:	c8 2f       	mov	r28, r24
    385a:	87 ef       	ldi	r24, 0xF7	; 247
    385c:	95 e0       	ldi	r25, 0x05	; 5
    385e:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <_ZN7TwoWire15endTransmissionEv>
    3862:	8c 2f       	mov	r24, r28
    3864:	df 91       	pop	r29
    3866:	cf 91       	pop	r28
    3868:	1f 91       	pop	r17
    386a:	08 95       	ret

0000386c <_ZN7MPU605013readRegister8Eh>:
    386c:	1f 93       	push	r17
    386e:	cf 93       	push	r28
    3870:	df 93       	push	r29
    3872:	16 2f       	mov	r17, r22
    3874:	ec 01       	movw	r28, r24
    3876:	c4 59       	subi	r28, 0x94	; 148
    3878:	df 4f       	sbci	r29, 0xFF	; 255
    387a:	68 81       	ld	r22, Y
    387c:	79 81       	ldd	r23, Y+1	; 0x01
    387e:	87 ef       	ldi	r24, 0xF7	; 247
    3880:	95 e0       	ldi	r25, 0x05	; 5
    3882:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_ZN7TwoWire17beginTransmissionEi>
    3886:	61 2f       	mov	r22, r17
    3888:	87 ef       	ldi	r24, 0xF7	; 247
    388a:	95 e0       	ldi	r25, 0x05	; 5
    388c:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <_ZN7TwoWire5writeEh>
    3890:	87 ef       	ldi	r24, 0xF7	; 247
    3892:	95 e0       	ldi	r25, 0x05	; 5
    3894:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <_ZN7TwoWire15endTransmissionEv>
    3898:	68 81       	ld	r22, Y
    389a:	79 81       	ldd	r23, Y+1	; 0x01
    389c:	87 ef       	ldi	r24, 0xF7	; 247
    389e:	95 e0       	ldi	r25, 0x05	; 5
    38a0:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_ZN7TwoWire17beginTransmissionEi>
    38a4:	68 81       	ld	r22, Y
    38a6:	79 81       	ldd	r23, Y+1	; 0x01
    38a8:	41 e0       	ldi	r20, 0x01	; 1
    38aa:	50 e0       	ldi	r21, 0x00	; 0
    38ac:	87 ef       	ldi	r24, 0xF7	; 247
    38ae:	95 e0       	ldi	r25, 0x05	; 5
    38b0:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <_ZN7TwoWire11requestFromEii>
    38b4:	87 ef       	ldi	r24, 0xF7	; 247
    38b6:	95 e0       	ldi	r25, 0x05	; 5
    38b8:	ed d7       	rcall	.+4058   	; 0x4894 <_ZN7TwoWire9availableEv>
    38ba:	89 2b       	or	r24, r25
    38bc:	d9 f3       	breq	.-10     	; 0x38b4 <_ZN7MPU605013readRegister8Eh+0x48>
    38be:	87 ef       	ldi	r24, 0xF7	; 247
    38c0:	95 e0       	ldi	r25, 0x05	; 5
    38c2:	f0 d7       	rcall	.+4064   	; 0x48a4 <_ZN7TwoWire4readEv>
    38c4:	c8 2f       	mov	r28, r24
    38c6:	87 ef       	ldi	r24, 0xF7	; 247
    38c8:	95 e0       	ldi	r25, 0x05	; 5
    38ca:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <_ZN7TwoWire15endTransmissionEv>
    38ce:	8c 2f       	mov	r24, r28
    38d0:	df 91       	pop	r29
    38d2:	cf 91       	pop	r28
    38d4:	1f 91       	pop	r17
    38d6:	08 95       	ret

000038d8 <_ZN7MPU60508getScaleEv>:
    38d8:	6b e1       	ldi	r22, 0x1B	; 27
    38da:	c8 df       	rcall	.-112    	; 0x386c <_ZN7MPU605013readRegister8Eh>
    38dc:	88 71       	andi	r24, 0x18	; 24
    38de:	86 95       	lsr	r24
    38e0:	86 95       	lsr	r24
    38e2:	86 95       	lsr	r24
    38e4:	08 95       	ret

000038e6 <_ZN7MPU605014getClockSourceEv>:
    38e6:	6b e6       	ldi	r22, 0x6B	; 107
    38e8:	c1 df       	rcall	.-126    	; 0x386c <_ZN7MPU605013readRegister8Eh>
    38ea:	87 70       	andi	r24, 0x07	; 7
    38ec:	08 95       	ret

000038ee <_ZN7MPU605015readRegisterBitEhh>:
    38ee:	cf 93       	push	r28
    38f0:	c4 2f       	mov	r28, r20
    38f2:	bc df       	rcall	.-136    	; 0x386c <_ZN7MPU605013readRegister8Eh>
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	02 c0       	rjmp	.+4      	; 0x38fc <_ZN7MPU605015readRegisterBitEhh+0xe>
    38f8:	95 95       	asr	r25
    38fa:	87 95       	ror	r24
    38fc:	ca 95       	dec	r28
    38fe:	e2 f7       	brpl	.-8      	; 0x38f8 <_ZN7MPU605015readRegisterBitEhh+0xa>
    3900:	81 70       	andi	r24, 0x01	; 1
    3902:	cf 91       	pop	r28
    3904:	08 95       	ret

00003906 <_ZN7MPU605015getSleepEnabledEv>:
    3906:	46 e0       	ldi	r20, 0x06	; 6
    3908:	6b e6       	ldi	r22, 0x6B	; 107
    390a:	f1 cf       	rjmp	.-30     	; 0x38ee <_ZN7MPU605015readRegisterBitEhh>

0000390c <_ZN7MPU605014writeRegister8Ehh>:
    390c:	cf 93       	push	r28
    390e:	df 93       	push	r29
    3910:	d6 2f       	mov	r29, r22
    3912:	c4 2f       	mov	r28, r20
    3914:	84 59       	subi	r24, 0x94	; 148
    3916:	9f 4f       	sbci	r25, 0xFF	; 255
    3918:	fc 01       	movw	r30, r24
    391a:	60 81       	ld	r22, Z
    391c:	71 81       	ldd	r23, Z+1	; 0x01
    391e:	87 ef       	ldi	r24, 0xF7	; 247
    3920:	95 e0       	ldi	r25, 0x05	; 5
    3922:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_ZN7TwoWire17beginTransmissionEi>
    3926:	6d 2f       	mov	r22, r29
    3928:	87 ef       	ldi	r24, 0xF7	; 247
    392a:	95 e0       	ldi	r25, 0x05	; 5
    392c:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <_ZN7TwoWire5writeEh>
    3930:	6c 2f       	mov	r22, r28
    3932:	87 ef       	ldi	r24, 0xF7	; 247
    3934:	95 e0       	ldi	r25, 0x05	; 5
    3936:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <_ZN7TwoWire5writeEh>
    393a:	87 ef       	ldi	r24, 0xF7	; 247
    393c:	95 e0       	ldi	r25, 0x05	; 5
    393e:	df 91       	pop	r29
    3940:	cf 91       	pop	r28
    3942:	0c 94 a7 25 	jmp	0x4b4e	; 0x4b4e <_ZN7TwoWire15endTransmissionEv>

00003946 <_ZN7MPU60508setScaleE13mpu6050_dps_t>:
    3946:	0f 93       	push	r16
    3948:	1f 93       	push	r17
    394a:	cf 93       	push	r28
    394c:	8c 01       	movw	r16, r24
    394e:	c6 2f       	mov	r28, r22
    3950:	61 30       	cpi	r22, 0x01	; 1
    3952:	79 f0       	breq	.+30     	; 0x3972 <_ZN7MPU60508setScaleE13mpu6050_dps_t+0x2c>
    3954:	48 f0       	brcs	.+18     	; 0x3968 <_ZN7MPU60508setScaleE13mpu6050_dps_t+0x22>
    3956:	62 30       	cpi	r22, 0x02	; 2
    3958:	89 f0       	breq	.+34     	; 0x397c <_ZN7MPU60508setScaleE13mpu6050_dps_t+0x36>
    395a:	63 30       	cpi	r22, 0x03	; 3
    395c:	d1 f4       	brne	.+52     	; 0x3992 <_ZN7MPU60508setScaleE13mpu6050_dps_t+0x4c>
    395e:	8c ee       	ldi	r24, 0xEC	; 236
    3960:	90 ec       	ldi	r25, 0xC0	; 192
    3962:	a9 e7       	ldi	r26, 0x79	; 121
    3964:	bd e3       	ldi	r27, 0x3D	; 61
    3966:	0e c0       	rjmp	.+28     	; 0x3984 <_ZN7MPU60508setScaleE13mpu6050_dps_t+0x3e>
    3968:	8f e3       	ldi	r24, 0x3F	; 63
    396a:	9e e1       	ldi	r25, 0x1E	; 30
    396c:	aa ef       	ldi	r26, 0xFA	; 250
    396e:	bb e3       	ldi	r27, 0x3B	; 59
    3970:	09 c0       	rjmp	.+18     	; 0x3984 <_ZN7MPU60508setScaleE13mpu6050_dps_t+0x3e>
    3972:	80 e7       	ldi	r24, 0x70	; 112
    3974:	92 e2       	ldi	r25, 0x22	; 34
    3976:	aa e7       	ldi	r26, 0x7A	; 122
    3978:	bc e3       	ldi	r27, 0x3C	; 60
    397a:	04 c0       	rjmp	.+8      	; 0x3984 <_ZN7MPU60508setScaleE13mpu6050_dps_t+0x3e>
    397c:	8f ed       	ldi	r24, 0xDF	; 223
    397e:	9f eb       	ldi	r25, 0xBF	; 191
    3980:	a9 ef       	ldi	r26, 0xF9	; 249
    3982:	bc e3       	ldi	r27, 0x3C	; 60
    3984:	f8 01       	movw	r30, r16
    3986:	e1 5a       	subi	r30, 0xA1	; 161
    3988:	ff 4f       	sbci	r31, 0xFF	; 255
    398a:	80 83       	st	Z, r24
    398c:	91 83       	std	Z+1, r25	; 0x01
    398e:	a2 83       	std	Z+2, r26	; 0x02
    3990:	b3 83       	std	Z+3, r27	; 0x03
    3992:	6b e1       	ldi	r22, 0x1B	; 27
    3994:	c8 01       	movw	r24, r16
    3996:	6a df       	rcall	.-300    	; 0x386c <_ZN7MPU605013readRegister8Eh>
    3998:	98 e0       	ldi	r25, 0x08	; 8
    399a:	c9 9f       	mul	r28, r25
    399c:	b0 01       	movw	r22, r0
    399e:	11 24       	eor	r1, r1
    39a0:	87 7e       	andi	r24, 0xE7	; 231
    39a2:	48 2f       	mov	r20, r24
    39a4:	46 2b       	or	r20, r22
    39a6:	6b e1       	ldi	r22, 0x1B	; 27
    39a8:	c8 01       	movw	r24, r16
    39aa:	cf 91       	pop	r28
    39ac:	1f 91       	pop	r17
    39ae:	0f 91       	pop	r16
    39b0:	ad cf       	rjmp	.-166    	; 0x390c <_ZN7MPU605014writeRegister8Ehh>

000039b2 <_ZN7MPU60508setRangeE15mpu6050_range_t>:
    39b2:	0f 93       	push	r16
    39b4:	1f 93       	push	r17
    39b6:	cf 93       	push	r28
    39b8:	8c 01       	movw	r16, r24
    39ba:	c6 2f       	mov	r28, r22
    39bc:	61 30       	cpi	r22, 0x01	; 1
    39be:	79 f0       	breq	.+30     	; 0x39de <_ZN7MPU60508setRangeE15mpu6050_range_t+0x2c>
    39c0:	48 f0       	brcs	.+18     	; 0x39d4 <_ZN7MPU60508setRangeE15mpu6050_range_t+0x22>
    39c2:	62 30       	cpi	r22, 0x02	; 2
    39c4:	89 f0       	breq	.+34     	; 0x39e8 <_ZN7MPU60508setRangeE15mpu6050_range_t+0x36>
    39c6:	63 30       	cpi	r22, 0x03	; 3
    39c8:	d1 f4       	brne	.+52     	; 0x39fe <_ZN7MPU60508setRangeE15mpu6050_range_t+0x4c>
    39ca:	88 e1       	ldi	r24, 0x18	; 24
    39cc:	95 ef       	ldi	r25, 0xF5	; 245
    39ce:	af ef       	ldi	r26, 0xFF	; 255
    39d0:	b9 e3       	ldi	r27, 0x39	; 57
    39d2:	0e c0       	rjmp	.+28     	; 0x39f0 <_ZN7MPU60508setRangeE15mpu6050_range_t+0x3e>
    39d4:	80 e4       	ldi	r24, 0x40	; 64
    39d6:	9a ed       	ldi	r25, 0xDA	; 218
    39d8:	af e7       	ldi	r26, 0x7F	; 127
    39da:	b8 e3       	ldi	r27, 0x38	; 56
    39dc:	09 c0       	rjmp	.+18     	; 0x39f0 <_ZN7MPU60508setRangeE15mpu6050_range_t+0x3e>
    39de:	80 e4       	ldi	r24, 0x40	; 64
    39e0:	9a ed       	ldi	r25, 0xDA	; 218
    39e2:	af ef       	ldi	r26, 0xFF	; 255
    39e4:	b8 e3       	ldi	r27, 0x38	; 56
    39e6:	04 c0       	rjmp	.+8      	; 0x39f0 <_ZN7MPU60508setRangeE15mpu6050_range_t+0x3e>
    39e8:	80 e4       	ldi	r24, 0x40	; 64
    39ea:	9a ed       	ldi	r25, 0xDA	; 218
    39ec:	af e7       	ldi	r26, 0x7F	; 127
    39ee:	b9 e3       	ldi	r27, 0x39	; 57
    39f0:	f8 01       	movw	r30, r16
    39f2:	ed 59       	subi	r30, 0x9D	; 157
    39f4:	ff 4f       	sbci	r31, 0xFF	; 255
    39f6:	80 83       	st	Z, r24
    39f8:	91 83       	std	Z+1, r25	; 0x01
    39fa:	a2 83       	std	Z+2, r26	; 0x02
    39fc:	b3 83       	std	Z+3, r27	; 0x03
    39fe:	6c e1       	ldi	r22, 0x1C	; 28
    3a00:	c8 01       	movw	r24, r16
    3a02:	34 df       	rcall	.-408    	; 0x386c <_ZN7MPU605013readRegister8Eh>
    3a04:	98 e0       	ldi	r25, 0x08	; 8
    3a06:	c9 9f       	mul	r28, r25
    3a08:	b0 01       	movw	r22, r0
    3a0a:	11 24       	eor	r1, r1
    3a0c:	87 7e       	andi	r24, 0xE7	; 231
    3a0e:	48 2f       	mov	r20, r24
    3a10:	46 2b       	or	r20, r22
    3a12:	6c e1       	ldi	r22, 0x1C	; 28
    3a14:	c8 01       	movw	r24, r16
    3a16:	cf 91       	pop	r28
    3a18:	1f 91       	pop	r17
    3a1a:	0f 91       	pop	r16
    3a1c:	77 cf       	rjmp	.-274    	; 0x390c <_ZN7MPU605014writeRegister8Ehh>

00003a1e <_ZN7MPU605014setClockSourceE21mpu6050_clockSource_t>:
    3a1e:	0f 93       	push	r16
    3a20:	1f 93       	push	r17
    3a22:	cf 93       	push	r28
    3a24:	8c 01       	movw	r16, r24
    3a26:	c6 2f       	mov	r28, r22
    3a28:	6b e6       	ldi	r22, 0x6B	; 107
    3a2a:	20 df       	rcall	.-448    	; 0x386c <_ZN7MPU605013readRegister8Eh>
    3a2c:	88 7f       	andi	r24, 0xF8	; 248
    3a2e:	48 2f       	mov	r20, r24
    3a30:	4c 2b       	or	r20, r28
    3a32:	6b e6       	ldi	r22, 0x6B	; 107
    3a34:	c8 01       	movw	r24, r16
    3a36:	cf 91       	pop	r28
    3a38:	1f 91       	pop	r17
    3a3a:	0f 91       	pop	r16
    3a3c:	67 cf       	rjmp	.-306    	; 0x390c <_ZN7MPU605014writeRegister8Ehh>

00003a3e <_ZN7MPU605016writeRegisterBitEhhb>:
    3a3e:	ff 92       	push	r15
    3a40:	0f 93       	push	r16
    3a42:	1f 93       	push	r17
    3a44:	cf 93       	push	r28
    3a46:	df 93       	push	r29
    3a48:	ec 01       	movw	r28, r24
    3a4a:	16 2f       	mov	r17, r22
    3a4c:	04 2f       	mov	r16, r20
    3a4e:	f2 2e       	mov	r15, r18
    3a50:	0d df       	rcall	.-486    	; 0x386c <_ZN7MPU605013readRegister8Eh>
    3a52:	41 e0       	ldi	r20, 0x01	; 1
    3a54:	50 e0       	ldi	r21, 0x00	; 0
    3a56:	01 c0       	rjmp	.+2      	; 0x3a5a <_ZN7MPU605016writeRegisterBitEhhb+0x1c>
    3a58:	44 0f       	add	r20, r20
    3a5a:	0a 95       	dec	r16
    3a5c:	ea f7       	brpl	.-6      	; 0x3a58 <_ZN7MPU605016writeRegisterBitEhhb+0x1a>
    3a5e:	ff 20       	and	r15, r15
    3a60:	11 f0       	breq	.+4      	; 0x3a66 <_ZN7MPU605016writeRegisterBitEhhb+0x28>
    3a62:	48 2b       	or	r20, r24
    3a64:	02 c0       	rjmp	.+4      	; 0x3a6a <_ZN7MPU605016writeRegisterBitEhhb+0x2c>
    3a66:	40 95       	com	r20
    3a68:	48 23       	and	r20, r24
    3a6a:	61 2f       	mov	r22, r17
    3a6c:	ce 01       	movw	r24, r28
    3a6e:	df 91       	pop	r29
    3a70:	cf 91       	pop	r28
    3a72:	1f 91       	pop	r17
    3a74:	0f 91       	pop	r16
    3a76:	ff 90       	pop	r15
    3a78:	49 cf       	rjmp	.-366    	; 0x390c <_ZN7MPU605014writeRegister8Ehh>

00003a7a <_ZN7MPU605015setSleepEnabledEb>:
    3a7a:	26 2f       	mov	r18, r22
    3a7c:	46 e0       	ldi	r20, 0x06	; 6
    3a7e:	6b e6       	ldi	r22, 0x6B	; 107
    3a80:	de cf       	rjmp	.-68     	; 0x3a3e <_ZN7MPU605016writeRegisterBitEhhb>

00003a82 <_ZN7MPU60505beginE13mpu6050_dps_t15mpu6050_range_ti>:
    3a82:	0f 93       	push	r16
    3a84:	1f 93       	push	r17
    3a86:	cf 93       	push	r28
    3a88:	df 93       	push	r29
    3a8a:	ec 01       	movw	r28, r24
    3a8c:	06 2f       	mov	r16, r22
    3a8e:	14 2f       	mov	r17, r20
    3a90:	fc 01       	movw	r30, r24
    3a92:	e4 59       	subi	r30, 0x94	; 148
    3a94:	ff 4f       	sbci	r31, 0xFF	; 255
    3a96:	31 83       	std	Z+1, r19	; 0x01
    3a98:	20 83       	st	Z, r18
    3a9a:	87 ef       	ldi	r24, 0xF7	; 247
    3a9c:	95 e0       	ldi	r25, 0x05	; 5
    3a9e:	c6 d7       	rcall	.+3980   	; 0x4a2c <_ZN7TwoWire5beginEv>
    3aa0:	1c ae       	std	Y+60, r1	; 0x3c
    3aa2:	1d ae       	std	Y+61, r1	; 0x3d
    3aa4:	1e ae       	std	Y+62, r1	; 0x3e
    3aa6:	1f ae       	std	Y+63, r1	; 0x3f
    3aa8:	fe 01       	movw	r30, r28
    3aaa:	e0 5c       	subi	r30, 0xC0	; 192
    3aac:	ff 4f       	sbci	r31, 0xFF	; 255
    3aae:	10 82       	st	Z, r1
    3ab0:	11 82       	std	Z+1, r1	; 0x01
    3ab2:	12 82       	std	Z+2, r1	; 0x02
    3ab4:	13 82       	std	Z+3, r1	; 0x03
    3ab6:	34 96       	adiw	r30, 0x04	; 4
    3ab8:	10 82       	st	Z, r1
    3aba:	11 82       	std	Z+1, r1	; 0x01
    3abc:	12 82       	std	Z+2, r1	; 0x02
    3abe:	13 82       	std	Z+3, r1	; 0x03
    3ac0:	b7 96       	adiw	r30, 0x27	; 39
    3ac2:	10 82       	st	Z, r1
    3ac4:	18 aa       	std	Y+48, r1	; 0x30
    3ac6:	19 aa       	std	Y+49, r1	; 0x31
    3ac8:	1a aa       	std	Y+50, r1	; 0x32
    3aca:	1b aa       	std	Y+51, r1	; 0x33
    3acc:	1c aa       	std	Y+52, r1	; 0x34
    3ace:	1d aa       	std	Y+53, r1	; 0x35
    3ad0:	1e aa       	std	Y+54, r1	; 0x36
    3ad2:	1f aa       	std	Y+55, r1	; 0x37
    3ad4:	18 ae       	std	Y+56, r1	; 0x38
    3ad6:	19 ae       	std	Y+57, r1	; 0x39
    3ad8:	1a ae       	std	Y+58, r1	; 0x3a
    3ada:	1b ae       	std	Y+59, r1	; 0x3b
    3adc:	34 97       	sbiw	r30, 0x04	; 4
    3ade:	10 82       	st	Z, r1
    3ae0:	11 82       	std	Z+1, r1	; 0x01
    3ae2:	12 82       	std	Z+2, r1	; 0x02
    3ae4:	13 82       	std	Z+3, r1	; 0x03
    3ae6:	65 e7       	ldi	r22, 0x75	; 117
    3ae8:	ce 01       	movw	r24, r28
    3aea:	8e de       	rcall	.-740    	; 0x3808 <_ZN7MPU605013fastRegister8Eh>
    3aec:	88 36       	cpi	r24, 0x68	; 104
    3aee:	71 f4       	brne	.+28     	; 0x3b0c <_ZN7MPU60505beginE13mpu6050_dps_t15mpu6050_range_ti+0x8a>
    3af0:	61 e0       	ldi	r22, 0x01	; 1
    3af2:	ce 01       	movw	r24, r28
    3af4:	94 df       	rcall	.-216    	; 0x3a1e <_ZN7MPU605014setClockSourceE21mpu6050_clockSource_t>
    3af6:	60 2f       	mov	r22, r16
    3af8:	ce 01       	movw	r24, r28
    3afa:	25 df       	rcall	.-438    	; 0x3946 <_ZN7MPU60508setScaleE13mpu6050_dps_t>
    3afc:	61 2f       	mov	r22, r17
    3afe:	ce 01       	movw	r24, r28
    3b00:	58 df       	rcall	.-336    	; 0x39b2 <_ZN7MPU60508setRangeE15mpu6050_range_t>
    3b02:	60 e0       	ldi	r22, 0x00	; 0
    3b04:	ce 01       	movw	r24, r28
    3b06:	b9 df       	rcall	.-142    	; 0x3a7a <_ZN7MPU605015setSleepEnabledEb>
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	01 c0       	rjmp	.+2      	; 0x3b0e <_ZN7MPU60505beginE13mpu6050_dps_t15mpu6050_range_ti+0x8c>
    3b0c:	80 e0       	ldi	r24, 0x00	; 0
    3b0e:	df 91       	pop	r29
    3b10:	cf 91       	pop	r28
    3b12:	1f 91       	pop	r17
    3b14:	0f 91       	pop	r16
    3b16:	08 95       	ret

00003b18 <_ZN7MPU605014readRegister16Eh>:
    3b18:	ff 92       	push	r15
    3b1a:	0f 93       	push	r16
    3b1c:	1f 93       	push	r17
    3b1e:	cf 93       	push	r28
    3b20:	df 93       	push	r29
    3b22:	f6 2e       	mov	r15, r22
    3b24:	ec 01       	movw	r28, r24
    3b26:	c4 59       	subi	r28, 0x94	; 148
    3b28:	df 4f       	sbci	r29, 0xFF	; 255
    3b2a:	68 81       	ld	r22, Y
    3b2c:	79 81       	ldd	r23, Y+1	; 0x01
    3b2e:	87 ef       	ldi	r24, 0xF7	; 247
    3b30:	95 e0       	ldi	r25, 0x05	; 5
    3b32:	98 d7       	rcall	.+3888   	; 0x4a64 <_ZN7TwoWire17beginTransmissionEi>
    3b34:	6f 2d       	mov	r22, r15
    3b36:	87 ef       	ldi	r24, 0xF7	; 247
    3b38:	95 e0       	ldi	r25, 0x05	; 5
    3b3a:	3a d7       	rcall	.+3700   	; 0x49b0 <_ZN7TwoWire5writeEh>
    3b3c:	87 ef       	ldi	r24, 0xF7	; 247
    3b3e:	95 e0       	ldi	r25, 0x05	; 5
    3b40:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <_ZN7TwoWire15endTransmissionEv>
    3b44:	68 81       	ld	r22, Y
    3b46:	79 81       	ldd	r23, Y+1	; 0x01
    3b48:	87 ef       	ldi	r24, 0xF7	; 247
    3b4a:	95 e0       	ldi	r25, 0x05	; 5
    3b4c:	8b d7       	rcall	.+3862   	; 0x4a64 <_ZN7TwoWire17beginTransmissionEi>
    3b4e:	68 81       	ld	r22, Y
    3b50:	79 81       	ldd	r23, Y+1	; 0x01
    3b52:	42 e0       	ldi	r20, 0x02	; 2
    3b54:	50 e0       	ldi	r21, 0x00	; 0
    3b56:	87 ef       	ldi	r24, 0xF7	; 247
    3b58:	95 e0       	ldi	r25, 0x05	; 5
    3b5a:	f7 d7       	rcall	.+4078   	; 0x4b4a <_ZN7TwoWire11requestFromEii>
    3b5c:	87 ef       	ldi	r24, 0xF7	; 247
    3b5e:	95 e0       	ldi	r25, 0x05	; 5
    3b60:	99 d6       	rcall	.+3378   	; 0x4894 <_ZN7TwoWire9availableEv>
    3b62:	89 2b       	or	r24, r25
    3b64:	d9 f3       	breq	.-10     	; 0x3b5c <_ZN7MPU605014readRegister16Eh+0x44>
    3b66:	87 ef       	ldi	r24, 0xF7	; 247
    3b68:	95 e0       	ldi	r25, 0x05	; 5
    3b6a:	9c d6       	rcall	.+3384   	; 0x48a4 <_ZN7TwoWire4readEv>
    3b6c:	d8 2f       	mov	r29, r24
    3b6e:	87 ef       	ldi	r24, 0xF7	; 247
    3b70:	95 e0       	ldi	r25, 0x05	; 5
    3b72:	98 d6       	rcall	.+3376   	; 0x48a4 <_ZN7TwoWire4readEv>
    3b74:	c8 2f       	mov	r28, r24
    3b76:	87 ef       	ldi	r24, 0xF7	; 247
    3b78:	95 e0       	ldi	r25, 0x05	; 5
    3b7a:	e9 d7       	rcall	.+4050   	; 0x4b4e <_ZN7TwoWire15endTransmissionEv>
    3b7c:	1d 2f       	mov	r17, r29
    3b7e:	00 e0       	ldi	r16, 0x00	; 0
    3b80:	c8 01       	movw	r24, r16
    3b82:	8c 2b       	or	r24, r28
    3b84:	df 91       	pop	r29
    3b86:	cf 91       	pop	r28
    3b88:	1f 91       	pop	r17
    3b8a:	0f 91       	pop	r16
    3b8c:	ff 90       	pop	r15
    3b8e:	08 95       	ret

00003b90 <_ZN7MPU605014getGyroOffsetXEv>:
    3b90:	63 e1       	ldi	r22, 0x13	; 19
    3b92:	c2 cf       	rjmp	.-124    	; 0x3b18 <_ZN7MPU605014readRegister16Eh>

00003b94 <_ZN7MPU605014getGyroOffsetYEv>:
    3b94:	65 e1       	ldi	r22, 0x15	; 21
    3b96:	c0 cf       	rjmp	.-128    	; 0x3b18 <_ZN7MPU605014readRegister16Eh>

00003b98 <_ZN7MPU605014getGyroOffsetZEv>:
    3b98:	67 e1       	ldi	r22, 0x17	; 23
    3b9a:	be cf       	rjmp	.-132    	; 0x3b18 <_ZN7MPU605014readRegister16Eh>

00003b9c <_ZN7MPU605011readRawGyroEv>:
    3b9c:	4f 92       	push	r4
    3b9e:	5f 92       	push	r5
    3ba0:	6f 92       	push	r6
    3ba2:	7f 92       	push	r7
    3ba4:	8f 92       	push	r8
    3ba6:	9f 92       	push	r9
    3ba8:	af 92       	push	r10
    3baa:	bf 92       	push	r11
    3bac:	cf 92       	push	r12
    3bae:	df 92       	push	r13
    3bb0:	ef 92       	push	r14
    3bb2:	ff 92       	push	r15
    3bb4:	0f 93       	push	r16
    3bb6:	1f 93       	push	r17
    3bb8:	cf 93       	push	r28
    3bba:	df 93       	push	r29
    3bbc:	4c 01       	movw	r8, r24
    3bbe:	6b 01       	movw	r12, r22
    3bc0:	5b 01       	movw	r10, r22
    3bc2:	8c e6       	ldi	r24, 0x6C	; 108
    3bc4:	a8 0e       	add	r10, r24
    3bc6:	b1 1c       	adc	r11, r1
    3bc8:	f5 01       	movw	r30, r10
    3bca:	60 81       	ld	r22, Z
    3bcc:	71 81       	ldd	r23, Z+1	; 0x01
    3bce:	87 ef       	ldi	r24, 0xF7	; 247
    3bd0:	95 e0       	ldi	r25, 0x05	; 5
    3bd2:	48 d7       	rcall	.+3728   	; 0x4a64 <_ZN7TwoWire17beginTransmissionEi>
    3bd4:	63 e4       	ldi	r22, 0x43	; 67
    3bd6:	87 ef       	ldi	r24, 0xF7	; 247
    3bd8:	95 e0       	ldi	r25, 0x05	; 5
    3bda:	ea d6       	rcall	.+3540   	; 0x49b0 <_ZN7TwoWire5writeEh>
    3bdc:	87 ef       	ldi	r24, 0xF7	; 247
    3bde:	95 e0       	ldi	r25, 0x05	; 5
    3be0:	b6 d7       	rcall	.+3948   	; 0x4b4e <_ZN7TwoWire15endTransmissionEv>
    3be2:	f5 01       	movw	r30, r10
    3be4:	60 81       	ld	r22, Z
    3be6:	71 81       	ldd	r23, Z+1	; 0x01
    3be8:	87 ef       	ldi	r24, 0xF7	; 247
    3bea:	95 e0       	ldi	r25, 0x05	; 5
    3bec:	3b d7       	rcall	.+3702   	; 0x4a64 <_ZN7TwoWire17beginTransmissionEi>
    3bee:	f5 01       	movw	r30, r10
    3bf0:	60 81       	ld	r22, Z
    3bf2:	71 81       	ldd	r23, Z+1	; 0x01
    3bf4:	46 e0       	ldi	r20, 0x06	; 6
    3bf6:	50 e0       	ldi	r21, 0x00	; 0
    3bf8:	87 ef       	ldi	r24, 0xF7	; 247
    3bfa:	95 e0       	ldi	r25, 0x05	; 5
    3bfc:	a6 d7       	rcall	.+3916   	; 0x4b4a <_ZN7TwoWire11requestFromEii>
    3bfe:	87 ef       	ldi	r24, 0xF7	; 247
    3c00:	95 e0       	ldi	r25, 0x05	; 5
    3c02:	48 d6       	rcall	.+3216   	; 0x4894 <_ZN7TwoWire9availableEv>
    3c04:	06 97       	sbiw	r24, 0x06	; 6
    3c06:	dc f3       	brlt	.-10     	; 0x3bfe <_ZN7MPU605011readRawGyroEv+0x62>
    3c08:	87 ef       	ldi	r24, 0xF7	; 247
    3c0a:	95 e0       	ldi	r25, 0x05	; 5
    3c0c:	4b d6       	rcall	.+3222   	; 0x48a4 <_ZN7TwoWire4readEv>
    3c0e:	48 2e       	mov	r4, r24
    3c10:	87 ef       	ldi	r24, 0xF7	; 247
    3c12:	95 e0       	ldi	r25, 0x05	; 5
    3c14:	47 d6       	rcall	.+3214   	; 0x48a4 <_ZN7TwoWire4readEv>
    3c16:	58 2e       	mov	r5, r24
    3c18:	87 ef       	ldi	r24, 0xF7	; 247
    3c1a:	95 e0       	ldi	r25, 0x05	; 5
    3c1c:	43 d6       	rcall	.+3206   	; 0x48a4 <_ZN7TwoWire4readEv>
    3c1e:	68 2e       	mov	r6, r24
    3c20:	87 ef       	ldi	r24, 0xF7	; 247
    3c22:	95 e0       	ldi	r25, 0x05	; 5
    3c24:	3f d6       	rcall	.+3198   	; 0x48a4 <_ZN7TwoWire4readEv>
    3c26:	78 2e       	mov	r7, r24
    3c28:	87 ef       	ldi	r24, 0xF7	; 247
    3c2a:	95 e0       	ldi	r25, 0x05	; 5
    3c2c:	3b d6       	rcall	.+3190   	; 0x48a4 <_ZN7TwoWire4readEv>
    3c2e:	a8 2e       	mov	r10, r24
    3c30:	87 ef       	ldi	r24, 0xF7	; 247
    3c32:	95 e0       	ldi	r25, 0x05	; 5
    3c34:	37 d6       	rcall	.+3182   	; 0x48a4 <_ZN7TwoWire4readEv>
    3c36:	b8 2e       	mov	r11, r24
    3c38:	f4 2c       	mov	r15, r4
    3c3a:	e1 2c       	mov	r14, r1
    3c3c:	b7 01       	movw	r22, r14
    3c3e:	65 29       	or	r22, r5
    3c40:	07 2e       	mov	r0, r23
    3c42:	00 0c       	add	r0, r0
    3c44:	88 0b       	sbc	r24, r24
    3c46:	99 0b       	sbc	r25, r25
    3c48:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <__floatsisf>
    3c4c:	f6 01       	movw	r30, r12
    3c4e:	64 87       	std	Z+12, r22	; 0x0c
    3c50:	75 87       	std	Z+13, r23	; 0x0d
    3c52:	86 87       	std	Z+14, r24	; 0x0e
    3c54:	97 87       	std	Z+15, r25	; 0x0f
    3c56:	16 2d       	mov	r17, r6
    3c58:	00 e0       	ldi	r16, 0x00	; 0
    3c5a:	b8 01       	movw	r22, r16
    3c5c:	67 29       	or	r22, r7
    3c5e:	07 2e       	mov	r0, r23
    3c60:	00 0c       	add	r0, r0
    3c62:	88 0b       	sbc	r24, r24
    3c64:	99 0b       	sbc	r25, r25
    3c66:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <__floatsisf>
    3c6a:	f6 01       	movw	r30, r12
    3c6c:	60 8b       	std	Z+16, r22	; 0x10
    3c6e:	71 8b       	std	Z+17, r23	; 0x11
    3c70:	82 8b       	std	Z+18, r24	; 0x12
    3c72:	93 8b       	std	Z+19, r25	; 0x13
    3c74:	da 2d       	mov	r29, r10
    3c76:	f0 e0       	ldi	r31, 0x00	; 0
    3c78:	cf 2f       	mov	r28, r31
    3c7a:	cb 29       	or	r28, r11
    3c7c:	be 01       	movw	r22, r28
    3c7e:	dd 0f       	add	r29, r29
    3c80:	88 0b       	sbc	r24, r24
    3c82:	99 0b       	sbc	r25, r25
    3c84:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <__floatsisf>
    3c88:	f6 01       	movw	r30, r12
    3c8a:	64 8b       	std	Z+20, r22	; 0x14
    3c8c:	75 8b       	std	Z+21, r23	; 0x15
    3c8e:	86 8b       	std	Z+22, r24	; 0x16
    3c90:	97 8b       	std	Z+23, r25	; 0x17
    3c92:	8c e0       	ldi	r24, 0x0C	; 12
    3c94:	3c 96       	adiw	r30, 0x0c	; 12
    3c96:	d4 01       	movw	r26, r8
    3c98:	01 90       	ld	r0, Z+
    3c9a:	0d 92       	st	X+, r0
    3c9c:	8a 95       	dec	r24
    3c9e:	e1 f7       	brne	.-8      	; 0x3c98 <_ZN7MPU605011readRawGyroEv+0xfc>
    3ca0:	c4 01       	movw	r24, r8
    3ca2:	df 91       	pop	r29
    3ca4:	cf 91       	pop	r28
    3ca6:	1f 91       	pop	r17
    3ca8:	0f 91       	pop	r16
    3caa:	ff 90       	pop	r15
    3cac:	ef 90       	pop	r14
    3cae:	df 90       	pop	r13
    3cb0:	cf 90       	pop	r12
    3cb2:	bf 90       	pop	r11
    3cb4:	af 90       	pop	r10
    3cb6:	9f 90       	pop	r9
    3cb8:	8f 90       	pop	r8
    3cba:	7f 90       	pop	r7
    3cbc:	6f 90       	pop	r6
    3cbe:	5f 90       	pop	r5
    3cc0:	4f 90       	pop	r4
    3cc2:	08 95       	ret

00003cc4 <_ZN7MPU605013calibrateGyroEh>:
    writeRegister16(MPU6050_REG_ACCEL_ZOFFS_H, offset);
}

// Calibrate algorithm
void MPU6050::calibrateGyro(uint8_t samples)
{
    3cc4:	2f 92       	push	r2
    3cc6:	3f 92       	push	r3
    3cc8:	4f 92       	push	r4
    3cca:	5f 92       	push	r5
    3ccc:	6f 92       	push	r6
    3cce:	7f 92       	push	r7
    3cd0:	8f 92       	push	r8
    3cd2:	9f 92       	push	r9
    3cd4:	af 92       	push	r10
    3cd6:	bf 92       	push	r11
    3cd8:	cf 92       	push	r12
    3cda:	df 92       	push	r13
    3cdc:	ef 92       	push	r14
    3cde:	ff 92       	push	r15
    3ce0:	0f 93       	push	r16
    3ce2:	1f 93       	push	r17
    3ce4:	cf 93       	push	r28
    3ce6:	df 93       	push	r29
    3ce8:	cd b7       	in	r28, 0x3d	; 61
    3cea:	de b7       	in	r29, 0x3e	; 62
    3cec:	a4 97       	sbiw	r28, 0x24	; 36
    3cee:	0f b6       	in	r0, 0x3f	; 63
    3cf0:	f8 94       	cli
    3cf2:	de bf       	out	0x3e, r29	; 62
    3cf4:	0f be       	out	0x3f, r0	; 63
    3cf6:	cd bf       	out	0x3d, r28	; 61
    3cf8:	8c 01       	movw	r16, r24
    3cfa:	26 2e       	mov	r2, r22
    // Set calibrate
    useCalibrate = true;
    3cfc:	fc 01       	movw	r30, r24
    3cfe:	e5 59       	subi	r30, 0x95	; 149
    3d00:	ff 4f       	sbci	r31, 0xFF	; 255
    3d02:	81 e0       	ldi	r24, 0x01	; 1
    3d04:	80 83       	st	Z, r24
    float sigmaX = 0;
    float sigmaY = 0;
    float sigmaZ = 0;

    // Read n-samples
    for (uint8_t i = 0; i < samples; ++i)
    3d06:	31 2c       	mov	r3, r1
    float sumX = 0;
    float sumY = 0;
    float sumZ = 0;
    float sigmaX = 0;
    float sigmaY = 0;
    float sigmaZ = 0;
    3d08:	19 8e       	std	Y+25, r1	; 0x19
    3d0a:	1a 8e       	std	Y+26, r1	; 0x1a
    3d0c:	1b 8e       	std	Y+27, r1	; 0x1b
    3d0e:	1c 8e       	std	Y+28, r1	; 0x1c
    // Reset values
    float sumX = 0;
    float sumY = 0;
    float sumZ = 0;
    float sigmaX = 0;
    float sigmaY = 0;
    3d10:	1d 8a       	std	Y+21, r1	; 0x15
    3d12:	1e 8a       	std	Y+22, r1	; 0x16
    3d14:	1f 8a       	std	Y+23, r1	; 0x17
    3d16:	18 8e       	std	Y+24, r1	; 0x18

    // Reset values
    float sumX = 0;
    float sumY = 0;
    float sumZ = 0;
    float sigmaX = 0;
    3d18:	19 8a       	std	Y+17, r1	; 0x11
    3d1a:	1a 8a       	std	Y+18, r1	; 0x12
    3d1c:	1b 8a       	std	Y+19, r1	; 0x13
    3d1e:	1c 8a       	std	Y+20, r1	; 0x14
    useCalibrate = true;

    // Reset values
    float sumX = 0;
    float sumY = 0;
    float sumZ = 0;
    3d20:	1d 86       	std	Y+13, r1	; 0x0d
    3d22:	1e 86       	std	Y+14, r1	; 0x0e
    3d24:	1f 86       	std	Y+15, r1	; 0x0f
    3d26:	18 8a       	std	Y+16, r1	; 0x10
    // Set calibrate
    useCalibrate = true;

    // Reset values
    float sumX = 0;
    float sumY = 0;
    3d28:	81 2c       	mov	r8, r1
    3d2a:	91 2c       	mov	r9, r1
    3d2c:	54 01       	movw	r10, r8
{
    // Set calibrate
    useCalibrate = true;

    // Reset values
    float sumX = 0;
    3d2e:	24 01       	movw	r4, r8
    3d30:	35 01       	movw	r6, r10
    float sigmaX = 0;
    float sigmaY = 0;
    float sigmaZ = 0;

    // Read n-samples
    for (uint8_t i = 0; i < samples; ++i)
    3d32:	32 14       	cp	r3, r2
    3d34:	09 f4       	brne	.+2      	; 0x3d38 <_ZN7MPU605013calibrateGyroEh+0x74>
    3d36:	79 c0       	rjmp	.+242    	; 0x3e2a <_ZN7MPU605013calibrateGyroEh+0x166>
    {
	readRawGyro();
    3d38:	b8 01       	movw	r22, r16
    3d3a:	ce 01       	movw	r24, r28
    3d3c:	01 96       	adiw	r24, 0x01	; 1
    3d3e:	2e df       	rcall	.-420    	; 0x3b9c <_ZN7MPU605011readRawGyroEv>
	sumX += rg.XAxis;
    3d40:	d8 01       	movw	r26, r16
    3d42:	1c 96       	adiw	r26, 0x0c	; 12
    3d44:	cd 90       	ld	r12, X+
    3d46:	dd 90       	ld	r13, X+
    3d48:	ed 90       	ld	r14, X+
    3d4a:	fc 90       	ld	r15, X
    3d4c:	1f 97       	sbiw	r26, 0x0f	; 15
    3d4e:	a7 01       	movw	r20, r14
    3d50:	96 01       	movw	r18, r12
    3d52:	c3 01       	movw	r24, r6
    3d54:	b2 01       	movw	r22, r4
    3d56:	01 d7       	rcall	.+3586   	; 0x4b5a <__addsf3>
    3d58:	2b 01       	movw	r4, r22
    3d5a:	3c 01       	movw	r6, r24
	sumY += rg.YAxis;
    3d5c:	d8 01       	movw	r26, r16
    3d5e:	50 96       	adiw	r26, 0x10	; 16
    3d60:	8d 91       	ld	r24, X+
    3d62:	9d 91       	ld	r25, X+
    3d64:	0d 90       	ld	r0, X+
    3d66:	bc 91       	ld	r27, X
    3d68:	a0 2d       	mov	r26, r0
    3d6a:	8d 8f       	std	Y+29, r24	; 0x1d
    3d6c:	9e 8f       	std	Y+30, r25	; 0x1e
    3d6e:	af 8f       	std	Y+31, r26	; 0x1f
    3d70:	b8 a3       	std	Y+32, r27	; 0x20
    3d72:	9c 01       	movw	r18, r24
    3d74:	ad 01       	movw	r20, r26
    3d76:	c5 01       	movw	r24, r10
    3d78:	b4 01       	movw	r22, r8
    3d7a:	ef d6       	rcall	.+3550   	; 0x4b5a <__addsf3>
    3d7c:	4b 01       	movw	r8, r22
    3d7e:	5c 01       	movw	r10, r24
	sumZ += rg.ZAxis;
    3d80:	d8 01       	movw	r26, r16
    3d82:	54 96       	adiw	r26, 0x14	; 20
    3d84:	8d 91       	ld	r24, X+
    3d86:	9d 91       	ld	r25, X+
    3d88:	0d 90       	ld	r0, X+
    3d8a:	bc 91       	ld	r27, X
    3d8c:	a0 2d       	mov	r26, r0
    3d8e:	89 a3       	std	Y+33, r24	; 0x21
    3d90:	9a a3       	std	Y+34, r25	; 0x22
    3d92:	ab a3       	std	Y+35, r26	; 0x23
    3d94:	bc a3       	std	Y+36, r27	; 0x24
    3d96:	9c 01       	movw	r18, r24
    3d98:	ad 01       	movw	r20, r26
    3d9a:	6d 85       	ldd	r22, Y+13	; 0x0d
    3d9c:	7e 85       	ldd	r23, Y+14	; 0x0e
    3d9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3da0:	98 89       	ldd	r25, Y+16	; 0x10
    3da2:	db d6       	rcall	.+3510   	; 0x4b5a <__addsf3>
    3da4:	6d 87       	std	Y+13, r22	; 0x0d
    3da6:	7e 87       	std	Y+14, r23	; 0x0e
    3da8:	8f 87       	std	Y+15, r24	; 0x0f
    3daa:	98 8b       	std	Y+16, r25	; 0x10

	sigmaX += rg.XAxis * rg.XAxis;
    3dac:	a7 01       	movw	r20, r14
    3dae:	96 01       	movw	r18, r12
    3db0:	c7 01       	movw	r24, r14
    3db2:	b6 01       	movw	r22, r12
    3db4:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    3db8:	9b 01       	movw	r18, r22
    3dba:	ac 01       	movw	r20, r24
    3dbc:	69 89       	ldd	r22, Y+17	; 0x11
    3dbe:	7a 89       	ldd	r23, Y+18	; 0x12
    3dc0:	8b 89       	ldd	r24, Y+19	; 0x13
    3dc2:	9c 89       	ldd	r25, Y+20	; 0x14
    3dc4:	ca d6       	rcall	.+3476   	; 0x4b5a <__addsf3>
    3dc6:	69 8b       	std	Y+17, r22	; 0x11
    3dc8:	7a 8b       	std	Y+18, r23	; 0x12
    3dca:	8b 8b       	std	Y+19, r24	; 0x13
    3dcc:	9c 8b       	std	Y+20, r25	; 0x14
	sigmaY += rg.YAxis * rg.YAxis;
    3dce:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3dd0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3dd2:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3dd4:	58 a1       	ldd	r21, Y+32	; 0x20
    3dd6:	ca 01       	movw	r24, r20
    3dd8:	b9 01       	movw	r22, r18
    3dda:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    3dde:	9b 01       	movw	r18, r22
    3de0:	ac 01       	movw	r20, r24
    3de2:	6d 89       	ldd	r22, Y+21	; 0x15
    3de4:	7e 89       	ldd	r23, Y+22	; 0x16
    3de6:	8f 89       	ldd	r24, Y+23	; 0x17
    3de8:	98 8d       	ldd	r25, Y+24	; 0x18
    3dea:	b7 d6       	rcall	.+3438   	; 0x4b5a <__addsf3>
    3dec:	6d 8b       	std	Y+21, r22	; 0x15
    3dee:	7e 8b       	std	Y+22, r23	; 0x16
    3df0:	8f 8b       	std	Y+23, r24	; 0x17
    3df2:	98 8f       	std	Y+24, r25	; 0x18
	sigmaZ += rg.ZAxis * rg.ZAxis;
    3df4:	29 a1       	ldd	r18, Y+33	; 0x21
    3df6:	3a a1       	ldd	r19, Y+34	; 0x22
    3df8:	4b a1       	ldd	r20, Y+35	; 0x23
    3dfa:	5c a1       	ldd	r21, Y+36	; 0x24
    3dfc:	ca 01       	movw	r24, r20
    3dfe:	b9 01       	movw	r22, r18
    3e00:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    3e04:	9b 01       	movw	r18, r22
    3e06:	ac 01       	movw	r20, r24
    3e08:	69 8d       	ldd	r22, Y+25	; 0x19
    3e0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e10:	a4 d6       	rcall	.+3400   	; 0x4b5a <__addsf3>
    3e12:	69 8f       	std	Y+25, r22	; 0x19
    3e14:	7a 8f       	std	Y+26, r23	; 0x1a
    3e16:	8b 8f       	std	Y+27, r24	; 0x1b
    3e18:	9c 8f       	std	Y+28, r25	; 0x1c

	delay(5);
    3e1a:	65 e0       	ldi	r22, 0x05	; 5
    3e1c:	70 e0       	ldi	r23, 0x00	; 0
    3e1e:	80 e0       	ldi	r24, 0x00	; 0
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	0e 94 ab 2c 	call	0x5956	; 0x5956 <delay>
    float sigmaX = 0;
    float sigmaY = 0;
    float sigmaZ = 0;

    // Read n-samples
    for (uint8_t i = 0; i < samples; ++i)
    3e26:	33 94       	inc	r3

	delay(5);
    }

    // Calculate delta vectors
    dg.XAxis = sumX / samples;
    3e28:	84 cf       	rjmp	.-248    	; 0x3d32 <_ZN7MPU605013calibrateGyroEh+0x6e>
    3e2a:	63 2d       	mov	r22, r3
    3e2c:	70 e0       	ldi	r23, 0x00	; 0
    3e2e:	80 e0       	ldi	r24, 0x00	; 0
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	91 d7       	rcall	.+3874   	; 0x4d56 <__floatsisf>
    3e34:	6b 01       	movw	r12, r22
    3e36:	7c 01       	movw	r14, r24
    3e38:	9b 01       	movw	r18, r22
    3e3a:	ac 01       	movw	r20, r24
    3e3c:	c3 01       	movw	r24, r6
    3e3e:	b2 01       	movw	r22, r4
    3e40:	f4 d6       	rcall	.+3560   	; 0x4c2a <__divsf3>
    3e42:	2b 01       	movw	r4, r22
    3e44:	3c 01       	movw	r6, r24
    3e46:	f8 01       	movw	r30, r16
    3e48:	64 af       	std	Z+60, r22	; 0x3c
    3e4a:	75 af       	std	Z+61, r23	; 0x3d
    3e4c:	86 af       	std	Z+62, r24	; 0x3e
    dg.YAxis = sumY / samples;
    3e4e:	97 af       	std	Z+63, r25	; 0x3f
    3e50:	a7 01       	movw	r20, r14
    3e52:	96 01       	movw	r18, r12
    3e54:	c5 01       	movw	r24, r10
    3e56:	b4 01       	movw	r22, r8
    3e58:	e8 d6       	rcall	.+3536   	; 0x4c2a <__divsf3>
    3e5a:	4b 01       	movw	r8, r22
    3e5c:	5c 01       	movw	r10, r24
    3e5e:	f8 01       	movw	r30, r16
    3e60:	e0 5c       	subi	r30, 0xC0	; 192
    3e62:	ff 4f       	sbci	r31, 0xFF	; 255
    3e64:	60 83       	st	Z, r22
    3e66:	71 83       	std	Z+1, r23	; 0x01
    3e68:	82 83       	std	Z+2, r24	; 0x02
    dg.ZAxis = sumZ / samples;
    3e6a:	93 83       	std	Z+3, r25	; 0x03
    3e6c:	a7 01       	movw	r20, r14
    3e6e:	96 01       	movw	r18, r12
    3e70:	6d 85       	ldd	r22, Y+13	; 0x0d
    3e72:	7e 85       	ldd	r23, Y+14	; 0x0e
    3e74:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e76:	98 89       	ldd	r25, Y+16	; 0x10
    3e78:	d8 d6       	rcall	.+3504   	; 0x4c2a <__divsf3>
    3e7a:	6b 01       	movw	r12, r22
    3e7c:	7c 01       	movw	r14, r24
    3e7e:	f8 01       	movw	r30, r16
    3e80:	ec 5b       	subi	r30, 0xBC	; 188
    3e82:	ff 4f       	sbci	r31, 0xFF	; 255
    3e84:	60 83       	st	Z, r22
    3e86:	71 83       	std	Z+1, r23	; 0x01
    3e88:	82 83       	std	Z+2, r24	; 0x02

    // Calculate threshold vectors
    th.XAxis = sqrt((sigmaX / 50) - (dg.XAxis * dg.XAxis));
    3e8a:	93 83       	std	Z+3, r25	; 0x03
    3e8c:	20 e0       	ldi	r18, 0x00	; 0
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	48 e4       	ldi	r20, 0x48	; 72
    3e92:	52 e4       	ldi	r21, 0x42	; 66
    3e94:	69 89       	ldd	r22, Y+17	; 0x11
    3e96:	7a 89       	ldd	r23, Y+18	; 0x12
    3e98:	8b 89       	ldd	r24, Y+19	; 0x13
    3e9a:	9c 89       	ldd	r25, Y+20	; 0x14
    3e9c:	c6 d6       	rcall	.+3468   	; 0x4c2a <__divsf3>
    3e9e:	6d 87       	std	Y+13, r22	; 0x0d
    3ea0:	7e 87       	std	Y+14, r23	; 0x0e
    3ea2:	8f 87       	std	Y+15, r24	; 0x0f
    3ea4:	98 8b       	std	Y+16, r25	; 0x10
    3ea6:	a3 01       	movw	r20, r6
    3ea8:	92 01       	movw	r18, r4
    3eaa:	c3 01       	movw	r24, r6
    3eac:	b2 01       	movw	r22, r4
    3eae:	0e 94 5f 27 	call	0x4ebe	; 0x4ebe <__mulsf3>
    3eb2:	9b 01       	movw	r18, r22
    3eb4:	ac 01       	movw	r20, r24
    3eb6:	6d 85       	ldd	r22, Y+13	; 0x0d
    3eb8:	7e 85       	ldd	r23, Y+14	; 0x0e
    3eba:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ebc:	98 89       	ldd	r25, Y+16	; 0x10
    3ebe:	4c d6       	rcall	.+3224   	; 0x4b58 <__subsf3>
    3ec0:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <sqrt>
    3ec4:	f8 01       	movw	r30, r16
    3ec6:	e8 5b       	subi	r30, 0xB8	; 184
    3ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eca:	60 83       	st	Z, r22
    3ecc:	71 83       	std	Z+1, r23	; 0x01
    3ece:	82 83       	std	Z+2, r24	; 0x02
    th.YAxis = sqrt((sigmaY / 50) - (dg.YAxis * dg.YAxis));
    3ed0:	93 83       	std	Z+3, r25	; 0x03
    3ed2:	20 e0       	ldi	r18, 0x00	; 0
    3ed4:	30 e0       	ldi	r19, 0x00	; 0
    3ed6:	48 e4       	ldi	r20, 0x48	; 72
    3ed8:	52 e4       	ldi	r21, 0x42	; 66
    3eda:	6d 89       	ldd	r22, Y+21	; 0x15
    3edc:	7e 89       	ldd	r23, Y+22	; 0x16
    3ede:	8f 89       	ldd	r24, Y+23	; 0x17
    3ee0:	98 8d       	ldd	r25, Y+24	; 0x18
    3ee2:	a3 d6       	rcall	.+3398   	; 0x4c2a <__divsf3>
    3ee4:	2b 01       	movw	r4, r22
    3ee6:	3c 01       	movw	r6, r24
    3ee8:	a5 01       	movw	r20, r10
    3eea:	94 01       	movw	r18, r8
    3eec:	c5 01       	movw	r24, r10
    3eee:	b4 01       	movw	r22, r8
    3ef0:	e6 d7       	rcall	.+4044   	; 0x4ebe <__mulsf3>
    3ef2:	9b 01       	movw	r18, r22
    3ef4:	ac 01       	movw	r20, r24
    3ef6:	c3 01       	movw	r24, r6
    3ef8:	b2 01       	movw	r22, r4
    3efa:	2e d6       	rcall	.+3164   	; 0x4b58 <__subsf3>
    3efc:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <sqrt>
    3f00:	f8 01       	movw	r30, r16
    3f02:	e4 5b       	subi	r30, 0xB4	; 180
    3f04:	ff 4f       	sbci	r31, 0xFF	; 255
    3f06:	60 83       	st	Z, r22
    3f08:	71 83       	std	Z+1, r23	; 0x01
    3f0a:	82 83       	std	Z+2, r24	; 0x02
    th.ZAxis = sqrt((sigmaZ / 50) - (dg.ZAxis * dg.ZAxis));
    3f0c:	93 83       	std	Z+3, r25	; 0x03
    3f0e:	20 e0       	ldi	r18, 0x00	; 0
    3f10:	30 e0       	ldi	r19, 0x00	; 0
    3f12:	48 e4       	ldi	r20, 0x48	; 72
    3f14:	52 e4       	ldi	r21, 0x42	; 66
    3f16:	69 8d       	ldd	r22, Y+25	; 0x19
    3f18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f1e:	85 d6       	rcall	.+3338   	; 0x4c2a <__divsf3>
    3f20:	4b 01       	movw	r8, r22
    3f22:	5c 01       	movw	r10, r24
    3f24:	a7 01       	movw	r20, r14
    3f26:	96 01       	movw	r18, r12
    3f28:	c7 01       	movw	r24, r14
    3f2a:	b6 01       	movw	r22, r12
    3f2c:	c8 d7       	rcall	.+3984   	; 0x4ebe <__mulsf3>
    3f2e:	9b 01       	movw	r18, r22
    3f30:	ac 01       	movw	r20, r24
    3f32:	c5 01       	movw	r24, r10
    3f34:	b4 01       	movw	r22, r8
    3f36:	10 d6       	rcall	.+3104   	; 0x4b58 <__subsf3>
    3f38:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <sqrt>
    3f3c:	f8 01       	movw	r30, r16
    3f3e:	e0 5b       	subi	r30, 0xB0	; 176
    3f40:	ff 4f       	sbci	r31, 0xFF	; 255
    3f42:	60 83       	st	Z, r22
    3f44:	71 83       	std	Z+1, r23	; 0x01
    3f46:	82 83       	std	Z+2, r24	; 0x02
    3f48:	93 83       	std	Z+3, r25	; 0x03

    // If already set threshold, recalculate threshold vectors
    if (actualThreshold > 0)
    3f4a:	77 96       	adiw	r30, 0x17	; 23
    3f4c:	c0 80       	ld	r12, Z
    3f4e:	d1 80       	ldd	r13, Z+1	; 0x01
    3f50:	e2 80       	ldd	r14, Z+2	; 0x02
    3f52:	f3 80       	ldd	r15, Z+3	; 0x03
    3f54:	20 e0       	ldi	r18, 0x00	; 0
    3f56:	30 e0       	ldi	r19, 0x00	; 0
    3f58:	a9 01       	movw	r20, r18
    3f5a:	c7 01       	movw	r24, r14
    3f5c:	b6 01       	movw	r22, r12
    3f5e:	ab d7       	rcall	.+3926   	; 0x4eb6 <__gesf2>
    3f60:	18 16       	cp	r1, r24
    3f62:	ec f4       	brge	.+58     	; 0x3f9e <_ZN7MPU605013calibrateGyroEh+0x2da>
    3f64:	c7 01       	movw	r24, r14
    {
	setThreshold(actualThreshold);
    3f66:	b6 01       	movw	r22, r12
    3f68:	c8 d6       	rcall	.+3472   	; 0x4cfa <__fixunssfsi>
    3f6a:	c8 01       	movw	r24, r16
    3f6c:	a4 96       	adiw	r28, 0x24	; 36
    3f6e:	0f b6       	in	r0, 0x3f	; 63
    }
}
    3f70:	f8 94       	cli
    3f72:	de bf       	out	0x3e, r29	; 62
    3f74:	0f be       	out	0x3f, r0	; 63
    3f76:	cd bf       	out	0x3d, r28	; 61
    3f78:	df 91       	pop	r29
    3f7a:	cf 91       	pop	r28
    3f7c:	1f 91       	pop	r17
    3f7e:	0f 91       	pop	r16
    3f80:	ff 90       	pop	r15
    3f82:	ef 90       	pop	r14
    3f84:	df 90       	pop	r13
    3f86:	cf 90       	pop	r12
    3f88:	bf 90       	pop	r11
    3f8a:	af 90       	pop	r10
    3f8c:	9f 90       	pop	r9
    3f8e:	8f 90       	pop	r8
    3f90:	7f 90       	pop	r7
    3f92:	6f 90       	pop	r6
    3f94:	5f 90       	pop	r5
    3f96:	4f 90       	pop	r4
    3f98:	3f 90       	pop	r3
    3f9a:	2f 90       	pop	r2
    3f9c:	19 c0       	rjmp	.+50     	; 0x3fd0 <_ZN7MPU605012setThresholdEh>
    th.ZAxis = sqrt((sigmaZ / 50) - (dg.ZAxis * dg.ZAxis));

    // If already set threshold, recalculate threshold vectors
    if (actualThreshold > 0)
    {
	setThreshold(actualThreshold);
    3f9e:	a4 96       	adiw	r28, 0x24	; 36
    3fa0:	0f b6       	in	r0, 0x3f	; 63
    }
}
    3fa2:	f8 94       	cli
    3fa4:	de bf       	out	0x3e, r29	; 62
    3fa6:	0f be       	out	0x3f, r0	; 63
    3fa8:	cd bf       	out	0x3d, r28	; 61
    3faa:	df 91       	pop	r29
    3fac:	cf 91       	pop	r28
    3fae:	1f 91       	pop	r17
    3fb0:	0f 91       	pop	r16
    3fb2:	ff 90       	pop	r15
    3fb4:	ef 90       	pop	r14
    3fb6:	df 90       	pop	r13
    3fb8:	cf 90       	pop	r12
    3fba:	bf 90       	pop	r11
    3fbc:	af 90       	pop	r10
    3fbe:	9f 90       	pop	r9
    3fc0:	8f 90       	pop	r8
    3fc2:	7f 90       	pop	r7
    3fc4:	6f 90       	pop	r6
    3fc6:	5f 90       	pop	r5
    3fc8:	4f 90       	pop	r4
    3fca:	3f 90       	pop	r3
    3fcc:	2f 90       	pop	r2
    3fce:	08 95       	ret

00003fd0 <_ZN7MPU605012setThresholdEh>:
    3fd0:	cf 92       	push	r12
    3fd2:	df 92       	push	r13
    return actualThreshold;
}

// Set treshold value
void MPU6050::setThreshold(uint8_t multiple)
{
    3fd4:	ef 92       	push	r14
    3fd6:	ff 92       	push	r15
    3fd8:	1f 93       	push	r17
    3fda:	cf 93       	push	r28
    3fdc:	df 93       	push	r29
    3fde:	ec 01       	movw	r28, r24
    3fe0:	16 2f       	mov	r17, r22
    if (multiple > 0)
    3fe2:	66 23       	and	r22, r22
    3fe4:	09 f4       	brne	.+2      	; 0x3fe8 <_ZN7MPU605012setThresholdEh+0x18>
    3fe6:	3b c0       	rjmp	.+118    	; 0x405e <_ZN7MPU605012setThresholdEh+0x8e>
    {
	// If not calibrated, need calibrate
	if (!useCalibrate)
    3fe8:	fc 01       	movw	r30, r24
    3fea:	e5 59       	subi	r30, 0x95	; 149
    3fec:	ff 4f       	sbci	r31, 0xFF	; 255
    3fee:	80 81       	ld	r24, Z
    3ff0:	81 11       	cpse	r24, r1
    3ff2:	03 c0       	rjmp	.+6      	; 0x3ffa <_ZN7MPU605012setThresholdEh+0x2a>
	{
	    calibrateGyro();
    3ff4:	62 e3       	ldi	r22, 0x32	; 50
    3ff6:	ce 01       	movw	r24, r28
    3ff8:	65 de       	rcall	.-822    	; 0x3cc4 <_ZN7MPU605013calibrateGyroEh>
	}

	// Calculate threshold vectors
	tg.XAxis = th.XAxis * multiple;
    3ffa:	61 2f       	mov	r22, r17
    3ffc:	70 e0       	ldi	r23, 0x00	; 0
    3ffe:	80 e0       	ldi	r24, 0x00	; 0
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	a9 d6       	rcall	.+3410   	; 0x4d56 <__floatsisf>
    4004:	6b 01       	movw	r12, r22
    4006:	7c 01       	movw	r14, r24
    4008:	9b 01       	movw	r18, r22
    400a:	ac 01       	movw	r20, r24
    400c:	fe 01       	movw	r30, r28
    400e:	e8 5b       	subi	r30, 0xB8	; 184
    4010:	ff 4f       	sbci	r31, 0xFF	; 255
    4012:	60 81       	ld	r22, Z
    4014:	71 81       	ldd	r23, Z+1	; 0x01
    4016:	82 81       	ldd	r24, Z+2	; 0x02
    4018:	93 81       	ldd	r25, Z+3	; 0x03
    401a:	51 d7       	rcall	.+3746   	; 0x4ebe <__mulsf3>
    401c:	68 ab       	std	Y+48, r22	; 0x30
    401e:	79 ab       	std	Y+49, r23	; 0x31
    4020:	8a ab       	std	Y+50, r24	; 0x32
    4022:	9b ab       	std	Y+51, r25	; 0x33
	tg.YAxis = th.YAxis * multiple;
    4024:	a7 01       	movw	r20, r14
    4026:	96 01       	movw	r18, r12
    4028:	fe 01       	movw	r30, r28
    402a:	e4 5b       	subi	r30, 0xB4	; 180
    402c:	ff 4f       	sbci	r31, 0xFF	; 255
    402e:	60 81       	ld	r22, Z
    4030:	71 81       	ldd	r23, Z+1	; 0x01
    4032:	82 81       	ldd	r24, Z+2	; 0x02
    4034:	93 81       	ldd	r25, Z+3	; 0x03
    4036:	43 d7       	rcall	.+3718   	; 0x4ebe <__mulsf3>
    4038:	6c ab       	std	Y+52, r22	; 0x34
    403a:	7d ab       	std	Y+53, r23	; 0x35
    403c:	8e ab       	std	Y+54, r24	; 0x36
    403e:	9f ab       	std	Y+55, r25	; 0x37
	tg.ZAxis = th.ZAxis * multiple;
    4040:	a7 01       	movw	r20, r14
    4042:	96 01       	movw	r18, r12
    4044:	fe 01       	movw	r30, r28
    4046:	e0 5b       	subi	r30, 0xB0	; 176
    4048:	ff 4f       	sbci	r31, 0xFF	; 255
    404a:	60 81       	ld	r22, Z
    404c:	71 81       	ldd	r23, Z+1	; 0x01
    404e:	82 81       	ldd	r24, Z+2	; 0x02
    4050:	93 81       	ldd	r25, Z+3	; 0x03
    4052:	35 d7       	rcall	.+3690   	; 0x4ebe <__mulsf3>
    4054:	68 af       	std	Y+56, r22	; 0x38
    4056:	79 af       	std	Y+57, r23	; 0x39
    4058:	8a af       	std	Y+58, r24	; 0x3a
    405a:	9b af       	std	Y+59, r25	; 0x3b
    405c:	0c c0       	rjmp	.+24     	; 0x4076 <_ZN7MPU605012setThresholdEh+0xa6>
    } else
    {
	// No threshold
	tg.XAxis = 0;
    405e:	18 aa       	std	Y+48, r1	; 0x30
    4060:	19 aa       	std	Y+49, r1	; 0x31
    4062:	1a aa       	std	Y+50, r1	; 0x32
    4064:	1b aa       	std	Y+51, r1	; 0x33
	tg.YAxis = 0;
    4066:	1c aa       	std	Y+52, r1	; 0x34
    4068:	1d aa       	std	Y+53, r1	; 0x35
    406a:	1e aa       	std	Y+54, r1	; 0x36
    406c:	1f aa       	std	Y+55, r1	; 0x37
	tg.ZAxis = 0;
    406e:	18 ae       	std	Y+56, r1	; 0x38
    4070:	19 ae       	std	Y+57, r1	; 0x39
    4072:	1a ae       	std	Y+58, r1	; 0x3a
    4074:	1b ae       	std	Y+59, r1	; 0x3b
    }

    // Remember old threshold value
    actualThreshold = multiple;
    4076:	c9 59       	subi	r28, 0x99	; 153
    4078:	df 4f       	sbci	r29, 0xFF	; 255
    407a:	61 2f       	mov	r22, r17
    407c:	70 e0       	ldi	r23, 0x00	; 0
    407e:	80 e0       	ldi	r24, 0x00	; 0
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	67 d6       	rcall	.+3278   	; 0x4d52 <__floatunsisf>
    4084:	68 83       	st	Y, r22
    4086:	79 83       	std	Y+1, r23	; 0x01
    4088:	8a 83       	std	Y+2, r24	; 0x02
    408a:	9b 83       	std	Y+3, r25	; 0x03
}
    408c:	df 91       	pop	r29
    408e:	cf 91       	pop	r28
    4090:	1f 91       	pop	r17
    4092:	ff 90       	pop	r15
    4094:	ef 90       	pop	r14
    4096:	df 90       	pop	r13
    4098:	cf 90       	pop	r12
    409a:	08 95       	ret

0000409c <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    409c:	cf 93       	push	r28
  uint8_t sreg = SREG;
    409e:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    40a0:	f8 94       	cli
  if (!initialized) {
    40a2:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <_ZN8SPIClass11initializedE>
    40a6:	81 11       	cpse	r24, r1
    40a8:	27 c0       	rjmp	.+78     	; 0x40f8 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    40aa:	eb e0       	ldi	r30, 0x0B	; 11
    40ac:	fc e0       	ldi	r31, 0x0C	; 12
    40ae:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    40b0:	e5 ec       	ldi	r30, 0xC5	; 197
    40b2:	fb e0       	ldi	r31, 0x0B	; 11
    40b4:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    40b6:	e8 2f       	mov	r30, r24
    40b8:	f0 e0       	ldi	r31, 0x00	; 0
    40ba:	ee 0f       	add	r30, r30
    40bc:	ff 1f       	adc	r31, r31
    40be:	e0 5b       	subi	r30, 0xB0	; 176
    40c0:	f3 4f       	sbci	r31, 0xF3	; 243
    40c2:	a5 91       	lpm	r26, Z+
    40c4:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    40c6:	ec 91       	ld	r30, X
    40c8:	e9 23       	and	r30, r25
    40ca:	21 f4       	brne	.+8      	; 0x40d4 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    40cc:	61 e0       	ldi	r22, 0x01	; 1
    40ce:	85 e3       	ldi	r24, 0x35	; 53
    40d0:	0e 94 e2 2d 	call	0x5bc4	; 0x5bc4 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    40d4:	61 e0       	ldi	r22, 0x01	; 1
    40d6:	85 e3       	ldi	r24, 0x35	; 53
    40d8:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    40dc:	8c b5       	in	r24, 0x2c	; 44
    40de:	80 61       	ori	r24, 0x10	; 16
    40e0:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    40e2:	8c b5       	in	r24, 0x2c	; 44
    40e4:	80 64       	ori	r24, 0x40	; 64
    40e6:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    40e8:	61 e0       	ldi	r22, 0x01	; 1
    40ea:	84 e3       	ldi	r24, 0x34	; 52
    40ec:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <pinMode>
    pinMode(MOSI, OUTPUT);
    40f0:	61 e0       	ldi	r22, 0x01	; 1
    40f2:	83 e3       	ldi	r24, 0x33	; 51
    40f4:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <pinMode>
  }
  initialized++; // reference count
    40f8:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <_ZN8SPIClass11initializedE>
    40fc:	8f 5f       	subi	r24, 0xFF	; 255
    40fe:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    4102:	cf bf       	out	0x3f, r28	; 63
}
    4104:	cf 91       	pop	r28
    4106:	08 95       	ret

00004108 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    4108:	10 92 f6 05 	sts	0x05F6, r1	; 0x8005f6 <twi_state>
    410c:	81 e0       	ldi	r24, 0x01	; 1
    410e:	80 93 f4 05 	sts	0x05F4, r24	; 0x8005f4 <twi_sendStop>
    4112:	10 92 f3 05 	sts	0x05F3, r1	; 0x8005f3 <twi_inRepStart>
    4116:	61 e0       	ldi	r22, 0x01	; 1
    4118:	84 e1       	ldi	r24, 0x14	; 20
    411a:	0e 94 e2 2d 	call	0x5bc4	; 0x5bc4 <digitalWrite>
    411e:	61 e0       	ldi	r22, 0x01	; 1
    4120:	85 e1       	ldi	r24, 0x15	; 21
    4122:	0e 94 e2 2d 	call	0x5bc4	; 0x5bc4 <digitalWrite>
    4126:	e9 eb       	ldi	r30, 0xB9	; 185
    4128:	f0 e0       	ldi	r31, 0x00	; 0
    412a:	80 81       	ld	r24, Z
    412c:	8e 7f       	andi	r24, 0xFE	; 254
    412e:	80 83       	st	Z, r24
    4130:	80 81       	ld	r24, Z
    4132:	8d 7f       	andi	r24, 0xFD	; 253
    4134:	80 83       	st	Z, r24
    4136:	88 e4       	ldi	r24, 0x48	; 72
    4138:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    413c:	85 e4       	ldi	r24, 0x45	; 69
    413e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4142:	08 95       	ret

00004144 <twi_disable>:
    4144:	ec eb       	ldi	r30, 0xBC	; 188
    4146:	f0 e0       	ldi	r31, 0x00	; 0
    4148:	80 81       	ld	r24, Z
    414a:	8a 7b       	andi	r24, 0xBA	; 186
    414c:	80 83       	st	Z, r24
    414e:	60 e0       	ldi	r22, 0x00	; 0
    4150:	84 e1       	ldi	r24, 0x14	; 20
    4152:	0e 94 e2 2d 	call	0x5bc4	; 0x5bc4 <digitalWrite>
    4156:	60 e0       	ldi	r22, 0x00	; 0
    4158:	85 e1       	ldi	r24, 0x15	; 21
    415a:	0c 94 e2 2d 	jmp	0x5bc4	; 0x5bc4 <digitalWrite>

0000415e <twi_setFrequency>:
    415e:	9b 01       	movw	r18, r22
    4160:	ac 01       	movw	r20, r24
    4162:	60 e0       	ldi	r22, 0x00	; 0
    4164:	74 e2       	ldi	r23, 0x24	; 36
    4166:	84 ef       	ldi	r24, 0xF4	; 244
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
    416e:	da 01       	movw	r26, r20
    4170:	c9 01       	movw	r24, r18
    4172:	40 97       	sbiw	r24, 0x10	; 16
    4174:	a1 09       	sbc	r26, r1
    4176:	b1 09       	sbc	r27, r1
    4178:	b6 95       	lsr	r27
    417a:	a7 95       	ror	r26
    417c:	97 95       	ror	r25
    417e:	87 95       	ror	r24
    4180:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4184:	08 95       	ret

00004186 <twi_transmit>:
    4186:	40 91 a5 05 	lds	r20, 0x05A5	; 0x8005a5 <twi_txBufferLength>
    418a:	26 2f       	mov	r18, r22
    418c:	30 e0       	ldi	r19, 0x00	; 0
    418e:	24 0f       	add	r18, r20
    4190:	31 1d       	adc	r19, r1
    4192:	21 32       	cpi	r18, 0x21	; 33
    4194:	31 05       	cpc	r19, r1
    4196:	dc f4       	brge	.+54     	; 0x41ce <twi_transmit+0x48>
    4198:	20 91 f6 05 	lds	r18, 0x05F6	; 0x8005f6 <twi_state>
    419c:	24 30       	cpi	r18, 0x04	; 4
    419e:	c9 f4       	brne	.+50     	; 0x41d2 <twi_transmit+0x4c>
    41a0:	fc 01       	movw	r30, r24
    41a2:	80 e0       	ldi	r24, 0x00	; 0
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	86 17       	cp	r24, r22
    41a8:	58 f4       	brcc	.+22     	; 0x41c0 <twi_transmit+0x3a>
    41aa:	30 91 a5 05 	lds	r19, 0x05A5	; 0x8005a5 <twi_txBufferLength>
    41ae:	21 91       	ld	r18, Z+
    41b0:	dc 01       	movw	r26, r24
    41b2:	a9 55       	subi	r26, 0x59	; 89
    41b4:	ba 4f       	sbci	r27, 0xFA	; 250
    41b6:	a3 0f       	add	r26, r19
    41b8:	b1 1d       	adc	r27, r1
    41ba:	2c 93       	st	X, r18
    41bc:	01 96       	adiw	r24, 0x01	; 1
    41be:	f3 cf       	rjmp	.-26     	; 0x41a6 <twi_transmit+0x20>
    41c0:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <twi_txBufferLength>
    41c4:	68 0f       	add	r22, r24
    41c6:	60 93 a5 05 	sts	0x05A5, r22	; 0x8005a5 <twi_txBufferLength>
    41ca:	80 e0       	ldi	r24, 0x00	; 0
    41cc:	08 95       	ret
    41ce:	81 e0       	ldi	r24, 0x01	; 1
    41d0:	08 95       	ret
    41d2:	82 e0       	ldi	r24, 0x02	; 2
    41d4:	08 95       	ret

000041d6 <twi_attachSlaveRxEvent>:
    41d6:	90 93 ea 05 	sts	0x05EA, r25	; 0x8005ea <twi_onSlaveReceive+0x1>
    41da:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <twi_onSlaveReceive>
    41de:	08 95       	ret

000041e0 <twi_attachSlaveTxEvent>:
    41e0:	90 93 ec 05 	sts	0x05EC, r25	; 0x8005ec <twi_onSlaveTransmit+0x1>
    41e4:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <twi_onSlaveTransmit>
    41e8:	08 95       	ret

000041ea <twi_releaseBus>:
    41ea:	85 ec       	ldi	r24, 0xC5	; 197
    41ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    41f0:	10 92 f6 05 	sts	0x05F6, r1	; 0x8005f6 <twi_state>
    41f4:	08 95       	ret

000041f6 <twi_handleTimeout>:
    41f6:	cf 93       	push	r28
    41f8:	df 93       	push	r29
    41fa:	91 e0       	ldi	r25, 0x01	; 1
    41fc:	90 93 ee 05 	sts	0x05EE, r25	; 0x8005ee <twi_timed_out_flag>
    4200:	88 23       	and	r24, r24
    4202:	51 f0       	breq	.+20     	; 0x4218 <twi_handleTimeout+0x22>
    4204:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4208:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    420c:	9b df       	rcall	.-202    	; 0x4144 <twi_disable>
    420e:	7c df       	rcall	.-264    	; 0x4108 <twi_init>
    4210:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7c00ba>
    4214:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    4218:	df 91       	pop	r29
    421a:	cf 91       	pop	r28
    421c:	08 95       	ret

0000421e <twi_readFrom>:
    421e:	4f 92       	push	r4
    4220:	5f 92       	push	r5
    4222:	6f 92       	push	r6
    4224:	7f 92       	push	r7
    4226:	8f 92       	push	r8
    4228:	9f 92       	push	r9
    422a:	af 92       	push	r10
    422c:	bf 92       	push	r11
    422e:	cf 92       	push	r12
    4230:	df 92       	push	r13
    4232:	ef 92       	push	r14
    4234:	ff 92       	push	r15
    4236:	0f 93       	push	r16
    4238:	1f 93       	push	r17
    423a:	cf 93       	push	r28
    423c:	df 93       	push	r29
    423e:	f8 2e       	mov	r15, r24
    4240:	16 2f       	mov	r17, r22
    4242:	07 2f       	mov	r16, r23
    4244:	c4 2f       	mov	r28, r20
    4246:	e2 2e       	mov	r14, r18
    4248:	41 32       	cpi	r20, 0x21	; 33
    424a:	08 f0       	brcs	.+2      	; 0x424e <twi_readFrom+0x30>
    424c:	bc c0       	rjmp	.+376    	; 0x43c6 <twi_readFrom+0x1a8>
    424e:	0e 94 86 2c 	call	0x590c	; 0x590c <micros>
    4252:	4b 01       	movw	r8, r22
    4254:	5c 01       	movw	r10, r24
    4256:	d0 91 f6 05 	lds	r29, 0x05F6	; 0x8005f6 <twi_state>
    425a:	dd 23       	and	r29, r29
    425c:	29 f1       	breq	.+74     	; 0x42a8 <twi_readFrom+0x8a>
    425e:	80 91 ef 05 	lds	r24, 0x05EF	; 0x8005ef <twi_timeout_us>
    4262:	90 91 f0 05 	lds	r25, 0x05F0	; 0x8005f0 <twi_timeout_us+0x1>
    4266:	a0 91 f1 05 	lds	r26, 0x05F1	; 0x8005f1 <twi_timeout_us+0x2>
    426a:	b0 91 f2 05 	lds	r27, 0x05F2	; 0x8005f2 <twi_timeout_us+0x3>
    426e:	89 2b       	or	r24, r25
    4270:	8a 2b       	or	r24, r26
    4272:	8b 2b       	or	r24, r27
    4274:	81 f3       	breq	.-32     	; 0x4256 <twi_readFrom+0x38>
    4276:	0e 94 86 2c 	call	0x590c	; 0x590c <micros>
    427a:	40 90 ef 05 	lds	r4, 0x05EF	; 0x8005ef <twi_timeout_us>
    427e:	50 90 f0 05 	lds	r5, 0x05F0	; 0x8005f0 <twi_timeout_us+0x1>
    4282:	60 90 f1 05 	lds	r6, 0x05F1	; 0x8005f1 <twi_timeout_us+0x2>
    4286:	70 90 f2 05 	lds	r7, 0x05F2	; 0x8005f2 <twi_timeout_us+0x3>
    428a:	dc 01       	movw	r26, r24
    428c:	cb 01       	movw	r24, r22
    428e:	88 19       	sub	r24, r8
    4290:	99 09       	sbc	r25, r9
    4292:	aa 09       	sbc	r26, r10
    4294:	bb 09       	sbc	r27, r11
    4296:	48 16       	cp	r4, r24
    4298:	59 06       	cpc	r5, r25
    429a:	6a 06       	cpc	r6, r26
    429c:	7b 06       	cpc	r7, r27
    429e:	d8 f6       	brcc	.-74     	; 0x4256 <twi_readFrom+0x38>
    42a0:	80 91 ed 05 	lds	r24, 0x05ED	; 0x8005ed <twi_do_reset_on_timeout>
    42a4:	a8 df       	rcall	.-176    	; 0x41f6 <twi_handleTimeout>
    42a6:	8f c0       	rjmp	.+286    	; 0x43c6 <twi_readFrom+0x1a8>
    42a8:	81 e0       	ldi	r24, 0x01	; 1
    42aa:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <twi_state>
    42ae:	e0 92 f4 05 	sts	0x05F4, r14	; 0x8005f4 <twi_sendStop>
    42b2:	9f ef       	ldi	r25, 0xFF	; 255
    42b4:	90 93 83 05 	sts	0x0583, r25	; 0x800583 <twi_error>
    42b8:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <twi_masterBufferIndex>
    42bc:	9c 0f       	add	r25, r28
    42be:	90 93 c7 05 	sts	0x05C7, r25	; 0x8005c7 <twi_masterBufferLength>
    42c2:	80 93 f5 05 	sts	0x05F5, r24	; 0x8005f5 <twi_slarw>
    42c6:	90 91 f5 05 	lds	r25, 0x05F5	; 0x8005f5 <twi_slarw>
    42ca:	8f 2d       	mov	r24, r15
    42cc:	88 0f       	add	r24, r24
    42ce:	89 2b       	or	r24, r25
    42d0:	80 93 f5 05 	sts	0x05F5, r24	; 0x8005f5 <twi_slarw>
    42d4:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <twi_inRepStart>
    42d8:	81 30       	cpi	r24, 0x01	; 1
    42da:	89 f5       	brne	.+98     	; 0x433e <twi_readFrom+0x120>
    42dc:	10 92 f3 05 	sts	0x05F3, r1	; 0x8005f3 <twi_inRepStart>
    42e0:	0e 94 86 2c 	call	0x590c	; 0x590c <micros>
    42e4:	6b 01       	movw	r12, r22
    42e6:	7c 01       	movw	r14, r24
    42e8:	80 91 f5 05 	lds	r24, 0x05F5	; 0x8005f5 <twi_slarw>
    42ec:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    42f0:	80 91 ef 05 	lds	r24, 0x05EF	; 0x8005ef <twi_timeout_us>
    42f4:	90 91 f0 05 	lds	r25, 0x05F0	; 0x8005f0 <twi_timeout_us+0x1>
    42f8:	a0 91 f1 05 	lds	r26, 0x05F1	; 0x8005f1 <twi_timeout_us+0x2>
    42fc:	b0 91 f2 05 	lds	r27, 0x05F2	; 0x8005f2 <twi_timeout_us+0x3>
    4300:	89 2b       	or	r24, r25
    4302:	8a 2b       	or	r24, r26
    4304:	8b 2b       	or	r24, r27
    4306:	a9 f0       	breq	.+42     	; 0x4332 <twi_readFrom+0x114>
    4308:	0e 94 86 2c 	call	0x590c	; 0x590c <micros>
    430c:	80 90 ef 05 	lds	r8, 0x05EF	; 0x8005ef <twi_timeout_us>
    4310:	90 90 f0 05 	lds	r9, 0x05F0	; 0x8005f0 <twi_timeout_us+0x1>
    4314:	a0 90 f1 05 	lds	r10, 0x05F1	; 0x8005f1 <twi_timeout_us+0x2>
    4318:	b0 90 f2 05 	lds	r11, 0x05F2	; 0x8005f2 <twi_timeout_us+0x3>
    431c:	dc 01       	movw	r26, r24
    431e:	cb 01       	movw	r24, r22
    4320:	8c 19       	sub	r24, r12
    4322:	9d 09       	sbc	r25, r13
    4324:	ae 09       	sbc	r26, r14
    4326:	bf 09       	sbc	r27, r15
    4328:	88 16       	cp	r8, r24
    432a:	99 06       	cpc	r9, r25
    432c:	aa 06       	cpc	r10, r26
    432e:	bb 06       	cpc	r11, r27
    4330:	90 f1       	brcs	.+100    	; 0x4396 <twi_readFrom+0x178>
    4332:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4336:	83 fd       	sbrc	r24, 3
    4338:	d7 cf       	rjmp	.-82     	; 0x42e8 <twi_readFrom+0xca>
    433a:	85 ec       	ldi	r24, 0xC5	; 197
    433c:	01 c0       	rjmp	.+2      	; 0x4340 <twi_readFrom+0x122>
    433e:	85 ee       	ldi	r24, 0xE5	; 229
    4340:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4344:	0e 94 86 2c 	call	0x590c	; 0x590c <micros>
    4348:	6b 01       	movw	r12, r22
    434a:	7c 01       	movw	r14, r24
    434c:	80 91 f6 05 	lds	r24, 0x05F6	; 0x8005f6 <twi_state>
    4350:	81 30       	cpi	r24, 0x01	; 1
    4352:	29 f5       	brne	.+74     	; 0x439e <twi_readFrom+0x180>
    4354:	80 91 ef 05 	lds	r24, 0x05EF	; 0x8005ef <twi_timeout_us>
    4358:	90 91 f0 05 	lds	r25, 0x05F0	; 0x8005f0 <twi_timeout_us+0x1>
    435c:	a0 91 f1 05 	lds	r26, 0x05F1	; 0x8005f1 <twi_timeout_us+0x2>
    4360:	b0 91 f2 05 	lds	r27, 0x05F2	; 0x8005f2 <twi_timeout_us+0x3>
    4364:	89 2b       	or	r24, r25
    4366:	8a 2b       	or	r24, r26
    4368:	8b 2b       	or	r24, r27
    436a:	81 f3       	breq	.-32     	; 0x434c <twi_readFrom+0x12e>
    436c:	0e 94 86 2c 	call	0x590c	; 0x590c <micros>
    4370:	80 90 ef 05 	lds	r8, 0x05EF	; 0x8005ef <twi_timeout_us>
    4374:	90 90 f0 05 	lds	r9, 0x05F0	; 0x8005f0 <twi_timeout_us+0x1>
    4378:	a0 90 f1 05 	lds	r10, 0x05F1	; 0x8005f1 <twi_timeout_us+0x2>
    437c:	b0 90 f2 05 	lds	r11, 0x05F2	; 0x8005f2 <twi_timeout_us+0x3>
    4380:	dc 01       	movw	r26, r24
    4382:	cb 01       	movw	r24, r22
    4384:	8c 19       	sub	r24, r12
    4386:	9d 09       	sbc	r25, r13
    4388:	ae 09       	sbc	r26, r14
    438a:	bf 09       	sbc	r27, r15
    438c:	88 16       	cp	r8, r24
    438e:	99 06       	cpc	r9, r25
    4390:	aa 06       	cpc	r10, r26
    4392:	bb 06       	cpc	r11, r27
    4394:	d8 f6       	brcc	.-74     	; 0x434c <twi_readFrom+0x12e>
    4396:	80 91 ed 05 	lds	r24, 0x05ED	; 0x8005ed <twi_do_reset_on_timeout>
    439a:	2d df       	rcall	.-422    	; 0x41f6 <twi_handleTimeout>
    439c:	15 c0       	rjmp	.+42     	; 0x43c8 <twi_readFrom+0x1aa>
    439e:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <twi_masterBufferIndex>
    43a2:	8c 17       	cp	r24, r28
    43a4:	10 f4       	brcc	.+4      	; 0x43aa <twi_readFrom+0x18c>
    43a6:	c0 91 c8 05 	lds	r28, 0x05C8	; 0x8005c8 <twi_masterBufferIndex>
    43aa:	a9 ec       	ldi	r26, 0xC9	; 201
    43ac:	b5 e0       	ldi	r27, 0x05	; 5
    43ae:	91 2f       	mov	r25, r17
    43b0:	e1 2f       	mov	r30, r17
    43b2:	f0 2f       	mov	r31, r16
    43b4:	8e 2f       	mov	r24, r30
    43b6:	89 1b       	sub	r24, r25
    43b8:	8c 17       	cp	r24, r28
    43ba:	18 f4       	brcc	.+6      	; 0x43c2 <twi_readFrom+0x1a4>
    43bc:	8d 91       	ld	r24, X+
    43be:	81 93       	st	Z+, r24
    43c0:	f9 cf       	rjmp	.-14     	; 0x43b4 <twi_readFrom+0x196>
    43c2:	dc 2f       	mov	r29, r28
    43c4:	01 c0       	rjmp	.+2      	; 0x43c8 <twi_readFrom+0x1aa>
    43c6:	d0 e0       	ldi	r29, 0x00	; 0
    43c8:	8d 2f       	mov	r24, r29
    43ca:	df 91       	pop	r29
    43cc:	cf 91       	pop	r28
    43ce:	1f 91       	pop	r17
    43d0:	0f 91       	pop	r16
    43d2:	ff 90       	pop	r15
    43d4:	ef 90       	pop	r14
    43d6:	df 90       	pop	r13
    43d8:	cf 90       	pop	r12
    43da:	bf 90       	pop	r11
    43dc:	af 90       	pop	r10
    43de:	9f 90       	pop	r9
    43e0:	8f 90       	pop	r8
    43e2:	7f 90       	pop	r7
    43e4:	6f 90       	pop	r6
    43e6:	5f 90       	pop	r5
    43e8:	4f 90       	pop	r4
    43ea:	08 95       	ret

000043ec <twi_writeTo>:
    43ec:	4f 92       	push	r4
    43ee:	5f 92       	push	r5
    43f0:	6f 92       	push	r6
    43f2:	7f 92       	push	r7
    43f4:	8f 92       	push	r8
    43f6:	9f 92       	push	r9
    43f8:	af 92       	push	r10
    43fa:	bf 92       	push	r11
    43fc:	cf 92       	push	r12
    43fe:	df 92       	push	r13
    4400:	ef 92       	push	r14
    4402:	ff 92       	push	r15
    4404:	0f 93       	push	r16
    4406:	1f 93       	push	r17
    4408:	cf 93       	push	r28
    440a:	df 93       	push	r29
    440c:	41 32       	cpi	r20, 0x21	; 33
    440e:	08 f0       	brcs	.+2      	; 0x4412 <twi_writeTo+0x26>
    4410:	c5 c0       	rjmp	.+394    	; 0x459c <twi_writeTo+0x1b0>
    4412:	12 2f       	mov	r17, r18
    4414:	f4 2e       	mov	r15, r20
    4416:	d7 2e       	mov	r13, r23
    4418:	e6 2e       	mov	r14, r22
    441a:	d8 2f       	mov	r29, r24
    441c:	0e 94 86 2c 	call	0x590c	; 0x590c <micros>
    4420:	4b 01       	movw	r8, r22
    4422:	5c 01       	movw	r10, r24
    4424:	c0 91 f6 05 	lds	r28, 0x05F6	; 0x8005f6 <twi_state>
    4428:	cc 23       	and	r28, r28
    442a:	11 f1       	breq	.+68     	; 0x4470 <twi_writeTo+0x84>
    442c:	80 91 ef 05 	lds	r24, 0x05EF	; 0x8005ef <twi_timeout_us>
    4430:	90 91 f0 05 	lds	r25, 0x05F0	; 0x8005f0 <twi_timeout_us+0x1>
    4434:	a0 91 f1 05 	lds	r26, 0x05F1	; 0x8005f1 <twi_timeout_us+0x2>
    4438:	b0 91 f2 05 	lds	r27, 0x05F2	; 0x8005f2 <twi_timeout_us+0x3>
    443c:	89 2b       	or	r24, r25
    443e:	8a 2b       	or	r24, r26
    4440:	8b 2b       	or	r24, r27
    4442:	81 f3       	breq	.-32     	; 0x4424 <twi_writeTo+0x38>
    4444:	0e 94 86 2c 	call	0x590c	; 0x590c <micros>
    4448:	40 90 ef 05 	lds	r4, 0x05EF	; 0x8005ef <twi_timeout_us>
    444c:	50 90 f0 05 	lds	r5, 0x05F0	; 0x8005f0 <twi_timeout_us+0x1>
    4450:	60 90 f1 05 	lds	r6, 0x05F1	; 0x8005f1 <twi_timeout_us+0x2>
    4454:	70 90 f2 05 	lds	r7, 0x05F2	; 0x8005f2 <twi_timeout_us+0x3>
    4458:	dc 01       	movw	r26, r24
    445a:	cb 01       	movw	r24, r22
    445c:	88 19       	sub	r24, r8
    445e:	99 09       	sbc	r25, r9
    4460:	aa 09       	sbc	r26, r10
    4462:	bb 09       	sbc	r27, r11
    4464:	48 16       	cp	r4, r24
    4466:	59 06       	cpc	r5, r25
    4468:	6a 06       	cpc	r6, r26
    446a:	7b 06       	cpc	r7, r27
    446c:	d8 f6       	brcc	.-74     	; 0x4424 <twi_writeTo+0x38>
    446e:	83 c0       	rjmp	.+262    	; 0x4576 <twi_writeTo+0x18a>
    4470:	82 e0       	ldi	r24, 0x02	; 2
    4472:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <twi_state>
    4476:	00 93 f4 05 	sts	0x05F4, r16	; 0x8005f4 <twi_sendStop>
    447a:	8f ef       	ldi	r24, 0xFF	; 255
    447c:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <twi_error>
    4480:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <twi_masterBufferIndex>
    4484:	f0 92 c7 05 	sts	0x05C7, r15	; 0x8005c7 <twi_masterBufferLength>
    4488:	9e 2d       	mov	r25, r14
    448a:	a9 ec       	ldi	r26, 0xC9	; 201
    448c:	b5 e0       	ldi	r27, 0x05	; 5
    448e:	ee 2d       	mov	r30, r14
    4490:	fd 2d       	mov	r31, r13
    4492:	8e 2f       	mov	r24, r30
    4494:	89 1b       	sub	r24, r25
    4496:	8f 15       	cp	r24, r15
    4498:	18 f4       	brcc	.+6      	; 0x44a0 <twi_writeTo+0xb4>
    449a:	81 91       	ld	r24, Z+
    449c:	8d 93       	st	X+, r24
    449e:	f9 cf       	rjmp	.-14     	; 0x4492 <twi_writeTo+0xa6>
    44a0:	10 92 f5 05 	sts	0x05F5, r1	; 0x8005f5 <twi_slarw>
    44a4:	90 91 f5 05 	lds	r25, 0x05F5	; 0x8005f5 <twi_slarw>
    44a8:	dd 0f       	add	r29, r29
    44aa:	d9 2b       	or	r29, r25
    44ac:	d0 93 f5 05 	sts	0x05F5, r29	; 0x8005f5 <twi_slarw>
    44b0:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <twi_inRepStart>
    44b4:	81 30       	cpi	r24, 0x01	; 1
    44b6:	89 f5       	brne	.+98     	; 0x451a <twi_writeTo+0x12e>
    44b8:	10 92 f3 05 	sts	0x05F3, r1	; 0x8005f3 <twi_inRepStart>
    44bc:	0e 94 86 2c 	call	0x590c	; 0x590c <micros>
    44c0:	6b 01       	movw	r12, r22
    44c2:	7c 01       	movw	r14, r24
    44c4:	80 91 f5 05 	lds	r24, 0x05F5	; 0x8005f5 <twi_slarw>
    44c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    44cc:	80 91 ef 05 	lds	r24, 0x05EF	; 0x8005ef <twi_timeout_us>
    44d0:	90 91 f0 05 	lds	r25, 0x05F0	; 0x8005f0 <twi_timeout_us+0x1>
    44d4:	a0 91 f1 05 	lds	r26, 0x05F1	; 0x8005f1 <twi_timeout_us+0x2>
    44d8:	b0 91 f2 05 	lds	r27, 0x05F2	; 0x8005f2 <twi_timeout_us+0x3>
    44dc:	89 2b       	or	r24, r25
    44de:	8a 2b       	or	r24, r26
    44e0:	8b 2b       	or	r24, r27
    44e2:	a9 f0       	breq	.+42     	; 0x450e <twi_writeTo+0x122>
    44e4:	0e 94 86 2c 	call	0x590c	; 0x590c <micros>
    44e8:	80 90 ef 05 	lds	r8, 0x05EF	; 0x8005ef <twi_timeout_us>
    44ec:	90 90 f0 05 	lds	r9, 0x05F0	; 0x8005f0 <twi_timeout_us+0x1>
    44f0:	a0 90 f1 05 	lds	r10, 0x05F1	; 0x8005f1 <twi_timeout_us+0x2>
    44f4:	b0 90 f2 05 	lds	r11, 0x05F2	; 0x8005f2 <twi_timeout_us+0x3>
    44f8:	dc 01       	movw	r26, r24
    44fa:	cb 01       	movw	r24, r22
    44fc:	8c 19       	sub	r24, r12
    44fe:	9d 09       	sbc	r25, r13
    4500:	ae 09       	sbc	r26, r14
    4502:	bf 09       	sbc	r27, r15
    4504:	88 16       	cp	r8, r24
    4506:	99 06       	cpc	r9, r25
    4508:	aa 06       	cpc	r10, r26
    450a:	bb 06       	cpc	r11, r27
    450c:	a0 f1       	brcs	.+104    	; 0x4576 <twi_writeTo+0x18a>
    450e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4512:	83 fd       	sbrc	r24, 3
    4514:	d7 cf       	rjmp	.-82     	; 0x44c4 <twi_writeTo+0xd8>
    4516:	85 ec       	ldi	r24, 0xC5	; 197
    4518:	01 c0       	rjmp	.+2      	; 0x451c <twi_writeTo+0x130>
    451a:	85 ee       	ldi	r24, 0xE5	; 229
    451c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4520:	0e 94 86 2c 	call	0x590c	; 0x590c <micros>
    4524:	6b 01       	movw	r12, r22
    4526:	7c 01       	movw	r14, r24
    4528:	11 23       	and	r17, r17
    452a:	51 f1       	breq	.+84     	; 0x4580 <twi_writeTo+0x194>
    452c:	80 91 f6 05 	lds	r24, 0x05F6	; 0x8005f6 <twi_state>
    4530:	82 30       	cpi	r24, 0x02	; 2
    4532:	31 f5       	brne	.+76     	; 0x4580 <twi_writeTo+0x194>
    4534:	80 91 ef 05 	lds	r24, 0x05EF	; 0x8005ef <twi_timeout_us>
    4538:	90 91 f0 05 	lds	r25, 0x05F0	; 0x8005f0 <twi_timeout_us+0x1>
    453c:	a0 91 f1 05 	lds	r26, 0x05F1	; 0x8005f1 <twi_timeout_us+0x2>
    4540:	b0 91 f2 05 	lds	r27, 0x05F2	; 0x8005f2 <twi_timeout_us+0x3>
    4544:	89 2b       	or	r24, r25
    4546:	8a 2b       	or	r24, r26
    4548:	8b 2b       	or	r24, r27
    454a:	71 f3       	breq	.-36     	; 0x4528 <twi_writeTo+0x13c>
    454c:	0e 94 86 2c 	call	0x590c	; 0x590c <micros>
    4550:	80 90 ef 05 	lds	r8, 0x05EF	; 0x8005ef <twi_timeout_us>
    4554:	90 90 f0 05 	lds	r9, 0x05F0	; 0x8005f0 <twi_timeout_us+0x1>
    4558:	a0 90 f1 05 	lds	r10, 0x05F1	; 0x8005f1 <twi_timeout_us+0x2>
    455c:	b0 90 f2 05 	lds	r11, 0x05F2	; 0x8005f2 <twi_timeout_us+0x3>
    4560:	dc 01       	movw	r26, r24
    4562:	cb 01       	movw	r24, r22
    4564:	8c 19       	sub	r24, r12
    4566:	9d 09       	sbc	r25, r13
    4568:	ae 09       	sbc	r26, r14
    456a:	bf 09       	sbc	r27, r15
    456c:	88 16       	cp	r8, r24
    456e:	99 06       	cpc	r9, r25
    4570:	aa 06       	cpc	r10, r26
    4572:	bb 06       	cpc	r11, r27
    4574:	c8 f6       	brcc	.-78     	; 0x4528 <twi_writeTo+0x13c>
    4576:	80 91 ed 05 	lds	r24, 0x05ED	; 0x8005ed <twi_do_reset_on_timeout>
    457a:	3d de       	rcall	.-902    	; 0x41f6 <twi_handleTimeout>
    457c:	c5 e0       	ldi	r28, 0x05	; 5
    457e:	13 c0       	rjmp	.+38     	; 0x45a6 <twi_writeTo+0x1ba>
    4580:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <twi_error>
    4584:	8f 3f       	cpi	r24, 0xFF	; 255
    4586:	79 f0       	breq	.+30     	; 0x45a6 <twi_writeTo+0x1ba>
    4588:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <twi_error>
    458c:	80 32       	cpi	r24, 0x20	; 32
    458e:	41 f0       	breq	.+16     	; 0x45a0 <twi_writeTo+0x1b4>
    4590:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <twi_error>
    4594:	80 33       	cpi	r24, 0x30	; 48
    4596:	31 f0       	breq	.+12     	; 0x45a4 <twi_writeTo+0x1b8>
    4598:	c4 e0       	ldi	r28, 0x04	; 4
    459a:	05 c0       	rjmp	.+10     	; 0x45a6 <twi_writeTo+0x1ba>
    459c:	c1 e0       	ldi	r28, 0x01	; 1
    459e:	03 c0       	rjmp	.+6      	; 0x45a6 <twi_writeTo+0x1ba>
    45a0:	c2 e0       	ldi	r28, 0x02	; 2
    45a2:	01 c0       	rjmp	.+2      	; 0x45a6 <twi_writeTo+0x1ba>
    45a4:	c3 e0       	ldi	r28, 0x03	; 3
    45a6:	8c 2f       	mov	r24, r28
    45a8:	df 91       	pop	r29
    45aa:	cf 91       	pop	r28
    45ac:	1f 91       	pop	r17
    45ae:	0f 91       	pop	r16
    45b0:	ff 90       	pop	r15
    45b2:	ef 90       	pop	r14
    45b4:	df 90       	pop	r13
    45b6:	cf 90       	pop	r12
    45b8:	bf 90       	pop	r11
    45ba:	af 90       	pop	r10
    45bc:	9f 90       	pop	r9
    45be:	8f 90       	pop	r8
    45c0:	7f 90       	pop	r7
    45c2:	6f 90       	pop	r6
    45c4:	5f 90       	pop	r5
    45c6:	4f 90       	pop	r4
    45c8:	08 95       	ret

000045ca <twi_stop>:
    45ca:	85 ed       	ldi	r24, 0xD5	; 213
    45cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    45d0:	80 91 ef 05 	lds	r24, 0x05EF	; 0x8005ef <twi_timeout_us>
    45d4:	90 91 f0 05 	lds	r25, 0x05F0	; 0x8005f0 <twi_timeout_us+0x1>
    45d8:	a0 91 f1 05 	lds	r26, 0x05F1	; 0x8005f1 <twi_timeout_us+0x2>
    45dc:	b0 91 f2 05 	lds	r27, 0x05F2	; 0x8005f2 <twi_timeout_us+0x3>
    45e0:	07 96       	adiw	r24, 0x07	; 7
    45e2:	a1 1d       	adc	r26, r1
    45e4:	b1 1d       	adc	r27, r1
    45e6:	23 e0       	ldi	r18, 0x03	; 3
    45e8:	b6 95       	lsr	r27
    45ea:	a7 95       	ror	r26
    45ec:	97 95       	ror	r25
    45ee:	87 95       	ror	r24
    45f0:	2a 95       	dec	r18
    45f2:	d1 f7       	brne	.-12     	; 0x45e8 <twi_stop+0x1e>
    45f4:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    45f8:	24 ff       	sbrs	r18, 4
    45fa:	1b c0       	rjmp	.+54     	; 0x4632 <twi_stop+0x68>
    45fc:	40 91 ef 05 	lds	r20, 0x05EF	; 0x8005ef <twi_timeout_us>
    4600:	50 91 f0 05 	lds	r21, 0x05F0	; 0x8005f0 <twi_timeout_us+0x1>
    4604:	60 91 f1 05 	lds	r22, 0x05F1	; 0x8005f1 <twi_timeout_us+0x2>
    4608:	70 91 f2 05 	lds	r23, 0x05F2	; 0x8005f2 <twi_timeout_us+0x3>
    460c:	45 2b       	or	r20, r21
    460e:	46 2b       	or	r20, r22
    4610:	47 2b       	or	r20, r23
    4612:	81 f3       	breq	.-32     	; 0x45f4 <twi_stop+0x2a>
    4614:	00 97       	sbiw	r24, 0x00	; 0
    4616:	a1 05       	cpc	r26, r1
    4618:	b1 05       	cpc	r27, r1
    461a:	41 f0       	breq	.+16     	; 0x462c <twi_stop+0x62>
    461c:	25 e3       	ldi	r18, 0x35	; 53
    461e:	2a 95       	dec	r18
    4620:	f1 f7       	brne	.-4      	; 0x461e <twi_stop+0x54>
    4622:	00 00       	nop
    4624:	01 97       	sbiw	r24, 0x01	; 1
    4626:	a1 09       	sbc	r26, r1
    4628:	b1 09       	sbc	r27, r1
    462a:	e4 cf       	rjmp	.-56     	; 0x45f4 <twi_stop+0x2a>
    462c:	80 91 ed 05 	lds	r24, 0x05ED	; 0x8005ed <twi_do_reset_on_timeout>
    4630:	e2 cd       	rjmp	.-1084   	; 0x41f6 <twi_handleTimeout>
    4632:	10 92 f6 05 	sts	0x05F6, r1	; 0x8005f6 <twi_state>
    4636:	08 95       	ret

00004638 <__vector_39>:

ISR(TWI_vect)
{
    4638:	1f 92       	push	r1
    463a:	0f 92       	push	r0
    463c:	0f b6       	in	r0, 0x3f	; 63
    463e:	0f 92       	push	r0
    4640:	11 24       	eor	r1, r1
    4642:	0b b6       	in	r0, 0x3b	; 59
    4644:	0f 92       	push	r0
    4646:	2f 93       	push	r18
    4648:	3f 93       	push	r19
    464a:	4f 93       	push	r20
    464c:	5f 93       	push	r21
    464e:	6f 93       	push	r22
    4650:	7f 93       	push	r23
    4652:	8f 93       	push	r24
    4654:	9f 93       	push	r25
    4656:	af 93       	push	r26
    4658:	bf 93       	push	r27
    465a:	ef 93       	push	r30
    465c:	ff 93       	push	r31
  switch(TW_STATUS){
    465e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4662:	88 7f       	andi	r24, 0xF8	; 248
    4664:	80 36       	cpi	r24, 0x60	; 96
    4666:	09 f4       	brne	.+2      	; 0x466a <__vector_39+0x32>
    4668:	9d c0       	rjmp	.+314    	; 0x47a4 <__vector_39+0x16c>
    466a:	70 f5       	brcc	.+92     	; 0x46c8 <__vector_39+0x90>
    466c:	88 32       	cpi	r24, 0x28	; 40
    466e:	09 f4       	brne	.+2      	; 0x4672 <__vector_39+0x3a>
    4670:	5c c0       	rjmp	.+184    	; 0x472a <__vector_39+0xf2>
    4672:	90 f4       	brcc	.+36     	; 0x4698 <__vector_39+0x60>
    4674:	80 31       	cpi	r24, 0x10	; 16
    4676:	09 f4       	brne	.+2      	; 0x467a <__vector_39+0x42>
    4678:	55 c0       	rjmp	.+170    	; 0x4724 <__vector_39+0xec>
    467a:	38 f4       	brcc	.+14     	; 0x468a <__vector_39+0x52>
    467c:	88 23       	and	r24, r24
    467e:	09 f4       	brne	.+2      	; 0x4682 <__vector_39+0x4a>
    4680:	f3 c0       	rjmp	.+486    	; 0x4868 <__vector_39+0x230>
    4682:	88 30       	cpi	r24, 0x08	; 8
    4684:	09 f4       	brne	.+2      	; 0x4688 <__vector_39+0x50>
    4686:	4e c0       	rjmp	.+156    	; 0x4724 <__vector_39+0xec>
    4688:	f2 c0       	rjmp	.+484    	; 0x486e <__vector_39+0x236>
    468a:	88 31       	cpi	r24, 0x18	; 24
    468c:	09 f4       	brne	.+2      	; 0x4690 <__vector_39+0x58>
    468e:	4d c0       	rjmp	.+154    	; 0x472a <__vector_39+0xf2>
    4690:	80 32       	cpi	r24, 0x20	; 32
    4692:	09 f4       	brne	.+2      	; 0x4696 <__vector_39+0x5e>
    4694:	5e c0       	rjmp	.+188    	; 0x4752 <__vector_39+0x11a>
    4696:	eb c0       	rjmp	.+470    	; 0x486e <__vector_39+0x236>
    4698:	80 34       	cpi	r24, 0x40	; 64
    469a:	09 f4       	brne	.+2      	; 0x469e <__vector_39+0x66>
    469c:	69 c0       	rjmp	.+210    	; 0x4770 <__vector_39+0x138>
    469e:	50 f4       	brcc	.+20     	; 0x46b4 <__vector_39+0x7c>
    46a0:	80 33       	cpi	r24, 0x30	; 48
    46a2:	09 f4       	brne	.+2      	; 0x46a6 <__vector_39+0x6e>
    46a4:	56 c0       	rjmp	.+172    	; 0x4752 <__vector_39+0x11a>
    46a6:	88 33       	cpi	r24, 0x38	; 56
    46a8:	09 f0       	breq	.+2      	; 0x46ac <__vector_39+0x74>
    46aa:	e1 c0       	rjmp	.+450    	; 0x486e <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    46ac:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <twi_error>
      twi_releaseBus();
    46b0:	9c dd       	rcall	.-1224   	; 0x41ea <twi_releaseBus>
      break;
    46b2:	dd c0       	rjmp	.+442    	; 0x486e <__vector_39+0x236>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    46b4:	80 35       	cpi	r24, 0x50	; 80
    46b6:	09 f4       	brne	.+2      	; 0x46ba <__vector_39+0x82>
    46b8:	4f c0       	rjmp	.+158    	; 0x4758 <__vector_39+0x120>
    46ba:	88 35       	cpi	r24, 0x58	; 88
    46bc:	09 f4       	brne	.+2      	; 0x46c0 <__vector_39+0x88>
    46be:	5d c0       	rjmp	.+186    	; 0x477a <__vector_39+0x142>
    46c0:	88 34       	cpi	r24, 0x48	; 72
    46c2:	09 f0       	breq	.+2      	; 0x46c6 <__vector_39+0x8e>
    46c4:	d4 c0       	rjmp	.+424    	; 0x486e <__vector_39+0x236>
    46c6:	d2 c0       	rjmp	.+420    	; 0x486c <__vector_39+0x234>
    46c8:	88 39       	cpi	r24, 0x98	; 152
    46ca:	09 f4       	brne	.+2      	; 0x46ce <__vector_39+0x96>
    46cc:	c3 c0       	rjmp	.+390    	; 0x4854 <__vector_39+0x21c>
    46ce:	a8 f4       	brcc	.+42     	; 0x46fa <__vector_39+0xc2>
    46d0:	88 37       	cpi	r24, 0x78	; 120
    46d2:	09 f4       	brne	.+2      	; 0x46d6 <__vector_39+0x9e>
    46d4:	67 c0       	rjmp	.+206    	; 0x47a4 <__vector_39+0x16c>
    46d6:	38 f4       	brcc	.+14     	; 0x46e6 <__vector_39+0xae>
    46d8:	88 36       	cpi	r24, 0x68	; 104
    46da:	09 f4       	brne	.+2      	; 0x46de <__vector_39+0xa6>
    46dc:	63 c0       	rjmp	.+198    	; 0x47a4 <__vector_39+0x16c>
    46de:	80 37       	cpi	r24, 0x70	; 112
    46e0:	09 f4       	brne	.+2      	; 0x46e4 <__vector_39+0xac>
    46e2:	60 c0       	rjmp	.+192    	; 0x47a4 <__vector_39+0x16c>
    46e4:	c4 c0       	rjmp	.+392    	; 0x486e <__vector_39+0x236>
    46e6:	88 38       	cpi	r24, 0x88	; 136
    46e8:	09 f4       	brne	.+2      	; 0x46ec <__vector_39+0xb4>
    46ea:	b4 c0       	rjmp	.+360    	; 0x4854 <__vector_39+0x21c>
    46ec:	80 39       	cpi	r24, 0x90	; 144
    46ee:	09 f4       	brne	.+2      	; 0x46f2 <__vector_39+0xba>
    46f0:	5f c0       	rjmp	.+190    	; 0x47b0 <__vector_39+0x178>
    46f2:	80 38       	cpi	r24, 0x80	; 128
    46f4:	09 f0       	breq	.+2      	; 0x46f8 <__vector_39+0xc0>
    46f6:	bb c0       	rjmp	.+374    	; 0x486e <__vector_39+0x236>
    46f8:	5b c0       	rjmp	.+182    	; 0x47b0 <__vector_39+0x178>
    46fa:	80 3b       	cpi	r24, 0xB0	; 176
    46fc:	09 f4       	brne	.+2      	; 0x4700 <__vector_39+0xc8>
    46fe:	82 c0       	rjmp	.+260    	; 0x4804 <__vector_39+0x1cc>
    4700:	38 f4       	brcc	.+14     	; 0x4710 <__vector_39+0xd8>
    4702:	80 3a       	cpi	r24, 0xA0	; 160
    4704:	09 f4       	brne	.+2      	; 0x4708 <__vector_39+0xd0>
    4706:	66 c0       	rjmp	.+204    	; 0x47d4 <__vector_39+0x19c>
    4708:	88 3a       	cpi	r24, 0xA8	; 168
    470a:	09 f4       	brne	.+2      	; 0x470e <__vector_39+0xd6>
    470c:	7b c0       	rjmp	.+246    	; 0x4804 <__vector_39+0x1cc>
    470e:	af c0       	rjmp	.+350    	; 0x486e <__vector_39+0x236>
    4710:	80 3c       	cpi	r24, 0xC0	; 192
    4712:	09 f4       	brne	.+2      	; 0x4716 <__vector_39+0xde>
    4714:	a3 c0       	rjmp	.+326    	; 0x485c <__vector_39+0x224>
    4716:	88 3c       	cpi	r24, 0xC8	; 200
    4718:	09 f4       	brne	.+2      	; 0x471c <__vector_39+0xe4>
    471a:	a0 c0       	rjmp	.+320    	; 0x485c <__vector_39+0x224>
    471c:	88 3b       	cpi	r24, 0xB8	; 184
    471e:	09 f4       	brne	.+2      	; 0x4722 <__vector_39+0xea>
    4720:	86 c0       	rjmp	.+268    	; 0x482e <__vector_39+0x1f6>
    4722:	a5 c0       	rjmp	.+330    	; 0x486e <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4724:	80 91 f5 05 	lds	r24, 0x05F5	; 0x8005f5 <twi_slarw>
    4728:	10 c0       	rjmp	.+32     	; 0x474a <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    472a:	90 91 c8 05 	lds	r25, 0x05C8	; 0x8005c8 <twi_masterBufferIndex>
    472e:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <twi_masterBufferLength>
    4732:	98 17       	cp	r25, r24
    4734:	70 f5       	brcc	.+92     	; 0x4792 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4736:	e0 91 c8 05 	lds	r30, 0x05C8	; 0x8005c8 <twi_masterBufferIndex>
    473a:	81 e0       	ldi	r24, 0x01	; 1
    473c:	8e 0f       	add	r24, r30
    473e:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <twi_masterBufferIndex>
    4742:	f0 e0       	ldi	r31, 0x00	; 0
    4744:	e7 53       	subi	r30, 0x37	; 55
    4746:	fa 4f       	sbci	r31, 0xFA	; 250
    4748:	80 81       	ld	r24, Z
    474a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    474e:	85 ec       	ldi	r24, 0xC5	; 197
    4750:	82 c0       	rjmp	.+260    	; 0x4856 <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4752:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <twi_error>
    4756:	8a c0       	rjmp	.+276    	; 0x486c <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4758:	e0 91 c8 05 	lds	r30, 0x05C8	; 0x8005c8 <twi_masterBufferIndex>
    475c:	81 e0       	ldi	r24, 0x01	; 1
    475e:	8e 0f       	add	r24, r30
    4760:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <twi_masterBufferIndex>
    4764:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4768:	f0 e0       	ldi	r31, 0x00	; 0
    476a:	e7 53       	subi	r30, 0x37	; 55
    476c:	fa 4f       	sbci	r31, 0xFA	; 250
    476e:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4770:	90 91 c8 05 	lds	r25, 0x05C8	; 0x8005c8 <twi_masterBufferIndex>
    4774:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <twi_masterBufferLength>
    4778:	6a c0       	rjmp	.+212    	; 0x484e <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    477a:	e0 91 c8 05 	lds	r30, 0x05C8	; 0x8005c8 <twi_masterBufferIndex>
    477e:	81 e0       	ldi	r24, 0x01	; 1
    4780:	8e 0f       	add	r24, r30
    4782:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <twi_masterBufferIndex>
    4786:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    478a:	f0 e0       	ldi	r31, 0x00	; 0
    478c:	e7 53       	subi	r30, 0x37	; 55
    478e:	fa 4f       	sbci	r31, 0xFA	; 250
    4790:	80 83       	st	Z, r24
      if (twi_sendStop){
    4792:	80 91 f4 05 	lds	r24, 0x05F4	; 0x8005f4 <twi_sendStop>
    4796:	81 11       	cpse	r24, r1
    4798:	69 c0       	rjmp	.+210    	; 0x486c <__vector_39+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    479a:	81 e0       	ldi	r24, 0x01	; 1
    479c:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    47a0:	84 ea       	ldi	r24, 0xA4	; 164
    47a2:	5d c0       	rjmp	.+186    	; 0x485e <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    47a4:	83 e0       	ldi	r24, 0x03	; 3
    47a6:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    47aa:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <twi_rxBufferIndex>
    47ae:	cf cf       	rjmp	.-98     	; 0x474e <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    47b0:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <twi_rxBufferIndex>
    47b4:	80 32       	cpi	r24, 0x20	; 32
    47b6:	08 f0       	brcs	.+2      	; 0x47ba <__vector_39+0x182>
    47b8:	4d c0       	rjmp	.+154    	; 0x4854 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    47ba:	e0 91 84 05 	lds	r30, 0x0584	; 0x800584 <twi_rxBufferIndex>
    47be:	81 e0       	ldi	r24, 0x01	; 1
    47c0:	8e 0f       	add	r24, r30
    47c2:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <twi_rxBufferIndex>
    47c6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    47ca:	f0 e0       	ldi	r31, 0x00	; 0
    47cc:	eb 57       	subi	r30, 0x7B	; 123
    47ce:	fa 4f       	sbci	r31, 0xFA	; 250
    47d0:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    47d2:	bd cf       	rjmp	.-134    	; 0x474e <__vector_39+0x116>
    47d4:	0a dd       	rcall	.-1516   	; 0x41ea <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    47d6:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <twi_rxBufferIndex>
    47da:	80 32       	cpi	r24, 0x20	; 32
    47dc:	30 f4       	brcc	.+12     	; 0x47ea <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    47de:	e0 91 84 05 	lds	r30, 0x0584	; 0x800584 <twi_rxBufferIndex>
    47e2:	f0 e0       	ldi	r31, 0x00	; 0
    47e4:	eb 57       	subi	r30, 0x7B	; 123
    47e6:	fa 4f       	sbci	r31, 0xFA	; 250
    47e8:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    47ea:	60 91 84 05 	lds	r22, 0x0584	; 0x800584 <twi_rxBufferIndex>
    47ee:	70 e0       	ldi	r23, 0x00	; 0
    47f0:	e0 91 e9 05 	lds	r30, 0x05E9	; 0x8005e9 <twi_onSlaveReceive>
    47f4:	f0 91 ea 05 	lds	r31, 0x05EA	; 0x8005ea <twi_onSlaveReceive+0x1>
    47f8:	85 e8       	ldi	r24, 0x85	; 133
    47fa:	95 e0       	ldi	r25, 0x05	; 5
    47fc:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    47fe:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <twi_rxBufferIndex>
      break;
    4802:	35 c0       	rjmp	.+106    	; 0x486e <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4804:	84 e0       	ldi	r24, 0x04	; 4
    4806:	80 93 f6 05 	sts	0x05F6, r24	; 0x8005f6 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    480a:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    480e:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4812:	e0 91 eb 05 	lds	r30, 0x05EB	; 0x8005eb <twi_onSlaveTransmit>
    4816:	f0 91 ec 05 	lds	r31, 0x05EC	; 0x8005ec <twi_onSlaveTransmit+0x1>
    481a:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    481c:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <twi_txBufferLength>
    4820:	81 11       	cpse	r24, r1
    4822:	05 c0       	rjmp	.+10     	; 0x482e <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    4824:	81 e0       	ldi	r24, 0x01	; 1
    4826:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    482a:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    482e:	e0 91 a6 05 	lds	r30, 0x05A6	; 0x8005a6 <twi_txBufferIndex>
    4832:	81 e0       	ldi	r24, 0x01	; 1
    4834:	8e 0f       	add	r24, r30
    4836:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <twi_txBufferIndex>
    483a:	f0 e0       	ldi	r31, 0x00	; 0
    483c:	e9 55       	subi	r30, 0x59	; 89
    483e:	fa 4f       	sbci	r31, 0xFA	; 250
    4840:	80 81       	ld	r24, Z
    4842:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4846:	90 91 a6 05 	lds	r25, 0x05A6	; 0x8005a6 <twi_txBufferIndex>
    484a:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <twi_txBufferLength>
    484e:	98 17       	cp	r25, r24
    4850:	08 f4       	brcc	.+2      	; 0x4854 <__vector_39+0x21c>
    4852:	7d cf       	rjmp	.-262    	; 0x474e <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4854:	85 e8       	ldi	r24, 0x85	; 133
    4856:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    485a:	09 c0       	rjmp	.+18     	; 0x486e <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    485c:	85 ec       	ldi	r24, 0xC5	; 197
    485e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    4862:	10 92 f6 05 	sts	0x05F6, r1	; 0x8005f6 <twi_state>
      break;
    4866:	03 c0       	rjmp	.+6      	; 0x486e <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    4868:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <twi_error>
      twi_stop();
    486c:	ae de       	rcall	.-676    	; 0x45ca <twi_stop>
      break;
  }
}
    486e:	ff 91       	pop	r31
    4870:	ef 91       	pop	r30
    4872:	bf 91       	pop	r27
    4874:	af 91       	pop	r26
    4876:	9f 91       	pop	r25
    4878:	8f 91       	pop	r24
    487a:	7f 91       	pop	r23
    487c:	6f 91       	pop	r22
    487e:	5f 91       	pop	r21
    4880:	4f 91       	pop	r20
    4882:	3f 91       	pop	r19
    4884:	2f 91       	pop	r18
    4886:	0f 90       	pop	r0
    4888:	0b be       	out	0x3b, r0	; 59
    488a:	0f 90       	pop	r0
    488c:	0f be       	out	0x3f, r0	; 63
    488e:	0f 90       	pop	r0
    4890:	1f 90       	pop	r1
    4892:	18 95       	reti

00004894 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    4894:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <_ZN7TwoWire14rxBufferLengthE>
    4898:	90 e0       	ldi	r25, 0x00	; 0
    489a:	20 91 2c 06 	lds	r18, 0x062C	; 0x80062c <_ZN7TwoWire13rxBufferIndexE>
    489e:	82 1b       	sub	r24, r18
    48a0:	91 09       	sbc	r25, r1
    48a2:	08 95       	ret

000048a4 <_ZN7TwoWire4readEv>:
    48a4:	90 91 2c 06 	lds	r25, 0x062C	; 0x80062c <_ZN7TwoWire13rxBufferIndexE>
    48a8:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <_ZN7TwoWire14rxBufferLengthE>
    48ac:	98 17       	cp	r25, r24
    48ae:	50 f4       	brcc	.+20     	; 0x48c4 <_ZN7TwoWire4readEv+0x20>
    48b0:	e9 2f       	mov	r30, r25
    48b2:	f0 e0       	ldi	r31, 0x00	; 0
    48b4:	e3 5d       	subi	r30, 0xD3	; 211
    48b6:	f9 4f       	sbci	r31, 0xF9	; 249
    48b8:	20 81       	ld	r18, Z
    48ba:	30 e0       	ldi	r19, 0x00	; 0
    48bc:	9f 5f       	subi	r25, 0xFF	; 255
    48be:	90 93 2c 06 	sts	0x062C, r25	; 0x80062c <_ZN7TwoWire13rxBufferIndexE>
    48c2:	02 c0       	rjmp	.+4      	; 0x48c8 <_ZN7TwoWire4readEv+0x24>
    48c4:	2f ef       	ldi	r18, 0xFF	; 255
    48c6:	3f ef       	ldi	r19, 0xFF	; 255
    48c8:	c9 01       	movw	r24, r18
    48ca:	08 95       	ret

000048cc <_ZN7TwoWire4peekEv>:
    48cc:	e0 91 2c 06 	lds	r30, 0x062C	; 0x80062c <_ZN7TwoWire13rxBufferIndexE>
    48d0:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <_ZN7TwoWire14rxBufferLengthE>
    48d4:	e8 17       	cp	r30, r24
    48d6:	30 f4       	brcc	.+12     	; 0x48e4 <_ZN7TwoWire4peekEv+0x18>
    48d8:	f0 e0       	ldi	r31, 0x00	; 0
    48da:	e3 5d       	subi	r30, 0xD3	; 211
    48dc:	f9 4f       	sbci	r31, 0xF9	; 249
    48de:	80 81       	ld	r24, Z
    48e0:	90 e0       	ldi	r25, 0x00	; 0
    48e2:	08 95       	ret
    48e4:	8f ef       	ldi	r24, 0xFF	; 255
    48e6:	9f ef       	ldi	r25, 0xFF	; 255
    48e8:	08 95       	ret

000048ea <_ZN7TwoWire5flushEv>:
    48ea:	08 95       	ret

000048ec <_ZN7TwoWire16onReceiveServiceEPhi>:
    48ec:	cf 93       	push	r28
    48ee:	df 93       	push	r29
    48f0:	ec 01       	movw	r28, r24
    48f2:	e0 91 03 06 	lds	r30, 0x0603	; 0x800603 <_ZN7TwoWire14user_onReceiveE>
    48f6:	f0 91 04 06 	lds	r31, 0x0604	; 0x800604 <_ZN7TwoWire14user_onReceiveE+0x1>
    48fa:	30 97       	sbiw	r30, 0x00	; 0
    48fc:	f1 f0       	breq	.+60     	; 0x493a <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    48fe:	90 91 2c 06 	lds	r25, 0x062C	; 0x80062c <_ZN7TwoWire13rxBufferIndexE>
    4902:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <_ZN7TwoWire14rxBufferLengthE>
    4906:	98 17       	cp	r25, r24
    4908:	c0 f0       	brcs	.+48     	; 0x493a <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    490a:	90 e0       	ldi	r25, 0x00	; 0
    490c:	29 2f       	mov	r18, r25
    490e:	30 e0       	ldi	r19, 0x00	; 0
    4910:	26 17       	cp	r18, r22
    4912:	37 07       	cpc	r19, r23
    4914:	54 f4       	brge	.+20     	; 0x492a <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    4916:	de 01       	movw	r26, r28
    4918:	a2 0f       	add	r26, r18
    491a:	b3 1f       	adc	r27, r19
    491c:	4c 91       	ld	r20, X
    491e:	d9 01       	movw	r26, r18
    4920:	a3 5d       	subi	r26, 0xD3	; 211
    4922:	b9 4f       	sbci	r27, 0xF9	; 249
    4924:	4c 93       	st	X, r20
    4926:	9f 5f       	subi	r25, 0xFF	; 255
    4928:	f1 cf       	rjmp	.-30     	; 0x490c <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    492a:	10 92 2c 06 	sts	0x062C, r1	; 0x80062c <_ZN7TwoWire13rxBufferIndexE>
    492e:	60 93 2b 06 	sts	0x062B, r22	; 0x80062b <_ZN7TwoWire14rxBufferLengthE>
    4932:	cb 01       	movw	r24, r22
    4934:	df 91       	pop	r29
    4936:	cf 91       	pop	r28
    4938:	19 94       	eijmp
    493a:	df 91       	pop	r29
    493c:	cf 91       	pop	r28
    493e:	08 95       	ret

00004940 <_ZN7TwoWire16onRequestServiceEv>:
    4940:	e0 91 05 06 	lds	r30, 0x0605	; 0x800605 <_ZN7TwoWire14user_onRequestE>
    4944:	f0 91 06 06 	lds	r31, 0x0606	; 0x800606 <_ZN7TwoWire14user_onRequestE+0x1>
    4948:	30 97       	sbiw	r30, 0x00	; 0
    494a:	29 f0       	breq	.+10     	; 0x4956 <_ZN7TwoWire16onRequestServiceEv+0x16>
    494c:	10 92 09 06 	sts	0x0609, r1	; 0x800609 <_ZN7TwoWire13txBufferIndexE>
    4950:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <_ZN7TwoWire14txBufferLengthE>
    4954:	19 94       	eijmp
    4956:	08 95       	ret

00004958 <_ZN7TwoWire5writeEPKhj>:
    4958:	cf 92       	push	r12
    495a:	df 92       	push	r13
    495c:	ef 92       	push	r14
    495e:	ff 92       	push	r15
    4960:	0f 93       	push	r16
    4962:	1f 93       	push	r17
    4964:	cf 93       	push	r28
    4966:	df 93       	push	r29
    4968:	7c 01       	movw	r14, r24
    496a:	cb 01       	movw	r24, r22
    496c:	8a 01       	movw	r16, r20
    496e:	20 91 07 06 	lds	r18, 0x0607	; 0x800607 <_ZN7TwoWire12transmittingE>
    4972:	22 23       	and	r18, r18
    4974:	89 f0       	breq	.+34     	; 0x4998 <_ZN7TwoWire5writeEPKhj+0x40>
    4976:	eb 01       	movw	r28, r22
    4978:	6b 01       	movw	r12, r22
    497a:	c4 0e       	add	r12, r20
    497c:	d5 1e       	adc	r13, r21
    497e:	cc 15       	cp	r28, r12
    4980:	dd 05       	cpc	r29, r13
    4982:	61 f0       	breq	.+24     	; 0x499c <_ZN7TwoWire5writeEPKhj+0x44>
    4984:	69 91       	ld	r22, Y+
    4986:	d7 01       	movw	r26, r14
    4988:	ed 91       	ld	r30, X+
    498a:	fc 91       	ld	r31, X
    498c:	01 90       	ld	r0, Z+
    498e:	f0 81       	ld	r31, Z
    4990:	e0 2d       	mov	r30, r0
    4992:	c7 01       	movw	r24, r14
    4994:	19 95       	eicall
    4996:	f3 cf       	rjmp	.-26     	; 0x497e <_ZN7TwoWire5writeEPKhj+0x26>
    4998:	64 2f       	mov	r22, r20
    499a:	f5 db       	rcall	.-2070   	; 0x4186 <twi_transmit>
    499c:	c8 01       	movw	r24, r16
    499e:	df 91       	pop	r29
    49a0:	cf 91       	pop	r28
    49a2:	1f 91       	pop	r17
    49a4:	0f 91       	pop	r16
    49a6:	ff 90       	pop	r15
    49a8:	ef 90       	pop	r14
    49aa:	df 90       	pop	r13
    49ac:	cf 90       	pop	r12
    49ae:	08 95       	ret

000049b0 <_ZN7TwoWire5writeEh>:
    49b0:	cf 93       	push	r28
    49b2:	df 93       	push	r29
    49b4:	1f 92       	push	r1
    49b6:	cd b7       	in	r28, 0x3d	; 61
    49b8:	de b7       	in	r29, 0x3e	; 62
    49ba:	69 83       	std	Y+1, r22	; 0x01
    49bc:	20 91 07 06 	lds	r18, 0x0607	; 0x800607 <_ZN7TwoWire12transmittingE>
    49c0:	22 23       	and	r18, r18
    49c2:	d1 f0       	breq	.+52     	; 0x49f8 <_ZN7TwoWire5writeEh+0x48>
    49c4:	20 91 08 06 	lds	r18, 0x0608	; 0x800608 <_ZN7TwoWire14txBufferLengthE>
    49c8:	20 32       	cpi	r18, 0x20	; 32
    49ca:	40 f0       	brcs	.+16     	; 0x49dc <_ZN7TwoWire5writeEh+0x2c>
    49cc:	21 e0       	ldi	r18, 0x01	; 1
    49ce:	30 e0       	ldi	r19, 0x00	; 0
    49d0:	fc 01       	movw	r30, r24
    49d2:	33 83       	std	Z+3, r19	; 0x03
    49d4:	22 83       	std	Z+2, r18	; 0x02
    49d6:	80 e0       	ldi	r24, 0x00	; 0
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	14 c0       	rjmp	.+40     	; 0x4a04 <_ZN7TwoWire5writeEh+0x54>
    49dc:	80 91 09 06 	lds	r24, 0x0609	; 0x800609 <_ZN7TwoWire13txBufferIndexE>
    49e0:	e8 2f       	mov	r30, r24
    49e2:	f0 e0       	ldi	r31, 0x00	; 0
    49e4:	e6 5f       	subi	r30, 0xF6	; 246
    49e6:	f9 4f       	sbci	r31, 0xF9	; 249
    49e8:	99 81       	ldd	r25, Y+1	; 0x01
    49ea:	90 83       	st	Z, r25
    49ec:	8f 5f       	subi	r24, 0xFF	; 255
    49ee:	80 93 09 06 	sts	0x0609, r24	; 0x800609 <_ZN7TwoWire13txBufferIndexE>
    49f2:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <_ZN7TwoWire14txBufferLengthE>
    49f6:	04 c0       	rjmp	.+8      	; 0x4a00 <_ZN7TwoWire5writeEh+0x50>
    49f8:	61 e0       	ldi	r22, 0x01	; 1
    49fa:	ce 01       	movw	r24, r28
    49fc:	01 96       	adiw	r24, 0x01	; 1
    49fe:	c3 db       	rcall	.-2170   	; 0x4186 <twi_transmit>
    4a00:	81 e0       	ldi	r24, 0x01	; 1
    4a02:	90 e0       	ldi	r25, 0x00	; 0
    4a04:	0f 90       	pop	r0
    4a06:	df 91       	pop	r29
    4a08:	cf 91       	pop	r28
    4a0a:	08 95       	ret

00004a0c <_ZN7TwoWireC1Ev>:
    4a0c:	fc 01       	movw	r30, r24
    4a0e:	13 82       	std	Z+3, r1	; 0x03
    4a10:	12 82       	std	Z+2, r1	; 0x02
    4a12:	88 ee       	ldi	r24, 0xE8	; 232
    4a14:	93 e0       	ldi	r25, 0x03	; 3
    4a16:	a0 e0       	ldi	r26, 0x00	; 0
    4a18:	b0 e0       	ldi	r27, 0x00	; 0
    4a1a:	84 83       	std	Z+4, r24	; 0x04
    4a1c:	95 83       	std	Z+5, r25	; 0x05
    4a1e:	a6 83       	std	Z+6, r26	; 0x06
    4a20:	b7 83       	std	Z+7, r27	; 0x07
    4a22:	83 e8       	ldi	r24, 0x83	; 131
    4a24:	94 e0       	ldi	r25, 0x04	; 4
    4a26:	91 83       	std	Z+1, r25	; 0x01
    4a28:	80 83       	st	Z, r24
    4a2a:	08 95       	ret

00004a2c <_ZN7TwoWire5beginEv>:
    4a2c:	10 92 2c 06 	sts	0x062C, r1	; 0x80062c <_ZN7TwoWire13rxBufferIndexE>
    4a30:	10 92 2b 06 	sts	0x062B, r1	; 0x80062b <_ZN7TwoWire14rxBufferLengthE>
    4a34:	10 92 09 06 	sts	0x0609, r1	; 0x800609 <_ZN7TwoWire13txBufferIndexE>
    4a38:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <_ZN7TwoWire14txBufferLengthE>
    4a3c:	65 db       	rcall	.-2358   	; 0x4108 <twi_init>
    4a3e:	80 ea       	ldi	r24, 0xA0	; 160
    4a40:	94 e2       	ldi	r25, 0x24	; 36
    4a42:	ce db       	rcall	.-2148   	; 0x41e0 <twi_attachSlaveTxEvent>
    4a44:	86 e7       	ldi	r24, 0x76	; 118
    4a46:	94 e2       	ldi	r25, 0x24	; 36
    4a48:	c6 cb       	rjmp	.-2164   	; 0x41d6 <twi_attachSlaveRxEvent>

00004a4a <_ZN7TwoWire8setClockEm>:
    4a4a:	cb 01       	movw	r24, r22
    4a4c:	ba 01       	movw	r22, r20
    4a4e:	87 cb       	rjmp	.-2290   	; 0x415e <twi_setFrequency>

00004a50 <_ZN7TwoWire17beginTransmissionEh>:
    4a50:	81 e0       	ldi	r24, 0x01	; 1
    4a52:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <_ZN7TwoWire12transmittingE>
    4a56:	60 93 2a 06 	sts	0x062A, r22	; 0x80062a <_ZN7TwoWire9txAddressE>
    4a5a:	10 92 09 06 	sts	0x0609, r1	; 0x800609 <_ZN7TwoWire13txBufferIndexE>
    4a5e:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <_ZN7TwoWire14txBufferLengthE>
    4a62:	08 95       	ret

00004a64 <_ZN7TwoWire17beginTransmissionEi>:
    4a64:	f5 cf       	rjmp	.-22     	; 0x4a50 <_ZN7TwoWire17beginTransmissionEh>

00004a66 <_ZN7TwoWire15endTransmissionEh>:
    4a66:	0f 93       	push	r16
    4a68:	06 2f       	mov	r16, r22
    4a6a:	21 e0       	ldi	r18, 0x01	; 1
    4a6c:	40 91 08 06 	lds	r20, 0x0608	; 0x800608 <_ZN7TwoWire14txBufferLengthE>
    4a70:	6a e0       	ldi	r22, 0x0A	; 10
    4a72:	76 e0       	ldi	r23, 0x06	; 6
    4a74:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <_ZN7TwoWire9txAddressE>
    4a78:	b9 dc       	rcall	.-1678   	; 0x43ec <twi_writeTo>
    4a7a:	10 92 09 06 	sts	0x0609, r1	; 0x800609 <_ZN7TwoWire13txBufferIndexE>
    4a7e:	10 92 08 06 	sts	0x0608, r1	; 0x800608 <_ZN7TwoWire14txBufferLengthE>
    4a82:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <_ZN7TwoWire12transmittingE>
    4a86:	0f 91       	pop	r16
    4a88:	08 95       	ret

00004a8a <_ZN7TwoWire11requestFromEhhmhh>:
    4a8a:	4f 92       	push	r4
    4a8c:	5f 92       	push	r5
    4a8e:	6f 92       	push	r6
    4a90:	7f 92       	push	r7
    4a92:	af 92       	push	r10
    4a94:	bf 92       	push	r11
    4a96:	cf 92       	push	r12
    4a98:	ef 92       	push	r14
    4a9a:	ff 92       	push	r15
    4a9c:	0f 93       	push	r16
    4a9e:	1f 93       	push	r17
    4aa0:	cf 93       	push	r28
    4aa2:	df 93       	push	r29
    4aa4:	5c 01       	movw	r10, r24
    4aa6:	f6 2e       	mov	r15, r22
    4aa8:	d4 2f       	mov	r29, r20
    4aaa:	28 01       	movw	r4, r16
    4aac:	39 01       	movw	r6, r18
    4aae:	ee 20       	and	r14, r14
    4ab0:	11 f1       	breq	.+68     	; 0x4af6 <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    4ab2:	ce df       	rcall	.-100    	; 0x4a50 <_ZN7TwoWire17beginTransmissionEh>
    4ab4:	ce 2d       	mov	r28, r14
    4ab6:	c4 30       	cpi	r28, 0x04	; 4
    4ab8:	08 f0       	brcs	.+2      	; 0x4abc <_ZN7TwoWire11requestFromEhhmhh+0x32>
    4aba:	c3 e0       	ldi	r28, 0x03	; 3
    4abc:	c1 50       	subi	r28, 0x01	; 1
    4abe:	c0 f0       	brcs	.+48     	; 0x4af0 <_ZN7TwoWire11requestFromEhhmhh+0x66>
    4ac0:	28 e0       	ldi	r18, 0x08	; 8
    4ac2:	c2 9f       	mul	r28, r18
    4ac4:	c0 01       	movw	r24, r0
    4ac6:	11 24       	eor	r1, r1
    4ac8:	a3 01       	movw	r20, r6
    4aca:	92 01       	movw	r18, r4
    4acc:	04 c0       	rjmp	.+8      	; 0x4ad6 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    4ace:	56 95       	lsr	r21
    4ad0:	47 95       	ror	r20
    4ad2:	37 95       	ror	r19
    4ad4:	27 95       	ror	r18
    4ad6:	8a 95       	dec	r24
    4ad8:	d2 f7       	brpl	.-12     	; 0x4ace <_ZN7TwoWire11requestFromEhhmhh+0x44>
    4ada:	ca 01       	movw	r24, r20
    4adc:	b9 01       	movw	r22, r18
    4ade:	d5 01       	movw	r26, r10
    4ae0:	ed 91       	ld	r30, X+
    4ae2:	fc 91       	ld	r31, X
    4ae4:	01 90       	ld	r0, Z+
    4ae6:	f0 81       	ld	r31, Z
    4ae8:	e0 2d       	mov	r30, r0
    4aea:	c5 01       	movw	r24, r10
    4aec:	19 95       	eicall
    4aee:	e6 cf       	rjmp	.-52     	; 0x4abc <_ZN7TwoWire11requestFromEhhmhh+0x32>
    4af0:	60 e0       	ldi	r22, 0x00	; 0
    4af2:	c5 01       	movw	r24, r10
    4af4:	b8 df       	rcall	.-144    	; 0x4a66 <_ZN7TwoWire15endTransmissionEh>
    4af6:	4d 2f       	mov	r20, r29
    4af8:	d1 32       	cpi	r29, 0x21	; 33
    4afa:	08 f0       	brcs	.+2      	; 0x4afe <_ZN7TwoWire11requestFromEhhmhh+0x74>
    4afc:	40 e2       	ldi	r20, 0x20	; 32
    4afe:	2c 2d       	mov	r18, r12
    4b00:	6d e2       	ldi	r22, 0x2D	; 45
    4b02:	76 e0       	ldi	r23, 0x06	; 6
    4b04:	8f 2d       	mov	r24, r15
    4b06:	8b db       	rcall	.-2282   	; 0x421e <twi_readFrom>
    4b08:	10 92 2c 06 	sts	0x062C, r1	; 0x80062c <_ZN7TwoWire13rxBufferIndexE>
    4b0c:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <_ZN7TwoWire14rxBufferLengthE>
    4b10:	df 91       	pop	r29
    4b12:	cf 91       	pop	r28
    4b14:	1f 91       	pop	r17
    4b16:	0f 91       	pop	r16
    4b18:	ff 90       	pop	r15
    4b1a:	ef 90       	pop	r14
    4b1c:	cf 90       	pop	r12
    4b1e:	bf 90       	pop	r11
    4b20:	af 90       	pop	r10
    4b22:	7f 90       	pop	r7
    4b24:	6f 90       	pop	r6
    4b26:	5f 90       	pop	r5
    4b28:	4f 90       	pop	r4
    4b2a:	08 95       	ret

00004b2c <_ZN7TwoWire11requestFromEhhh>:
    4b2c:	cf 92       	push	r12
    4b2e:	ef 92       	push	r14
    4b30:	0f 93       	push	r16
    4b32:	1f 93       	push	r17
    4b34:	c2 2e       	mov	r12, r18
    4b36:	e1 2c       	mov	r14, r1
    4b38:	00 e0       	ldi	r16, 0x00	; 0
    4b3a:	10 e0       	ldi	r17, 0x00	; 0
    4b3c:	98 01       	movw	r18, r16
    4b3e:	a5 df       	rcall	.-182    	; 0x4a8a <_ZN7TwoWire11requestFromEhhmhh>
    4b40:	1f 91       	pop	r17
    4b42:	0f 91       	pop	r16
    4b44:	ef 90       	pop	r14
    4b46:	cf 90       	pop	r12
    4b48:	08 95       	ret

00004b4a <_ZN7TwoWire11requestFromEii>:
    4b4a:	21 e0       	ldi	r18, 0x01	; 1
    4b4c:	ef cf       	rjmp	.-34     	; 0x4b2c <_ZN7TwoWire11requestFromEhhh>

00004b4e <_ZN7TwoWire15endTransmissionEv>:
    4b4e:	61 e0       	ldi	r22, 0x01	; 1
    4b50:	8a cf       	rjmp	.-236    	; 0x4a66 <_ZN7TwoWire15endTransmissionEh>

00004b52 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    4b52:	87 ef       	ldi	r24, 0xF7	; 247
    4b54:	95 e0       	ldi	r25, 0x05	; 5
    4b56:	5a cf       	rjmp	.-332    	; 0x4a0c <_ZN7TwoWireC1Ev>

00004b58 <__subsf3>:
    4b58:	50 58       	subi	r21, 0x80	; 128

00004b5a <__addsf3>:
    4b5a:	bb 27       	eor	r27, r27
    4b5c:	aa 27       	eor	r26, r26
    4b5e:	0e d0       	rcall	.+28     	; 0x4b7c <__addsf3x>
    4b60:	70 c1       	rjmp	.+736    	; 0x4e42 <__fp_round>
    4b62:	61 d1       	rcall	.+706    	; 0x4e26 <__fp_pscA>
    4b64:	30 f0       	brcs	.+12     	; 0x4b72 <__addsf3+0x18>
    4b66:	66 d1       	rcall	.+716    	; 0x4e34 <__fp_pscB>
    4b68:	20 f0       	brcs	.+8      	; 0x4b72 <__addsf3+0x18>
    4b6a:	31 f4       	brne	.+12     	; 0x4b78 <__addsf3+0x1e>
    4b6c:	9f 3f       	cpi	r25, 0xFF	; 255
    4b6e:	11 f4       	brne	.+4      	; 0x4b74 <__addsf3+0x1a>
    4b70:	1e f4       	brtc	.+6      	; 0x4b78 <__addsf3+0x1e>
    4b72:	56 c1       	rjmp	.+684    	; 0x4e20 <__fp_nan>
    4b74:	0e f4       	brtc	.+2      	; 0x4b78 <__addsf3+0x1e>
    4b76:	e0 95       	com	r30
    4b78:	e7 fb       	bst	r30, 7
    4b7a:	4c c1       	rjmp	.+664    	; 0x4e14 <__fp_inf>

00004b7c <__addsf3x>:
    4b7c:	e9 2f       	mov	r30, r25
    4b7e:	72 d1       	rcall	.+740    	; 0x4e64 <__fp_split3>
    4b80:	80 f3       	brcs	.-32     	; 0x4b62 <__addsf3+0x8>
    4b82:	ba 17       	cp	r27, r26
    4b84:	62 07       	cpc	r22, r18
    4b86:	73 07       	cpc	r23, r19
    4b88:	84 07       	cpc	r24, r20
    4b8a:	95 07       	cpc	r25, r21
    4b8c:	18 f0       	brcs	.+6      	; 0x4b94 <__addsf3x+0x18>
    4b8e:	71 f4       	brne	.+28     	; 0x4bac <__addsf3x+0x30>
    4b90:	9e f5       	brtc	.+102    	; 0x4bf8 <__addsf3x+0x7c>
    4b92:	8a c1       	rjmp	.+788    	; 0x4ea8 <__fp_zero>
    4b94:	0e f4       	brtc	.+2      	; 0x4b98 <__addsf3x+0x1c>
    4b96:	e0 95       	com	r30
    4b98:	0b 2e       	mov	r0, r27
    4b9a:	ba 2f       	mov	r27, r26
    4b9c:	a0 2d       	mov	r26, r0
    4b9e:	0b 01       	movw	r0, r22
    4ba0:	b9 01       	movw	r22, r18
    4ba2:	90 01       	movw	r18, r0
    4ba4:	0c 01       	movw	r0, r24
    4ba6:	ca 01       	movw	r24, r20
    4ba8:	a0 01       	movw	r20, r0
    4baa:	11 24       	eor	r1, r1
    4bac:	ff 27       	eor	r31, r31
    4bae:	59 1b       	sub	r21, r25
    4bb0:	99 f0       	breq	.+38     	; 0x4bd8 <__addsf3x+0x5c>
    4bb2:	59 3f       	cpi	r21, 0xF9	; 249
    4bb4:	50 f4       	brcc	.+20     	; 0x4bca <__addsf3x+0x4e>
    4bb6:	50 3e       	cpi	r21, 0xE0	; 224
    4bb8:	68 f1       	brcs	.+90     	; 0x4c14 <__addsf3x+0x98>
    4bba:	1a 16       	cp	r1, r26
    4bbc:	f0 40       	sbci	r31, 0x00	; 0
    4bbe:	a2 2f       	mov	r26, r18
    4bc0:	23 2f       	mov	r18, r19
    4bc2:	34 2f       	mov	r19, r20
    4bc4:	44 27       	eor	r20, r20
    4bc6:	58 5f       	subi	r21, 0xF8	; 248
    4bc8:	f3 cf       	rjmp	.-26     	; 0x4bb0 <__addsf3x+0x34>
    4bca:	46 95       	lsr	r20
    4bcc:	37 95       	ror	r19
    4bce:	27 95       	ror	r18
    4bd0:	a7 95       	ror	r26
    4bd2:	f0 40       	sbci	r31, 0x00	; 0
    4bd4:	53 95       	inc	r21
    4bd6:	c9 f7       	brne	.-14     	; 0x4bca <__addsf3x+0x4e>
    4bd8:	7e f4       	brtc	.+30     	; 0x4bf8 <__addsf3x+0x7c>
    4bda:	1f 16       	cp	r1, r31
    4bdc:	ba 0b       	sbc	r27, r26
    4bde:	62 0b       	sbc	r22, r18
    4be0:	73 0b       	sbc	r23, r19
    4be2:	84 0b       	sbc	r24, r20
    4be4:	ba f0       	brmi	.+46     	; 0x4c14 <__addsf3x+0x98>
    4be6:	91 50       	subi	r25, 0x01	; 1
    4be8:	a1 f0       	breq	.+40     	; 0x4c12 <__addsf3x+0x96>
    4bea:	ff 0f       	add	r31, r31
    4bec:	bb 1f       	adc	r27, r27
    4bee:	66 1f       	adc	r22, r22
    4bf0:	77 1f       	adc	r23, r23
    4bf2:	88 1f       	adc	r24, r24
    4bf4:	c2 f7       	brpl	.-16     	; 0x4be6 <__addsf3x+0x6a>
    4bf6:	0e c0       	rjmp	.+28     	; 0x4c14 <__addsf3x+0x98>
    4bf8:	ba 0f       	add	r27, r26
    4bfa:	62 1f       	adc	r22, r18
    4bfc:	73 1f       	adc	r23, r19
    4bfe:	84 1f       	adc	r24, r20
    4c00:	48 f4       	brcc	.+18     	; 0x4c14 <__addsf3x+0x98>
    4c02:	87 95       	ror	r24
    4c04:	77 95       	ror	r23
    4c06:	67 95       	ror	r22
    4c08:	b7 95       	ror	r27
    4c0a:	f7 95       	ror	r31
    4c0c:	9e 3f       	cpi	r25, 0xFE	; 254
    4c0e:	08 f0       	brcs	.+2      	; 0x4c12 <__addsf3x+0x96>
    4c10:	b3 cf       	rjmp	.-154    	; 0x4b78 <__addsf3+0x1e>
    4c12:	93 95       	inc	r25
    4c14:	88 0f       	add	r24, r24
    4c16:	08 f0       	brcs	.+2      	; 0x4c1a <__addsf3x+0x9e>
    4c18:	99 27       	eor	r25, r25
    4c1a:	ee 0f       	add	r30, r30
    4c1c:	97 95       	ror	r25
    4c1e:	87 95       	ror	r24
    4c20:	08 95       	ret

00004c22 <__cmpsf2>:
    4c22:	d4 d0       	rcall	.+424    	; 0x4dcc <__fp_cmp>
    4c24:	08 f4       	brcc	.+2      	; 0x4c28 <__cmpsf2+0x6>
    4c26:	81 e0       	ldi	r24, 0x01	; 1
    4c28:	08 95       	ret

00004c2a <__divsf3>:
    4c2a:	0c d0       	rcall	.+24     	; 0x4c44 <__divsf3x>
    4c2c:	0a c1       	rjmp	.+532    	; 0x4e42 <__fp_round>
    4c2e:	02 d1       	rcall	.+516    	; 0x4e34 <__fp_pscB>
    4c30:	40 f0       	brcs	.+16     	; 0x4c42 <__divsf3+0x18>
    4c32:	f9 d0       	rcall	.+498    	; 0x4e26 <__fp_pscA>
    4c34:	30 f0       	brcs	.+12     	; 0x4c42 <__divsf3+0x18>
    4c36:	21 f4       	brne	.+8      	; 0x4c40 <__divsf3+0x16>
    4c38:	5f 3f       	cpi	r21, 0xFF	; 255
    4c3a:	19 f0       	breq	.+6      	; 0x4c42 <__divsf3+0x18>
    4c3c:	eb c0       	rjmp	.+470    	; 0x4e14 <__fp_inf>
    4c3e:	51 11       	cpse	r21, r1
    4c40:	34 c1       	rjmp	.+616    	; 0x4eaa <__fp_szero>
    4c42:	ee c0       	rjmp	.+476    	; 0x4e20 <__fp_nan>

00004c44 <__divsf3x>:
    4c44:	0f d1       	rcall	.+542    	; 0x4e64 <__fp_split3>
    4c46:	98 f3       	brcs	.-26     	; 0x4c2e <__divsf3+0x4>

00004c48 <__divsf3_pse>:
    4c48:	99 23       	and	r25, r25
    4c4a:	c9 f3       	breq	.-14     	; 0x4c3e <__divsf3+0x14>
    4c4c:	55 23       	and	r21, r21
    4c4e:	b1 f3       	breq	.-20     	; 0x4c3c <__divsf3+0x12>
    4c50:	95 1b       	sub	r25, r21
    4c52:	55 0b       	sbc	r21, r21
    4c54:	bb 27       	eor	r27, r27
    4c56:	aa 27       	eor	r26, r26
    4c58:	62 17       	cp	r22, r18
    4c5a:	73 07       	cpc	r23, r19
    4c5c:	84 07       	cpc	r24, r20
    4c5e:	38 f0       	brcs	.+14     	; 0x4c6e <__divsf3_pse+0x26>
    4c60:	9f 5f       	subi	r25, 0xFF	; 255
    4c62:	5f 4f       	sbci	r21, 0xFF	; 255
    4c64:	22 0f       	add	r18, r18
    4c66:	33 1f       	adc	r19, r19
    4c68:	44 1f       	adc	r20, r20
    4c6a:	aa 1f       	adc	r26, r26
    4c6c:	a9 f3       	breq	.-22     	; 0x4c58 <__divsf3_pse+0x10>
    4c6e:	33 d0       	rcall	.+102    	; 0x4cd6 <__divsf3_pse+0x8e>
    4c70:	0e 2e       	mov	r0, r30
    4c72:	3a f0       	brmi	.+14     	; 0x4c82 <__divsf3_pse+0x3a>
    4c74:	e0 e8       	ldi	r30, 0x80	; 128
    4c76:	30 d0       	rcall	.+96     	; 0x4cd8 <__divsf3_pse+0x90>
    4c78:	91 50       	subi	r25, 0x01	; 1
    4c7a:	50 40       	sbci	r21, 0x00	; 0
    4c7c:	e6 95       	lsr	r30
    4c7e:	00 1c       	adc	r0, r0
    4c80:	ca f7       	brpl	.-14     	; 0x4c74 <__divsf3_pse+0x2c>
    4c82:	29 d0       	rcall	.+82     	; 0x4cd6 <__divsf3_pse+0x8e>
    4c84:	fe 2f       	mov	r31, r30
    4c86:	27 d0       	rcall	.+78     	; 0x4cd6 <__divsf3_pse+0x8e>
    4c88:	66 0f       	add	r22, r22
    4c8a:	77 1f       	adc	r23, r23
    4c8c:	88 1f       	adc	r24, r24
    4c8e:	bb 1f       	adc	r27, r27
    4c90:	26 17       	cp	r18, r22
    4c92:	37 07       	cpc	r19, r23
    4c94:	48 07       	cpc	r20, r24
    4c96:	ab 07       	cpc	r26, r27
    4c98:	b0 e8       	ldi	r27, 0x80	; 128
    4c9a:	09 f0       	breq	.+2      	; 0x4c9e <__divsf3_pse+0x56>
    4c9c:	bb 0b       	sbc	r27, r27
    4c9e:	80 2d       	mov	r24, r0
    4ca0:	bf 01       	movw	r22, r30
    4ca2:	ff 27       	eor	r31, r31
    4ca4:	93 58       	subi	r25, 0x83	; 131
    4ca6:	5f 4f       	sbci	r21, 0xFF	; 255
    4ca8:	2a f0       	brmi	.+10     	; 0x4cb4 <__divsf3_pse+0x6c>
    4caa:	9e 3f       	cpi	r25, 0xFE	; 254
    4cac:	51 05       	cpc	r21, r1
    4cae:	68 f0       	brcs	.+26     	; 0x4cca <__divsf3_pse+0x82>
    4cb0:	b1 c0       	rjmp	.+354    	; 0x4e14 <__fp_inf>
    4cb2:	fb c0       	rjmp	.+502    	; 0x4eaa <__fp_szero>
    4cb4:	5f 3f       	cpi	r21, 0xFF	; 255
    4cb6:	ec f3       	brlt	.-6      	; 0x4cb2 <__divsf3_pse+0x6a>
    4cb8:	98 3e       	cpi	r25, 0xE8	; 232
    4cba:	dc f3       	brlt	.-10     	; 0x4cb2 <__divsf3_pse+0x6a>
    4cbc:	86 95       	lsr	r24
    4cbe:	77 95       	ror	r23
    4cc0:	67 95       	ror	r22
    4cc2:	b7 95       	ror	r27
    4cc4:	f7 95       	ror	r31
    4cc6:	9f 5f       	subi	r25, 0xFF	; 255
    4cc8:	c9 f7       	brne	.-14     	; 0x4cbc <__divsf3_pse+0x74>
    4cca:	88 0f       	add	r24, r24
    4ccc:	91 1d       	adc	r25, r1
    4cce:	96 95       	lsr	r25
    4cd0:	87 95       	ror	r24
    4cd2:	97 f9       	bld	r25, 7
    4cd4:	08 95       	ret
    4cd6:	e1 e0       	ldi	r30, 0x01	; 1
    4cd8:	66 0f       	add	r22, r22
    4cda:	77 1f       	adc	r23, r23
    4cdc:	88 1f       	adc	r24, r24
    4cde:	bb 1f       	adc	r27, r27
    4ce0:	62 17       	cp	r22, r18
    4ce2:	73 07       	cpc	r23, r19
    4ce4:	84 07       	cpc	r24, r20
    4ce6:	ba 07       	cpc	r27, r26
    4ce8:	20 f0       	brcs	.+8      	; 0x4cf2 <__divsf3_pse+0xaa>
    4cea:	62 1b       	sub	r22, r18
    4cec:	73 0b       	sbc	r23, r19
    4cee:	84 0b       	sbc	r24, r20
    4cf0:	ba 0b       	sbc	r27, r26
    4cf2:	ee 1f       	adc	r30, r30
    4cf4:	88 f7       	brcc	.-30     	; 0x4cd8 <__divsf3_pse+0x90>
    4cf6:	e0 95       	com	r30
    4cf8:	08 95       	ret

00004cfa <__fixunssfsi>:
    4cfa:	bc d0       	rcall	.+376    	; 0x4e74 <__fp_splitA>
    4cfc:	88 f0       	brcs	.+34     	; 0x4d20 <__fixunssfsi+0x26>
    4cfe:	9f 57       	subi	r25, 0x7F	; 127
    4d00:	90 f0       	brcs	.+36     	; 0x4d26 <__fixunssfsi+0x2c>
    4d02:	b9 2f       	mov	r27, r25
    4d04:	99 27       	eor	r25, r25
    4d06:	b7 51       	subi	r27, 0x17	; 23
    4d08:	a0 f0       	brcs	.+40     	; 0x4d32 <__fixunssfsi+0x38>
    4d0a:	d1 f0       	breq	.+52     	; 0x4d40 <__fixunssfsi+0x46>
    4d0c:	66 0f       	add	r22, r22
    4d0e:	77 1f       	adc	r23, r23
    4d10:	88 1f       	adc	r24, r24
    4d12:	99 1f       	adc	r25, r25
    4d14:	1a f0       	brmi	.+6      	; 0x4d1c <__fixunssfsi+0x22>
    4d16:	ba 95       	dec	r27
    4d18:	c9 f7       	brne	.-14     	; 0x4d0c <__fixunssfsi+0x12>
    4d1a:	12 c0       	rjmp	.+36     	; 0x4d40 <__fixunssfsi+0x46>
    4d1c:	b1 30       	cpi	r27, 0x01	; 1
    4d1e:	81 f0       	breq	.+32     	; 0x4d40 <__fixunssfsi+0x46>
    4d20:	c3 d0       	rcall	.+390    	; 0x4ea8 <__fp_zero>
    4d22:	b1 e0       	ldi	r27, 0x01	; 1
    4d24:	08 95       	ret
    4d26:	c0 c0       	rjmp	.+384    	; 0x4ea8 <__fp_zero>
    4d28:	67 2f       	mov	r22, r23
    4d2a:	78 2f       	mov	r23, r24
    4d2c:	88 27       	eor	r24, r24
    4d2e:	b8 5f       	subi	r27, 0xF8	; 248
    4d30:	39 f0       	breq	.+14     	; 0x4d40 <__fixunssfsi+0x46>
    4d32:	b9 3f       	cpi	r27, 0xF9	; 249
    4d34:	cc f3       	brlt	.-14     	; 0x4d28 <__fixunssfsi+0x2e>
    4d36:	86 95       	lsr	r24
    4d38:	77 95       	ror	r23
    4d3a:	67 95       	ror	r22
    4d3c:	b3 95       	inc	r27
    4d3e:	d9 f7       	brne	.-10     	; 0x4d36 <__fixunssfsi+0x3c>
    4d40:	3e f4       	brtc	.+14     	; 0x4d50 <__fixunssfsi+0x56>
    4d42:	90 95       	com	r25
    4d44:	80 95       	com	r24
    4d46:	70 95       	com	r23
    4d48:	61 95       	neg	r22
    4d4a:	7f 4f       	sbci	r23, 0xFF	; 255
    4d4c:	8f 4f       	sbci	r24, 0xFF	; 255
    4d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    4d50:	08 95       	ret

00004d52 <__floatunsisf>:
    4d52:	e8 94       	clt
    4d54:	09 c0       	rjmp	.+18     	; 0x4d68 <__floatsisf+0x12>

00004d56 <__floatsisf>:
    4d56:	97 fb       	bst	r25, 7
    4d58:	3e f4       	brtc	.+14     	; 0x4d68 <__floatsisf+0x12>
    4d5a:	90 95       	com	r25
    4d5c:	80 95       	com	r24
    4d5e:	70 95       	com	r23
    4d60:	61 95       	neg	r22
    4d62:	7f 4f       	sbci	r23, 0xFF	; 255
    4d64:	8f 4f       	sbci	r24, 0xFF	; 255
    4d66:	9f 4f       	sbci	r25, 0xFF	; 255
    4d68:	99 23       	and	r25, r25
    4d6a:	a9 f0       	breq	.+42     	; 0x4d96 <__floatsisf+0x40>
    4d6c:	f9 2f       	mov	r31, r25
    4d6e:	96 e9       	ldi	r25, 0x96	; 150
    4d70:	bb 27       	eor	r27, r27
    4d72:	93 95       	inc	r25
    4d74:	f6 95       	lsr	r31
    4d76:	87 95       	ror	r24
    4d78:	77 95       	ror	r23
    4d7a:	67 95       	ror	r22
    4d7c:	b7 95       	ror	r27
    4d7e:	f1 11       	cpse	r31, r1
    4d80:	f8 cf       	rjmp	.-16     	; 0x4d72 <__floatsisf+0x1c>
    4d82:	fa f4       	brpl	.+62     	; 0x4dc2 <__floatsisf+0x6c>
    4d84:	bb 0f       	add	r27, r27
    4d86:	11 f4       	brne	.+4      	; 0x4d8c <__floatsisf+0x36>
    4d88:	60 ff       	sbrs	r22, 0
    4d8a:	1b c0       	rjmp	.+54     	; 0x4dc2 <__floatsisf+0x6c>
    4d8c:	6f 5f       	subi	r22, 0xFF	; 255
    4d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    4d90:	8f 4f       	sbci	r24, 0xFF	; 255
    4d92:	9f 4f       	sbci	r25, 0xFF	; 255
    4d94:	16 c0       	rjmp	.+44     	; 0x4dc2 <__floatsisf+0x6c>
    4d96:	88 23       	and	r24, r24
    4d98:	11 f0       	breq	.+4      	; 0x4d9e <__floatsisf+0x48>
    4d9a:	96 e9       	ldi	r25, 0x96	; 150
    4d9c:	11 c0       	rjmp	.+34     	; 0x4dc0 <__floatsisf+0x6a>
    4d9e:	77 23       	and	r23, r23
    4da0:	21 f0       	breq	.+8      	; 0x4daa <__floatsisf+0x54>
    4da2:	9e e8       	ldi	r25, 0x8E	; 142
    4da4:	87 2f       	mov	r24, r23
    4da6:	76 2f       	mov	r23, r22
    4da8:	05 c0       	rjmp	.+10     	; 0x4db4 <__floatsisf+0x5e>
    4daa:	66 23       	and	r22, r22
    4dac:	71 f0       	breq	.+28     	; 0x4dca <__floatsisf+0x74>
    4dae:	96 e8       	ldi	r25, 0x86	; 134
    4db0:	86 2f       	mov	r24, r22
    4db2:	70 e0       	ldi	r23, 0x00	; 0
    4db4:	60 e0       	ldi	r22, 0x00	; 0
    4db6:	2a f0       	brmi	.+10     	; 0x4dc2 <__floatsisf+0x6c>
    4db8:	9a 95       	dec	r25
    4dba:	66 0f       	add	r22, r22
    4dbc:	77 1f       	adc	r23, r23
    4dbe:	88 1f       	adc	r24, r24
    4dc0:	da f7       	brpl	.-10     	; 0x4db8 <__floatsisf+0x62>
    4dc2:	88 0f       	add	r24, r24
    4dc4:	96 95       	lsr	r25
    4dc6:	87 95       	ror	r24
    4dc8:	97 f9       	bld	r25, 7
    4dca:	08 95       	ret

00004dcc <__fp_cmp>:
    4dcc:	99 0f       	add	r25, r25
    4dce:	00 08       	sbc	r0, r0
    4dd0:	55 0f       	add	r21, r21
    4dd2:	aa 0b       	sbc	r26, r26
    4dd4:	e0 e8       	ldi	r30, 0x80	; 128
    4dd6:	fe ef       	ldi	r31, 0xFE	; 254
    4dd8:	16 16       	cp	r1, r22
    4dda:	17 06       	cpc	r1, r23
    4ddc:	e8 07       	cpc	r30, r24
    4dde:	f9 07       	cpc	r31, r25
    4de0:	c0 f0       	brcs	.+48     	; 0x4e12 <__fp_cmp+0x46>
    4de2:	12 16       	cp	r1, r18
    4de4:	13 06       	cpc	r1, r19
    4de6:	e4 07       	cpc	r30, r20
    4de8:	f5 07       	cpc	r31, r21
    4dea:	98 f0       	brcs	.+38     	; 0x4e12 <__fp_cmp+0x46>
    4dec:	62 1b       	sub	r22, r18
    4dee:	73 0b       	sbc	r23, r19
    4df0:	84 0b       	sbc	r24, r20
    4df2:	95 0b       	sbc	r25, r21
    4df4:	39 f4       	brne	.+14     	; 0x4e04 <__fp_cmp+0x38>
    4df6:	0a 26       	eor	r0, r26
    4df8:	61 f0       	breq	.+24     	; 0x4e12 <__fp_cmp+0x46>
    4dfa:	23 2b       	or	r18, r19
    4dfc:	24 2b       	or	r18, r20
    4dfe:	25 2b       	or	r18, r21
    4e00:	21 f4       	brne	.+8      	; 0x4e0a <__fp_cmp+0x3e>
    4e02:	08 95       	ret
    4e04:	0a 26       	eor	r0, r26
    4e06:	09 f4       	brne	.+2      	; 0x4e0a <__fp_cmp+0x3e>
    4e08:	a1 40       	sbci	r26, 0x01	; 1
    4e0a:	a6 95       	lsr	r26
    4e0c:	8f ef       	ldi	r24, 0xFF	; 255
    4e0e:	81 1d       	adc	r24, r1
    4e10:	81 1d       	adc	r24, r1
    4e12:	08 95       	ret

00004e14 <__fp_inf>:
    4e14:	97 f9       	bld	r25, 7
    4e16:	9f 67       	ori	r25, 0x7F	; 127
    4e18:	80 e8       	ldi	r24, 0x80	; 128
    4e1a:	70 e0       	ldi	r23, 0x00	; 0
    4e1c:	60 e0       	ldi	r22, 0x00	; 0
    4e1e:	08 95       	ret

00004e20 <__fp_nan>:
    4e20:	9f ef       	ldi	r25, 0xFF	; 255
    4e22:	80 ec       	ldi	r24, 0xC0	; 192
    4e24:	08 95       	ret

00004e26 <__fp_pscA>:
    4e26:	00 24       	eor	r0, r0
    4e28:	0a 94       	dec	r0
    4e2a:	16 16       	cp	r1, r22
    4e2c:	17 06       	cpc	r1, r23
    4e2e:	18 06       	cpc	r1, r24
    4e30:	09 06       	cpc	r0, r25
    4e32:	08 95       	ret

00004e34 <__fp_pscB>:
    4e34:	00 24       	eor	r0, r0
    4e36:	0a 94       	dec	r0
    4e38:	12 16       	cp	r1, r18
    4e3a:	13 06       	cpc	r1, r19
    4e3c:	14 06       	cpc	r1, r20
    4e3e:	05 06       	cpc	r0, r21
    4e40:	08 95       	ret

00004e42 <__fp_round>:
    4e42:	09 2e       	mov	r0, r25
    4e44:	03 94       	inc	r0
    4e46:	00 0c       	add	r0, r0
    4e48:	11 f4       	brne	.+4      	; 0x4e4e <__fp_round+0xc>
    4e4a:	88 23       	and	r24, r24
    4e4c:	52 f0       	brmi	.+20     	; 0x4e62 <__fp_round+0x20>
    4e4e:	bb 0f       	add	r27, r27
    4e50:	40 f4       	brcc	.+16     	; 0x4e62 <__fp_round+0x20>
    4e52:	bf 2b       	or	r27, r31
    4e54:	11 f4       	brne	.+4      	; 0x4e5a <__fp_round+0x18>
    4e56:	60 ff       	sbrs	r22, 0
    4e58:	04 c0       	rjmp	.+8      	; 0x4e62 <__fp_round+0x20>
    4e5a:	6f 5f       	subi	r22, 0xFF	; 255
    4e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    4e5e:	8f 4f       	sbci	r24, 0xFF	; 255
    4e60:	9f 4f       	sbci	r25, 0xFF	; 255
    4e62:	08 95       	ret

00004e64 <__fp_split3>:
    4e64:	57 fd       	sbrc	r21, 7
    4e66:	90 58       	subi	r25, 0x80	; 128
    4e68:	44 0f       	add	r20, r20
    4e6a:	55 1f       	adc	r21, r21
    4e6c:	59 f0       	breq	.+22     	; 0x4e84 <__fp_splitA+0x10>
    4e6e:	5f 3f       	cpi	r21, 0xFF	; 255
    4e70:	71 f0       	breq	.+28     	; 0x4e8e <__fp_splitA+0x1a>
    4e72:	47 95       	ror	r20

00004e74 <__fp_splitA>:
    4e74:	88 0f       	add	r24, r24
    4e76:	97 fb       	bst	r25, 7
    4e78:	99 1f       	adc	r25, r25
    4e7a:	61 f0       	breq	.+24     	; 0x4e94 <__fp_splitA+0x20>
    4e7c:	9f 3f       	cpi	r25, 0xFF	; 255
    4e7e:	79 f0       	breq	.+30     	; 0x4e9e <__fp_splitA+0x2a>
    4e80:	87 95       	ror	r24
    4e82:	08 95       	ret
    4e84:	12 16       	cp	r1, r18
    4e86:	13 06       	cpc	r1, r19
    4e88:	14 06       	cpc	r1, r20
    4e8a:	55 1f       	adc	r21, r21
    4e8c:	f2 cf       	rjmp	.-28     	; 0x4e72 <__fp_split3+0xe>
    4e8e:	46 95       	lsr	r20
    4e90:	f1 df       	rcall	.-30     	; 0x4e74 <__fp_splitA>
    4e92:	08 c0       	rjmp	.+16     	; 0x4ea4 <__fp_splitA+0x30>
    4e94:	16 16       	cp	r1, r22
    4e96:	17 06       	cpc	r1, r23
    4e98:	18 06       	cpc	r1, r24
    4e9a:	99 1f       	adc	r25, r25
    4e9c:	f1 cf       	rjmp	.-30     	; 0x4e80 <__fp_splitA+0xc>
    4e9e:	86 95       	lsr	r24
    4ea0:	71 05       	cpc	r23, r1
    4ea2:	61 05       	cpc	r22, r1
    4ea4:	08 94       	sec
    4ea6:	08 95       	ret

00004ea8 <__fp_zero>:
    4ea8:	e8 94       	clt

00004eaa <__fp_szero>:
    4eaa:	bb 27       	eor	r27, r27
    4eac:	66 27       	eor	r22, r22
    4eae:	77 27       	eor	r23, r23
    4eb0:	cb 01       	movw	r24, r22
    4eb2:	97 f9       	bld	r25, 7
    4eb4:	08 95       	ret

00004eb6 <__gesf2>:
    4eb6:	8a df       	rcall	.-236    	; 0x4dcc <__fp_cmp>
    4eb8:	08 f4       	brcc	.+2      	; 0x4ebc <__gesf2+0x6>
    4eba:	8f ef       	ldi	r24, 0xFF	; 255
    4ebc:	08 95       	ret

00004ebe <__mulsf3>:
    4ebe:	0b d0       	rcall	.+22     	; 0x4ed6 <__mulsf3x>
    4ec0:	c0 cf       	rjmp	.-128    	; 0x4e42 <__fp_round>
    4ec2:	b1 df       	rcall	.-158    	; 0x4e26 <__fp_pscA>
    4ec4:	28 f0       	brcs	.+10     	; 0x4ed0 <__mulsf3+0x12>
    4ec6:	b6 df       	rcall	.-148    	; 0x4e34 <__fp_pscB>
    4ec8:	18 f0       	brcs	.+6      	; 0x4ed0 <__mulsf3+0x12>
    4eca:	95 23       	and	r25, r21
    4ecc:	09 f0       	breq	.+2      	; 0x4ed0 <__mulsf3+0x12>
    4ece:	a2 cf       	rjmp	.-188    	; 0x4e14 <__fp_inf>
    4ed0:	a7 cf       	rjmp	.-178    	; 0x4e20 <__fp_nan>
    4ed2:	11 24       	eor	r1, r1
    4ed4:	ea cf       	rjmp	.-44     	; 0x4eaa <__fp_szero>

00004ed6 <__mulsf3x>:
    4ed6:	c6 df       	rcall	.-116    	; 0x4e64 <__fp_split3>
    4ed8:	a0 f3       	brcs	.-24     	; 0x4ec2 <__mulsf3+0x4>

00004eda <__mulsf3_pse>:
    4eda:	95 9f       	mul	r25, r21
    4edc:	d1 f3       	breq	.-12     	; 0x4ed2 <__mulsf3+0x14>
    4ede:	95 0f       	add	r25, r21
    4ee0:	50 e0       	ldi	r21, 0x00	; 0
    4ee2:	55 1f       	adc	r21, r21
    4ee4:	62 9f       	mul	r22, r18
    4ee6:	f0 01       	movw	r30, r0
    4ee8:	72 9f       	mul	r23, r18
    4eea:	bb 27       	eor	r27, r27
    4eec:	f0 0d       	add	r31, r0
    4eee:	b1 1d       	adc	r27, r1
    4ef0:	63 9f       	mul	r22, r19
    4ef2:	aa 27       	eor	r26, r26
    4ef4:	f0 0d       	add	r31, r0
    4ef6:	b1 1d       	adc	r27, r1
    4ef8:	aa 1f       	adc	r26, r26
    4efa:	64 9f       	mul	r22, r20
    4efc:	66 27       	eor	r22, r22
    4efe:	b0 0d       	add	r27, r0
    4f00:	a1 1d       	adc	r26, r1
    4f02:	66 1f       	adc	r22, r22
    4f04:	82 9f       	mul	r24, r18
    4f06:	22 27       	eor	r18, r18
    4f08:	b0 0d       	add	r27, r0
    4f0a:	a1 1d       	adc	r26, r1
    4f0c:	62 1f       	adc	r22, r18
    4f0e:	73 9f       	mul	r23, r19
    4f10:	b0 0d       	add	r27, r0
    4f12:	a1 1d       	adc	r26, r1
    4f14:	62 1f       	adc	r22, r18
    4f16:	83 9f       	mul	r24, r19
    4f18:	a0 0d       	add	r26, r0
    4f1a:	61 1d       	adc	r22, r1
    4f1c:	22 1f       	adc	r18, r18
    4f1e:	74 9f       	mul	r23, r20
    4f20:	33 27       	eor	r19, r19
    4f22:	a0 0d       	add	r26, r0
    4f24:	61 1d       	adc	r22, r1
    4f26:	23 1f       	adc	r18, r19
    4f28:	84 9f       	mul	r24, r20
    4f2a:	60 0d       	add	r22, r0
    4f2c:	21 1d       	adc	r18, r1
    4f2e:	82 2f       	mov	r24, r18
    4f30:	76 2f       	mov	r23, r22
    4f32:	6a 2f       	mov	r22, r26
    4f34:	11 24       	eor	r1, r1
    4f36:	9f 57       	subi	r25, 0x7F	; 127
    4f38:	50 40       	sbci	r21, 0x00	; 0
    4f3a:	8a f0       	brmi	.+34     	; 0x4f5e <__mulsf3_pse+0x84>
    4f3c:	e1 f0       	breq	.+56     	; 0x4f76 <__mulsf3_pse+0x9c>
    4f3e:	88 23       	and	r24, r24
    4f40:	4a f0       	brmi	.+18     	; 0x4f54 <__mulsf3_pse+0x7a>
    4f42:	ee 0f       	add	r30, r30
    4f44:	ff 1f       	adc	r31, r31
    4f46:	bb 1f       	adc	r27, r27
    4f48:	66 1f       	adc	r22, r22
    4f4a:	77 1f       	adc	r23, r23
    4f4c:	88 1f       	adc	r24, r24
    4f4e:	91 50       	subi	r25, 0x01	; 1
    4f50:	50 40       	sbci	r21, 0x00	; 0
    4f52:	a9 f7       	brne	.-22     	; 0x4f3e <__mulsf3_pse+0x64>
    4f54:	9e 3f       	cpi	r25, 0xFE	; 254
    4f56:	51 05       	cpc	r21, r1
    4f58:	70 f0       	brcs	.+28     	; 0x4f76 <__mulsf3_pse+0x9c>
    4f5a:	5c cf       	rjmp	.-328    	; 0x4e14 <__fp_inf>
    4f5c:	a6 cf       	rjmp	.-180    	; 0x4eaa <__fp_szero>
    4f5e:	5f 3f       	cpi	r21, 0xFF	; 255
    4f60:	ec f3       	brlt	.-6      	; 0x4f5c <__mulsf3_pse+0x82>
    4f62:	98 3e       	cpi	r25, 0xE8	; 232
    4f64:	dc f3       	brlt	.-10     	; 0x4f5c <__mulsf3_pse+0x82>
    4f66:	86 95       	lsr	r24
    4f68:	77 95       	ror	r23
    4f6a:	67 95       	ror	r22
    4f6c:	b7 95       	ror	r27
    4f6e:	f7 95       	ror	r31
    4f70:	e7 95       	ror	r30
    4f72:	9f 5f       	subi	r25, 0xFF	; 255
    4f74:	c1 f7       	brne	.-16     	; 0x4f66 <__mulsf3_pse+0x8c>
    4f76:	fe 2b       	or	r31, r30
    4f78:	88 0f       	add	r24, r24
    4f7a:	91 1d       	adc	r25, r1
    4f7c:	96 95       	lsr	r25
    4f7e:	87 95       	ror	r24
    4f80:	97 f9       	bld	r25, 7
    4f82:	08 95       	ret
    4f84:	11 f4       	brne	.+4      	; 0x4f8a <__mulsf3_pse+0xb0>
    4f86:	0e f4       	brtc	.+2      	; 0x4f8a <__mulsf3_pse+0xb0>
    4f88:	4b cf       	rjmp	.-362    	; 0x4e20 <__fp_nan>
    4f8a:	3e c0       	rjmp	.+124    	; 0x5008 <__fp_mpack>

00004f8c <sqrt>:
    4f8c:	73 df       	rcall	.-282    	; 0x4e74 <__fp_splitA>
    4f8e:	d0 f3       	brcs	.-12     	; 0x4f84 <__mulsf3_pse+0xaa>
    4f90:	99 23       	and	r25, r25
    4f92:	d9 f3       	breq	.-10     	; 0x4f8a <__mulsf3_pse+0xb0>
    4f94:	ce f3       	brts	.-14     	; 0x4f88 <__mulsf3_pse+0xae>
    4f96:	9f 57       	subi	r25, 0x7F	; 127
    4f98:	55 0b       	sbc	r21, r21
    4f9a:	87 ff       	sbrs	r24, 7
    4f9c:	43 d0       	rcall	.+134    	; 0x5024 <__fp_norm2>
    4f9e:	00 24       	eor	r0, r0
    4fa0:	a0 e6       	ldi	r26, 0x60	; 96
    4fa2:	40 ea       	ldi	r20, 0xA0	; 160
    4fa4:	90 01       	movw	r18, r0
    4fa6:	80 58       	subi	r24, 0x80	; 128
    4fa8:	56 95       	lsr	r21
    4faa:	97 95       	ror	r25
    4fac:	28 f4       	brcc	.+10     	; 0x4fb8 <sqrt+0x2c>
    4fae:	80 5c       	subi	r24, 0xC0	; 192
    4fb0:	66 0f       	add	r22, r22
    4fb2:	77 1f       	adc	r23, r23
    4fb4:	88 1f       	adc	r24, r24
    4fb6:	20 f0       	brcs	.+8      	; 0x4fc0 <sqrt+0x34>
    4fb8:	26 17       	cp	r18, r22
    4fba:	37 07       	cpc	r19, r23
    4fbc:	48 07       	cpc	r20, r24
    4fbe:	30 f4       	brcc	.+12     	; 0x4fcc <sqrt+0x40>
    4fc0:	62 1b       	sub	r22, r18
    4fc2:	73 0b       	sbc	r23, r19
    4fc4:	84 0b       	sbc	r24, r20
    4fc6:	20 29       	or	r18, r0
    4fc8:	31 29       	or	r19, r1
    4fca:	4a 2b       	or	r20, r26
    4fcc:	a6 95       	lsr	r26
    4fce:	17 94       	ror	r1
    4fd0:	07 94       	ror	r0
    4fd2:	20 25       	eor	r18, r0
    4fd4:	31 25       	eor	r19, r1
    4fd6:	4a 27       	eor	r20, r26
    4fd8:	58 f7       	brcc	.-42     	; 0x4fb0 <sqrt+0x24>
    4fda:	66 0f       	add	r22, r22
    4fdc:	77 1f       	adc	r23, r23
    4fde:	88 1f       	adc	r24, r24
    4fe0:	20 f0       	brcs	.+8      	; 0x4fea <sqrt+0x5e>
    4fe2:	26 17       	cp	r18, r22
    4fe4:	37 07       	cpc	r19, r23
    4fe6:	48 07       	cpc	r20, r24
    4fe8:	30 f4       	brcc	.+12     	; 0x4ff6 <sqrt+0x6a>
    4fea:	62 0b       	sbc	r22, r18
    4fec:	73 0b       	sbc	r23, r19
    4fee:	84 0b       	sbc	r24, r20
    4ff0:	20 0d       	add	r18, r0
    4ff2:	31 1d       	adc	r19, r1
    4ff4:	41 1d       	adc	r20, r1
    4ff6:	a0 95       	com	r26
    4ff8:	81 f7       	brne	.-32     	; 0x4fda <sqrt+0x4e>
    4ffa:	b9 01       	movw	r22, r18
    4ffc:	84 2f       	mov	r24, r20
    4ffe:	91 58       	subi	r25, 0x81	; 129
    5000:	88 0f       	add	r24, r24
    5002:	96 95       	lsr	r25
    5004:	87 95       	ror	r24
    5006:	08 95       	ret

00005008 <__fp_mpack>:
    5008:	9f 3f       	cpi	r25, 0xFF	; 255
    500a:	31 f0       	breq	.+12     	; 0x5018 <__fp_mpack_finite+0xc>

0000500c <__fp_mpack_finite>:
    500c:	91 50       	subi	r25, 0x01	; 1
    500e:	20 f4       	brcc	.+8      	; 0x5018 <__fp_mpack_finite+0xc>
    5010:	87 95       	ror	r24
    5012:	77 95       	ror	r23
    5014:	67 95       	ror	r22
    5016:	b7 95       	ror	r27
    5018:	88 0f       	add	r24, r24
    501a:	91 1d       	adc	r25, r1
    501c:	96 95       	lsr	r25
    501e:	87 95       	ror	r24
    5020:	97 f9       	bld	r25, 7
    5022:	08 95       	ret

00005024 <__fp_norm2>:
    5024:	91 50       	subi	r25, 0x01	; 1
    5026:	50 40       	sbci	r21, 0x00	; 0
    5028:	66 0f       	add	r22, r22
    502a:	77 1f       	adc	r23, r23
    502c:	88 1f       	adc	r24, r24
    502e:	d2 f7       	brpl	.-12     	; 0x5024 <__fp_norm2>
    5030:	08 95       	ret

00005032 <__cxa_pure_virtual>:
    5032:	66 d7       	rcall	.+3788   	; 0x5f00 <abort>

00005034 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    5034:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    5036:	91 8d       	ldd	r25, Z+25	; 0x19
    5038:	22 8d       	ldd	r18, Z+26	; 0x1a
    503a:	89 2f       	mov	r24, r25
    503c:	90 e0       	ldi	r25, 0x00	; 0
    503e:	80 5c       	subi	r24, 0xC0	; 192
    5040:	9f 4f       	sbci	r25, 0xFF	; 255
    5042:	82 1b       	sub	r24, r18
    5044:	91 09       	sbc	r25, r1
}
    5046:	8f 73       	andi	r24, 0x3F	; 63
    5048:	99 27       	eor	r25, r25
    504a:	08 95       	ret

0000504c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    504c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    504e:	91 8d       	ldd	r25, Z+25	; 0x19
    5050:	82 8d       	ldd	r24, Z+26	; 0x1a
    5052:	98 17       	cp	r25, r24
    5054:	31 f0       	breq	.+12     	; 0x5062 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    5056:	82 8d       	ldd	r24, Z+26	; 0x1a
    5058:	e8 0f       	add	r30, r24
    505a:	f1 1d       	adc	r31, r1
    505c:	85 8d       	ldd	r24, Z+29	; 0x1d
    505e:	90 e0       	ldi	r25, 0x00	; 0
    5060:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    5062:	8f ef       	ldi	r24, 0xFF	; 255
    5064:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    5066:	08 95       	ret

00005068 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    5068:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    506a:	91 8d       	ldd	r25, Z+25	; 0x19
    506c:	82 8d       	ldd	r24, Z+26	; 0x1a
    506e:	98 17       	cp	r25, r24
    5070:	61 f0       	breq	.+24     	; 0x508a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    5072:	82 8d       	ldd	r24, Z+26	; 0x1a
    5074:	df 01       	movw	r26, r30
    5076:	a8 0f       	add	r26, r24
    5078:	b1 1d       	adc	r27, r1
    507a:	5d 96       	adiw	r26, 0x1d	; 29
    507c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    507e:	92 8d       	ldd	r25, Z+26	; 0x1a
    5080:	9f 5f       	subi	r25, 0xFF	; 255
    5082:	9f 73       	andi	r25, 0x3F	; 63
    5084:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    5086:	90 e0       	ldi	r25, 0x00	; 0
    5088:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    508a:	8f ef       	ldi	r24, 0xFF	; 255
    508c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    508e:	08 95       	ret

00005090 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    5090:	fc 01       	movw	r30, r24
    5092:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    5094:	44 8d       	ldd	r20, Z+28	; 0x1c
    5096:	25 2f       	mov	r18, r21
    5098:	30 e0       	ldi	r19, 0x00	; 0
    509a:	84 2f       	mov	r24, r20
    509c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    509e:	82 1b       	sub	r24, r18
    50a0:	93 0b       	sbc	r25, r19
    50a2:	54 17       	cp	r21, r20
    50a4:	10 f0       	brcs	.+4      	; 0x50aa <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    50a6:	cf 96       	adiw	r24, 0x3f	; 63
    50a8:	08 95       	ret
  return tail - head - 1;
    50aa:	01 97       	sbiw	r24, 0x01	; 1
}
    50ac:	08 95       	ret

000050ae <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    50ae:	84 ee       	ldi	r24, 0xE4	; 228
    50b0:	99 e2       	ldi	r25, 0x29	; 41
    50b2:	89 2b       	or	r24, r25
    50b4:	39 f0       	breq	.+14     	; 0x50c4 <_Z14serialEventRunv+0x16>
    50b6:	80 e0       	ldi	r24, 0x00	; 0
    50b8:	90 e0       	ldi	r25, 0x00	; 0
    50ba:	89 2b       	or	r24, r25
    50bc:	19 f0       	breq	.+6      	; 0x50c4 <_Z14serialEventRunv+0x16>
    50be:	84 d1       	rcall	.+776    	; 0x53c8 <_Z17Serial0_availablev>
    50c0:	81 11       	cpse	r24, r1
    50c2:	25 c0       	rjmp	.+74     	; 0x510e <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    50c4:	80 e0       	ldi	r24, 0x00	; 0
    50c6:	90 e0       	ldi	r25, 0x00	; 0
    50c8:	89 2b       	or	r24, r25
    50ca:	41 f0       	breq	.+16     	; 0x50dc <_Z14serialEventRunv+0x2e>
    50cc:	80 e0       	ldi	r24, 0x00	; 0
    50ce:	90 e0       	ldi	r25, 0x00	; 0
    50d0:	89 2b       	or	r24, r25
    50d2:	21 f0       	breq	.+8      	; 0x50dc <_Z14serialEventRunv+0x2e>
    50d4:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    50d8:	81 11       	cpse	r24, r1
    50da:	1c c0       	rjmp	.+56     	; 0x5114 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    50dc:	80 e0       	ldi	r24, 0x00	; 0
    50de:	90 e0       	ldi	r25, 0x00	; 0
    50e0:	89 2b       	or	r24, r25
    50e2:	41 f0       	breq	.+16     	; 0x50f4 <_Z14serialEventRunv+0x46>
    50e4:	80 e0       	ldi	r24, 0x00	; 0
    50e6:	90 e0       	ldi	r25, 0x00	; 0
    50e8:	89 2b       	or	r24, r25
    50ea:	21 f0       	breq	.+8      	; 0x50f4 <_Z14serialEventRunv+0x46>
    50ec:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    50f0:	81 11       	cpse	r24, r1
    50f2:	13 c0       	rjmp	.+38     	; 0x511a <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    50f4:	80 e0       	ldi	r24, 0x00	; 0
    50f6:	90 e0       	ldi	r25, 0x00	; 0
    50f8:	89 2b       	or	r24, r25
    50fa:	a1 f0       	breq	.+40     	; 0x5124 <_Z14serialEventRunv+0x76>
    50fc:	80 e0       	ldi	r24, 0x00	; 0
    50fe:	90 e0       	ldi	r25, 0x00	; 0
    5100:	89 2b       	or	r24, r25
    5102:	81 f0       	breq	.+32     	; 0x5124 <_Z14serialEventRunv+0x76>
    5104:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5108:	81 11       	cpse	r24, r1
    510a:	0a c0       	rjmp	.+20     	; 0x5120 <_Z14serialEventRunv+0x72>
    510c:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    510e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5112:	d8 cf       	rjmp	.-80     	; 0x50c4 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    5114:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5118:	e1 cf       	rjmp	.-62     	; 0x50dc <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    511a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    511e:	ea cf       	rjmp	.-44     	; 0x50f4 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    5120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    5124:	08 95       	ret

00005126 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    5126:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    5128:	84 8d       	ldd	r24, Z+28	; 0x1c
    512a:	df 01       	movw	r26, r30
    512c:	a8 0f       	add	r26, r24
    512e:	b1 1d       	adc	r27, r1
    5130:	a3 5a       	subi	r26, 0xA3	; 163
    5132:	bf 4f       	sbci	r27, 0xFF	; 255
    5134:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    5136:	84 8d       	ldd	r24, Z+28	; 0x1c
    5138:	90 e0       	ldi	r25, 0x00	; 0
    513a:	01 96       	adiw	r24, 0x01	; 1
    513c:	8f 73       	andi	r24, 0x3F	; 63
    513e:	99 27       	eor	r25, r25
    5140:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    5142:	a6 89       	ldd	r26, Z+22	; 0x16
    5144:	b7 89       	ldd	r27, Z+23	; 0x17
    5146:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    5148:	a0 89       	ldd	r26, Z+16	; 0x10
    514a:	b1 89       	ldd	r27, Z+17	; 0x11
    514c:	8c 91       	ld	r24, X
    514e:	83 70       	andi	r24, 0x03	; 3
    5150:	80 64       	ori	r24, 0x40	; 64
    5152:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    5154:	93 8d       	ldd	r25, Z+27	; 0x1b
    5156:	84 8d       	ldd	r24, Z+28	; 0x1c
    5158:	98 13       	cpse	r25, r24
    515a:	06 c0       	rjmp	.+12     	; 0x5168 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    515c:	02 88       	ldd	r0, Z+18	; 0x12
    515e:	f3 89       	ldd	r31, Z+19	; 0x13
    5160:	e0 2d       	mov	r30, r0
    5162:	80 81       	ld	r24, Z
    5164:	8f 7d       	andi	r24, 0xDF	; 223
    5166:	80 83       	st	Z, r24
    5168:	08 95       	ret

0000516a <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    516a:	ef 92       	push	r14
    516c:	ff 92       	push	r15
    516e:	0f 93       	push	r16
    5170:	1f 93       	push	r17
    5172:	cf 93       	push	r28
    5174:	df 93       	push	r29
    5176:	ec 01       	movw	r28, r24
  _written = true;
    5178:	81 e0       	ldi	r24, 0x01	; 1
    517a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    517c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    517e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5180:	98 13       	cpse	r25, r24
    5182:	05 c0       	rjmp	.+10     	; 0x518e <_ZN14HardwareSerial5writeEh+0x24>
    5184:	e8 89       	ldd	r30, Y+16	; 0x10
    5186:	f9 89       	ldd	r31, Y+17	; 0x11
    5188:	80 81       	ld	r24, Z
    518a:	85 fd       	sbrc	r24, 5
    518c:	25 c0       	rjmp	.+74     	; 0x51d8 <_ZN14HardwareSerial5writeEh+0x6e>
    518e:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    5190:	0b 8d       	ldd	r16, Y+27	; 0x1b
    5192:	10 e0       	ldi	r17, 0x00	; 0
    5194:	0f 5f       	subi	r16, 0xFF	; 255
    5196:	1f 4f       	sbci	r17, 0xFF	; 255
    5198:	0f 73       	andi	r16, 0x3F	; 63
    519a:	11 27       	eor	r17, r17
    519c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    519e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    51a0:	e8 12       	cpse	r14, r24
    51a2:	0b c0       	rjmp	.+22     	; 0x51ba <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    51a4:	0f b6       	in	r0, 0x3f	; 63
    51a6:	07 fc       	sbrc	r0, 7
    51a8:	fa cf       	rjmp	.-12     	; 0x519e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    51aa:	e8 89       	ldd	r30, Y+16	; 0x10
    51ac:	f9 89       	ldd	r31, Y+17	; 0x11
    51ae:	80 81       	ld	r24, Z
    51b0:	85 ff       	sbrs	r24, 5
    51b2:	f5 cf       	rjmp	.-22     	; 0x519e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    51b4:	ce 01       	movw	r24, r28
    51b6:	b7 df       	rcall	.-146    	; 0x5126 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    51b8:	f2 cf       	rjmp	.-28     	; 0x519e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    51ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    51bc:	fe 01       	movw	r30, r28
    51be:	e8 0f       	add	r30, r24
    51c0:	f1 1d       	adc	r31, r1
    51c2:	e3 5a       	subi	r30, 0xA3	; 163
    51c4:	ff 4f       	sbci	r31, 0xFF	; 255
    51c6:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    51c8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    51ca:	f8 94       	cli
    _tx_buffer_head = i;
    51cc:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    51ce:	ea 89       	ldd	r30, Y+18	; 0x12
    51d0:	fb 89       	ldd	r31, Y+19	; 0x13
    51d2:	80 81       	ld	r24, Z
    51d4:	80 62       	ori	r24, 0x20	; 32
    51d6:	0a c0       	rjmp	.+20     	; 0x51ec <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    51d8:	9f b7       	in	r25, 0x3f	; 63
    51da:	f8 94       	cli
      *_udr = c;
    51dc:	ee 89       	ldd	r30, Y+22	; 0x16
    51de:	ff 89       	ldd	r31, Y+23	; 0x17
    51e0:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    51e2:	e8 89       	ldd	r30, Y+16	; 0x10
    51e4:	f9 89       	ldd	r31, Y+17	; 0x11
    51e6:	80 81       	ld	r24, Z
    51e8:	83 70       	andi	r24, 0x03	; 3
    51ea:	80 64       	ori	r24, 0x40	; 64
    51ec:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    51ee:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    51f0:	81 e0       	ldi	r24, 0x01	; 1
    51f2:	90 e0       	ldi	r25, 0x00	; 0
    51f4:	df 91       	pop	r29
    51f6:	cf 91       	pop	r28
    51f8:	1f 91       	pop	r17
    51fa:	0f 91       	pop	r16
    51fc:	ff 90       	pop	r15
    51fe:	ef 90       	pop	r14
    5200:	08 95       	ret

00005202 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    5202:	cf 93       	push	r28
    5204:	df 93       	push	r29
    5206:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    5208:	88 8d       	ldd	r24, Y+24	; 0x18
    520a:	88 23       	and	r24, r24
    520c:	c1 f0       	breq	.+48     	; 0x523e <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    520e:	ea 89       	ldd	r30, Y+18	; 0x12
    5210:	fb 89       	ldd	r31, Y+19	; 0x13
    5212:	80 81       	ld	r24, Z
    5214:	85 fd       	sbrc	r24, 5
    5216:	05 c0       	rjmp	.+10     	; 0x5222 <_ZN14HardwareSerial5flushEv+0x20>
    5218:	a8 89       	ldd	r26, Y+16	; 0x10
    521a:	b9 89       	ldd	r27, Y+17	; 0x11
    521c:	8c 91       	ld	r24, X
    521e:	86 fd       	sbrc	r24, 6
    5220:	0e c0       	rjmp	.+28     	; 0x523e <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    5222:	0f b6       	in	r0, 0x3f	; 63
    5224:	07 fc       	sbrc	r0, 7
    5226:	f5 cf       	rjmp	.-22     	; 0x5212 <_ZN14HardwareSerial5flushEv+0x10>
    5228:	80 81       	ld	r24, Z
    522a:	85 ff       	sbrs	r24, 5
    522c:	f2 cf       	rjmp	.-28     	; 0x5212 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    522e:	a8 89       	ldd	r26, Y+16	; 0x10
    5230:	b9 89       	ldd	r27, Y+17	; 0x11
    5232:	8c 91       	ld	r24, X
    5234:	85 ff       	sbrs	r24, 5
    5236:	ed cf       	rjmp	.-38     	; 0x5212 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    5238:	ce 01       	movw	r24, r28
    523a:	75 df       	rcall	.-278    	; 0x5126 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    523c:	e8 cf       	rjmp	.-48     	; 0x520e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    523e:	df 91       	pop	r29
    5240:	cf 91       	pop	r28
    5242:	08 95       	ret

00005244 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    5244:	cf 92       	push	r12
    5246:	df 92       	push	r13
    5248:	ef 92       	push	r14
    524a:	ff 92       	push	r15
    524c:	1f 93       	push	r17
    524e:	cf 93       	push	r28
    5250:	df 93       	push	r29
    5252:	ec 01       	movw	r28, r24
    5254:	6a 01       	movw	r12, r20
    5256:	7b 01       	movw	r14, r22
    5258:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    525a:	e8 89       	ldd	r30, Y+16	; 0x10
    525c:	f9 89       	ldd	r31, Y+17	; 0x11
    525e:	82 e0       	ldi	r24, 0x02	; 2
    5260:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    5262:	41 15       	cp	r20, r1
    5264:	51 4e       	sbci	r21, 0xE1	; 225
    5266:	61 05       	cpc	r22, r1
    5268:	71 05       	cpc	r23, r1
    526a:	a9 f0       	breq	.+42     	; 0x5296 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    526c:	60 e0       	ldi	r22, 0x00	; 0
    526e:	79 e0       	ldi	r23, 0x09	; 9
    5270:	8d e3       	ldi	r24, 0x3D	; 61
    5272:	90 e0       	ldi	r25, 0x00	; 0
    5274:	a7 01       	movw	r20, r14
    5276:	96 01       	movw	r18, r12
    5278:	f8 d4       	rcall	.+2544   	; 0x5c6a <__udivmodsi4>
    527a:	da 01       	movw	r26, r20
    527c:	c9 01       	movw	r24, r18
    527e:	01 97       	sbiw	r24, 0x01	; 1
    5280:	a1 09       	sbc	r26, r1
    5282:	b1 09       	sbc	r27, r1
    5284:	b6 95       	lsr	r27
    5286:	a7 95       	ror	r26
    5288:	97 95       	ror	r25
    528a:	87 95       	ror	r24
    528c:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    528e:	21 15       	cp	r18, r1
    5290:	80 e1       	ldi	r24, 0x10	; 16
    5292:	38 07       	cpc	r19, r24
    5294:	a0 f0       	brcs	.+40     	; 0x52be <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    5296:	e8 89       	ldd	r30, Y+16	; 0x10
    5298:	f9 89       	ldd	r31, Y+17	; 0x11
    529a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    529c:	60 e8       	ldi	r22, 0x80	; 128
    529e:	74 e8       	ldi	r23, 0x84	; 132
    52a0:	8e e1       	ldi	r24, 0x1E	; 30
    52a2:	90 e0       	ldi	r25, 0x00	; 0
    52a4:	a7 01       	movw	r20, r14
    52a6:	96 01       	movw	r18, r12
    52a8:	e0 d4       	rcall	.+2496   	; 0x5c6a <__udivmodsi4>
    52aa:	da 01       	movw	r26, r20
    52ac:	c9 01       	movw	r24, r18
    52ae:	01 97       	sbiw	r24, 0x01	; 1
    52b0:	a1 09       	sbc	r26, r1
    52b2:	b1 09       	sbc	r27, r1
    52b4:	b6 95       	lsr	r27
    52b6:	a7 95       	ror	r26
    52b8:	97 95       	ror	r25
    52ba:	87 95       	ror	r24
    52bc:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    52be:	ec 85       	ldd	r30, Y+12	; 0x0c
    52c0:	fd 85       	ldd	r31, Y+13	; 0x0d
    52c2:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    52c4:	ee 85       	ldd	r30, Y+14	; 0x0e
    52c6:	ff 85       	ldd	r31, Y+15	; 0x0f
    52c8:	20 83       	st	Z, r18

  _written = false;
    52ca:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    52cc:	ec 89       	ldd	r30, Y+20	; 0x14
    52ce:	fd 89       	ldd	r31, Y+21	; 0x15
    52d0:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    52d2:	ea 89       	ldd	r30, Y+18	; 0x12
    52d4:	fb 89       	ldd	r31, Y+19	; 0x13
    52d6:	80 81       	ld	r24, Z
    52d8:	80 61       	ori	r24, 0x10	; 16
    52da:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    52dc:	ea 89       	ldd	r30, Y+18	; 0x12
    52de:	fb 89       	ldd	r31, Y+19	; 0x13
    52e0:	80 81       	ld	r24, Z
    52e2:	88 60       	ori	r24, 0x08	; 8
    52e4:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    52e6:	ea 89       	ldd	r30, Y+18	; 0x12
    52e8:	fb 89       	ldd	r31, Y+19	; 0x13
    52ea:	80 81       	ld	r24, Z
    52ec:	80 68       	ori	r24, 0x80	; 128
    52ee:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    52f0:	ea 89       	ldd	r30, Y+18	; 0x12
    52f2:	fb 89       	ldd	r31, Y+19	; 0x13
    52f4:	80 81       	ld	r24, Z
    52f6:	8f 7d       	andi	r24, 0xDF	; 223
    52f8:	80 83       	st	Z, r24
}
    52fa:	df 91       	pop	r29
    52fc:	cf 91       	pop	r28
    52fe:	1f 91       	pop	r17
    5300:	ff 90       	pop	r15
    5302:	ef 90       	pop	r14
    5304:	df 90       	pop	r13
    5306:	cf 90       	pop	r12
    5308:	08 95       	ret

0000530a <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    530a:	1f 92       	push	r1
    530c:	0f 92       	push	r0
    530e:	0f b6       	in	r0, 0x3f	; 63
    5310:	0f 92       	push	r0
    5312:	11 24       	eor	r1, r1
    5314:	0b b6       	in	r0, 0x3b	; 59
    5316:	0f 92       	push	r0
    5318:	2f 93       	push	r18
    531a:	8f 93       	push	r24
    531c:	9f 93       	push	r25
    531e:	ef 93       	push	r30
    5320:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5322:	e0 91 5d 06 	lds	r30, 0x065D	; 0x80065d <Serial+0x10>
    5326:	f0 91 5e 06 	lds	r31, 0x065E	; 0x80065e <Serial+0x11>
    532a:	80 81       	ld	r24, Z
    532c:	e0 91 63 06 	lds	r30, 0x0663	; 0x800663 <Serial+0x16>
    5330:	f0 91 64 06 	lds	r31, 0x0664	; 0x800664 <Serial+0x17>
    5334:	82 fd       	sbrc	r24, 2
    5336:	12 c0       	rjmp	.+36     	; 0x535c <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    5338:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    533a:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <Serial+0x19>
    533e:	8f 5f       	subi	r24, 0xFF	; 255
    5340:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    5342:	20 91 67 06 	lds	r18, 0x0667	; 0x800667 <Serial+0x1a>
    5346:	82 17       	cp	r24, r18
    5348:	51 f0       	breq	.+20     	; 0x535e <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    534a:	e0 91 66 06 	lds	r30, 0x0666	; 0x800666 <Serial+0x19>
    534e:	f0 e0       	ldi	r31, 0x00	; 0
    5350:	e3 5b       	subi	r30, 0xB3	; 179
    5352:	f9 4f       	sbci	r31, 0xF9	; 249
    5354:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    5356:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <Serial+0x19>
    535a:	01 c0       	rjmp	.+2      	; 0x535e <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    535c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    535e:	ff 91       	pop	r31
    5360:	ef 91       	pop	r30
    5362:	9f 91       	pop	r25
    5364:	8f 91       	pop	r24
    5366:	2f 91       	pop	r18
    5368:	0f 90       	pop	r0
    536a:	0b be       	out	0x3b, r0	; 59
    536c:	0f 90       	pop	r0
    536e:	0f be       	out	0x3f, r0	; 63
    5370:	0f 90       	pop	r0
    5372:	1f 90       	pop	r1
    5374:	18 95       	reti

00005376 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    5376:	1f 92       	push	r1
    5378:	0f 92       	push	r0
    537a:	0f b6       	in	r0, 0x3f	; 63
    537c:	0f 92       	push	r0
    537e:	11 24       	eor	r1, r1
    5380:	0b b6       	in	r0, 0x3b	; 59
    5382:	0f 92       	push	r0
    5384:	2f 93       	push	r18
    5386:	3f 93       	push	r19
    5388:	4f 93       	push	r20
    538a:	5f 93       	push	r21
    538c:	6f 93       	push	r22
    538e:	7f 93       	push	r23
    5390:	8f 93       	push	r24
    5392:	9f 93       	push	r25
    5394:	af 93       	push	r26
    5396:	bf 93       	push	r27
    5398:	ef 93       	push	r30
    539a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    539c:	8d e4       	ldi	r24, 0x4D	; 77
    539e:	96 e0       	ldi	r25, 0x06	; 6
    53a0:	c2 de       	rcall	.-636    	; 0x5126 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    53a2:	ff 91       	pop	r31
    53a4:	ef 91       	pop	r30
    53a6:	bf 91       	pop	r27
    53a8:	af 91       	pop	r26
    53aa:	9f 91       	pop	r25
    53ac:	8f 91       	pop	r24
    53ae:	7f 91       	pop	r23
    53b0:	6f 91       	pop	r22
    53b2:	5f 91       	pop	r21
    53b4:	4f 91       	pop	r20
    53b6:	3f 91       	pop	r19
    53b8:	2f 91       	pop	r18
    53ba:	0f 90       	pop	r0
    53bc:	0b be       	out	0x3b, r0	; 59
    53be:	0f 90       	pop	r0
    53c0:	0f be       	out	0x3f, r0	; 63
    53c2:	0f 90       	pop	r0
    53c4:	1f 90       	pop	r1
    53c6:	18 95       	reti

000053c8 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    53c8:	8d e4       	ldi	r24, 0x4D	; 77
    53ca:	96 e0       	ldi	r25, 0x06	; 6
    53cc:	33 de       	rcall	.-922    	; 0x5034 <_ZN14HardwareSerial9availableEv>
    53ce:	21 e0       	ldi	r18, 0x01	; 1
    53d0:	89 2b       	or	r24, r25
    53d2:	09 f4       	brne	.+2      	; 0x53d6 <_Z17Serial0_availablev+0xe>
    53d4:	20 e0       	ldi	r18, 0x00	; 0
}
    53d6:	82 2f       	mov	r24, r18
    53d8:	08 95       	ret

000053da <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    53da:	ed e4       	ldi	r30, 0x4D	; 77
    53dc:	f6 e0       	ldi	r31, 0x06	; 6
    53de:	13 82       	std	Z+3, r1	; 0x03
    53e0:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    53e2:	88 ee       	ldi	r24, 0xE8	; 232
    53e4:	93 e0       	ldi	r25, 0x03	; 3
    53e6:	a0 e0       	ldi	r26, 0x00	; 0
    53e8:	b0 e0       	ldi	r27, 0x00	; 0
    53ea:	84 83       	std	Z+4, r24	; 0x04
    53ec:	95 83       	std	Z+5, r25	; 0x05
    53ee:	a6 83       	std	Z+6, r26	; 0x06
    53f0:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    53f2:	85 e9       	ldi	r24, 0x95	; 149
    53f4:	94 e0       	ldi	r25, 0x04	; 4
    53f6:	91 83       	std	Z+1, r25	; 0x01
    53f8:	80 83       	st	Z, r24
    53fa:	85 ec       	ldi	r24, 0xC5	; 197
    53fc:	90 e0       	ldi	r25, 0x00	; 0
    53fe:	95 87       	std	Z+13, r25	; 0x0d
    5400:	84 87       	std	Z+12, r24	; 0x0c
    5402:	84 ec       	ldi	r24, 0xC4	; 196
    5404:	90 e0       	ldi	r25, 0x00	; 0
    5406:	97 87       	std	Z+15, r25	; 0x0f
    5408:	86 87       	std	Z+14, r24	; 0x0e
    540a:	80 ec       	ldi	r24, 0xC0	; 192
    540c:	90 e0       	ldi	r25, 0x00	; 0
    540e:	91 8b       	std	Z+17, r25	; 0x11
    5410:	80 8b       	std	Z+16, r24	; 0x10
    5412:	81 ec       	ldi	r24, 0xC1	; 193
    5414:	90 e0       	ldi	r25, 0x00	; 0
    5416:	93 8b       	std	Z+19, r25	; 0x13
    5418:	82 8b       	std	Z+18, r24	; 0x12
    541a:	82 ec       	ldi	r24, 0xC2	; 194
    541c:	90 e0       	ldi	r25, 0x00	; 0
    541e:	95 8b       	std	Z+21, r25	; 0x15
    5420:	84 8b       	std	Z+20, r24	; 0x14
    5422:	86 ec       	ldi	r24, 0xC6	; 198
    5424:	90 e0       	ldi	r25, 0x00	; 0
    5426:	97 8b       	std	Z+23, r25	; 0x17
    5428:	86 8b       	std	Z+22, r24	; 0x16
    542a:	11 8e       	std	Z+25, r1	; 0x19
    542c:	12 8e       	std	Z+26, r1	; 0x1a
    542e:	13 8e       	std	Z+27, r1	; 0x1b
    5430:	14 8e       	std	Z+28, r1	; 0x1c
    5432:	08 95       	ret

00005434 <initVariant>:
    5434:	08 95       	ret

00005436 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    5436:	d3 d2       	rcall	.+1446   	; 0x59de <init>

	initVariant();
    5438:	fd df       	rcall	.-6      	; 0x5434 <initVariant>
    543a:	0e 94 08 07 	call	0xe10	; 0xe10 <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    543e:	c7 e5       	ldi	r28, 0x57	; 87
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    5440:	d8 e2       	ldi	r29, 0x28	; 40
    5442:	0e 94 96 07 	call	0xf2c	; 0xf2c <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    5446:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    5448:	e1 f3       	breq	.-8      	; 0x5442 <main+0xc>
    544a:	31 de       	rcall	.-926    	; 0x50ae <_Z14serialEventRunv>
    544c:	fa cf       	rjmp	.-12     	; 0x5442 <main+0xc>

0000544e <_ZN5Print5writeEPKhj>:
    544e:	cf 92       	push	r12
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    5450:	df 92       	push	r13
    5452:	ef 92       	push	r14
    5454:	ff 92       	push	r15
    5456:	0f 93       	push	r16
    5458:	1f 93       	push	r17
    545a:	cf 93       	push	r28
    545c:	df 93       	push	r29
    545e:	6c 01       	movw	r12, r24
    5460:	7a 01       	movw	r14, r20
    5462:	8b 01       	movw	r16, r22
    5464:	c0 e0       	ldi	r28, 0x00	; 0
    5466:	d0 e0       	ldi	r29, 0x00	; 0
    5468:	ce 15       	cp	r28, r14
    546a:	df 05       	cpc	r29, r15
    546c:	81 f0       	breq	.+32     	; 0x548e <_ZN5Print5writeEPKhj+0x40>
    546e:	d8 01       	movw	r26, r16
    5470:	6d 91       	ld	r22, X+
    5472:	8d 01       	movw	r16, r26
    5474:	d6 01       	movw	r26, r12
    5476:	ed 91       	ld	r30, X+
    5478:	fc 91       	ld	r31, X
    547a:	01 90       	ld	r0, Z+
    547c:	f0 81       	ld	r31, Z
    547e:	e0 2d       	mov	r30, r0
    5480:	c6 01       	movw	r24, r12
    5482:	19 95       	eicall
    5484:	89 2b       	or	r24, r25
    5486:	11 f0       	breq	.+4      	; 0x548c <_ZN5Print5writeEPKhj+0x3e>
    5488:	21 96       	adiw	r28, 0x01	; 1
    548a:	ee cf       	rjmp	.-36     	; 0x5468 <_ZN5Print5writeEPKhj+0x1a>
    548c:	7e 01       	movw	r14, r28
    548e:	c7 01       	movw	r24, r14
    5490:	df 91       	pop	r29
    5492:	cf 91       	pop	r28
    5494:	1f 91       	pop	r17
    5496:	0f 91       	pop	r16
    5498:	ff 90       	pop	r15
    549a:	ef 90       	pop	r14
    549c:	df 90       	pop	r13
    549e:	cf 90       	pop	r12
    54a0:	08 95       	ret

000054a2 <_ZN5Print5writeEPKc>:
    54a2:	61 15       	cp	r22, r1
    54a4:	71 05       	cpc	r23, r1
    54a6:	79 f0       	breq	.+30     	; 0x54c6 <_ZN5Print5writeEPKc+0x24>
    54a8:	fb 01       	movw	r30, r22
    54aa:	01 90       	ld	r0, Z+
    54ac:	00 20       	and	r0, r0
    54ae:	e9 f7       	brne	.-6      	; 0x54aa <_ZN5Print5writeEPKc+0x8>
    54b0:	31 97       	sbiw	r30, 0x01	; 1
    54b2:	af 01       	movw	r20, r30
    54b4:	46 1b       	sub	r20, r22
    54b6:	57 0b       	sbc	r21, r23
    54b8:	dc 01       	movw	r26, r24
    54ba:	ed 91       	ld	r30, X+
    54bc:	fc 91       	ld	r31, X
    54be:	02 80       	ldd	r0, Z+2	; 0x02
    54c0:	f3 81       	ldd	r31, Z+3	; 0x03
    54c2:	e0 2d       	mov	r30, r0
    54c4:	19 94       	eijmp
    54c6:	80 e0       	ldi	r24, 0x00	; 0
    54c8:	90 e0       	ldi	r25, 0x00	; 0
    54ca:	08 95       	ret

000054cc <_ZN5Print5printEPK19__FlashStringHelper>:
    54cc:	ef 92       	push	r14
    54ce:	ff 92       	push	r15
    54d0:	0f 93       	push	r16
    54d2:	1f 93       	push	r17
    54d4:	cf 93       	push	r28
    54d6:	df 93       	push	r29
    54d8:	8c 01       	movw	r16, r24
    54da:	7b 01       	movw	r14, r22
    54dc:	c0 e0       	ldi	r28, 0x00	; 0
    54de:	d0 e0       	ldi	r29, 0x00	; 0
    54e0:	f7 01       	movw	r30, r14
    54e2:	ec 0f       	add	r30, r28
    54e4:	fd 1f       	adc	r31, r29
    54e6:	64 91       	lpm	r22, Z
    54e8:	66 23       	and	r22, r22
    54ea:	61 f0       	breq	.+24     	; 0x5504 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    54ec:	d8 01       	movw	r26, r16
    54ee:	ed 91       	ld	r30, X+
    54f0:	fc 91       	ld	r31, X
    54f2:	01 90       	ld	r0, Z+
    54f4:	f0 81       	ld	r31, Z
    54f6:	e0 2d       	mov	r30, r0
    54f8:	c8 01       	movw	r24, r16
    54fa:	19 95       	eicall
    54fc:	89 2b       	or	r24, r25
    54fe:	11 f0       	breq	.+4      	; 0x5504 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    5500:	21 96       	adiw	r28, 0x01	; 1
    5502:	ee cf       	rjmp	.-36     	; 0x54e0 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    5504:	ce 01       	movw	r24, r28
    5506:	df 91       	pop	r29
    5508:	cf 91       	pop	r28
    550a:	1f 91       	pop	r17
    550c:	0f 91       	pop	r16
    550e:	ff 90       	pop	r15
    5510:	ef 90       	pop	r14
    5512:	08 95       	ret

00005514 <_ZN5Print5printEPKc>:
    5514:	c6 cf       	rjmp	.-116    	; 0x54a2 <_ZN5Print5writeEPKc>

00005516 <_ZN5Print5printEc>:
    5516:	dc 01       	movw	r26, r24
    5518:	ed 91       	ld	r30, X+
    551a:	fc 91       	ld	r31, X
    551c:	01 90       	ld	r0, Z+
    551e:	f0 81       	ld	r31, Z
    5520:	e0 2d       	mov	r30, r0
    5522:	19 94       	eijmp

00005524 <_ZN5Print7printlnEv>:
    5524:	63 ea       	ldi	r22, 0xA3	; 163
    5526:	74 e0       	ldi	r23, 0x04	; 4
    5528:	bc cf       	rjmp	.-136    	; 0x54a2 <_ZN5Print5writeEPKc>

0000552a <_ZN5Print7printlnEPK19__FlashStringHelper>:
    552a:	0f 93       	push	r16
    552c:	1f 93       	push	r17
    552e:	cf 93       	push	r28
    5530:	df 93       	push	r29
    5532:	ec 01       	movw	r28, r24
    5534:	cb df       	rcall	.-106    	; 0x54cc <_ZN5Print5printEPK19__FlashStringHelper>
    5536:	8c 01       	movw	r16, r24
    5538:	ce 01       	movw	r24, r28
    553a:	f4 df       	rcall	.-24     	; 0x5524 <_ZN5Print7printlnEv>
    553c:	80 0f       	add	r24, r16
    553e:	91 1f       	adc	r25, r17
    5540:	df 91       	pop	r29
    5542:	cf 91       	pop	r28
    5544:	1f 91       	pop	r17
    5546:	0f 91       	pop	r16
    5548:	08 95       	ret

0000554a <_ZN5Print7printlnEPKc>:
    554a:	0f 93       	push	r16
    554c:	1f 93       	push	r17
    554e:	cf 93       	push	r28
    5550:	df 93       	push	r29
    5552:	ec 01       	movw	r28, r24
    5554:	a6 df       	rcall	.-180    	; 0x54a2 <_ZN5Print5writeEPKc>
    5556:	8c 01       	movw	r16, r24
    5558:	ce 01       	movw	r24, r28
    555a:	e4 df       	rcall	.-56     	; 0x5524 <_ZN5Print7printlnEv>
    555c:	80 0f       	add	r24, r16
    555e:	91 1f       	adc	r25, r17
    5560:	df 91       	pop	r29
    5562:	cf 91       	pop	r28
    5564:	1f 91       	pop	r17
    5566:	0f 91       	pop	r16
    5568:	08 95       	ret

0000556a <_ZN5Print11printNumberEmh>:
    556a:	8f 92       	push	r8
    556c:	9f 92       	push	r9
    556e:	af 92       	push	r10
    5570:	bf 92       	push	r11
    5572:	ef 92       	push	r14
    5574:	ff 92       	push	r15
    5576:	0f 93       	push	r16
    5578:	1f 93       	push	r17
    557a:	cf 93       	push	r28
    557c:	df 93       	push	r29
    557e:	cd b7       	in	r28, 0x3d	; 61
    5580:	de b7       	in	r29, 0x3e	; 62
    5582:	a1 97       	sbiw	r28, 0x21	; 33
    5584:	0f b6       	in	r0, 0x3f	; 63
    5586:	f8 94       	cli
    5588:	de bf       	out	0x3e, r29	; 62
    558a:	0f be       	out	0x3f, r0	; 63
    558c:	cd bf       	out	0x3d, r28	; 61
    558e:	7c 01       	movw	r14, r24
    5590:	fa 01       	movw	r30, r20
    5592:	cb 01       	movw	r24, r22
    5594:	19 a2       	std	Y+33, r1	; 0x21
    5596:	22 30       	cpi	r18, 0x02	; 2
    5598:	08 f4       	brcc	.+2      	; 0x559c <_ZN5Print11printNumberEmh+0x32>
    559a:	2a e0       	ldi	r18, 0x0A	; 10
    559c:	8e 01       	movw	r16, r28
    559e:	0f 5d       	subi	r16, 0xDF	; 223
    55a0:	1f 4f       	sbci	r17, 0xFF	; 255
    55a2:	82 2e       	mov	r8, r18
    55a4:	91 2c       	mov	r9, r1
    55a6:	a1 2c       	mov	r10, r1
    55a8:	b1 2c       	mov	r11, r1
    55aa:	bf 01       	movw	r22, r30
    55ac:	a5 01       	movw	r20, r10
    55ae:	94 01       	movw	r18, r8
    55b0:	5c d3       	rcall	.+1720   	; 0x5c6a <__udivmodsi4>
    55b2:	f9 01       	movw	r30, r18
    55b4:	ca 01       	movw	r24, r20
    55b6:	01 50       	subi	r16, 0x01	; 1
    55b8:	11 09       	sbc	r17, r1
    55ba:	6a 30       	cpi	r22, 0x0A	; 10
    55bc:	10 f4       	brcc	.+4      	; 0x55c2 <_ZN5Print11printNumberEmh+0x58>
    55be:	60 5d       	subi	r22, 0xD0	; 208
    55c0:	01 c0       	rjmp	.+2      	; 0x55c4 <_ZN5Print11printNumberEmh+0x5a>
    55c2:	69 5c       	subi	r22, 0xC9	; 201
    55c4:	d8 01       	movw	r26, r16
    55c6:	6c 93       	st	X, r22
    55c8:	23 2b       	or	r18, r19
    55ca:	24 2b       	or	r18, r20
    55cc:	25 2b       	or	r18, r21
    55ce:	69 f7       	brne	.-38     	; 0x55aa <_ZN5Print11printNumberEmh+0x40>
    55d0:	b8 01       	movw	r22, r16
    55d2:	c7 01       	movw	r24, r14
    55d4:	66 df       	rcall	.-308    	; 0x54a2 <_ZN5Print5writeEPKc>
    55d6:	a1 96       	adiw	r28, 0x21	; 33
    55d8:	0f b6       	in	r0, 0x3f	; 63
    55da:	f8 94       	cli
    55dc:	de bf       	out	0x3e, r29	; 62
    55de:	0f be       	out	0x3f, r0	; 63
    55e0:	cd bf       	out	0x3d, r28	; 61
    55e2:	df 91       	pop	r29
    55e4:	cf 91       	pop	r28
    55e6:	1f 91       	pop	r17
    55e8:	0f 91       	pop	r16
    55ea:	ff 90       	pop	r15
    55ec:	ef 90       	pop	r14
    55ee:	bf 90       	pop	r11
    55f0:	af 90       	pop	r10
    55f2:	9f 90       	pop	r9
    55f4:	8f 90       	pop	r8
    55f6:	08 95       	ret

000055f8 <_ZN5Print5printEmi>:
    55f8:	21 15       	cp	r18, r1
    55fa:	31 05       	cpc	r19, r1
    55fc:	41 f4       	brne	.+16     	; 0x560e <_ZN5Print5printEmi+0x16>
    55fe:	dc 01       	movw	r26, r24
    5600:	ed 91       	ld	r30, X+
    5602:	fc 91       	ld	r31, X
    5604:	01 90       	ld	r0, Z+
    5606:	f0 81       	ld	r31, Z
    5608:	e0 2d       	mov	r30, r0
    560a:	64 2f       	mov	r22, r20
    560c:	19 94       	eijmp
    560e:	ad cf       	rjmp	.-166    	; 0x556a <_ZN5Print11printNumberEmh>

00005610 <_ZN5Print5printEji>:
    5610:	9a 01       	movw	r18, r20
    5612:	ab 01       	movw	r20, r22
    5614:	60 e0       	ldi	r22, 0x00	; 0
    5616:	70 e0       	ldi	r23, 0x00	; 0
    5618:	ef cf       	rjmp	.-34     	; 0x55f8 <_ZN5Print5printEmi>

0000561a <_ZN5Print5printEli>:
    561a:	cf 92       	push	r12
    561c:	df 92       	push	r13
    561e:	ef 92       	push	r14
    5620:	ff 92       	push	r15
    5622:	0f 93       	push	r16
    5624:	1f 93       	push	r17
    5626:	cf 93       	push	r28
    5628:	df 93       	push	r29
    562a:	21 15       	cp	r18, r1
    562c:	31 05       	cpc	r19, r1
    562e:	81 f4       	brne	.+32     	; 0x5650 <_ZN5Print5printEli+0x36>
    5630:	dc 01       	movw	r26, r24
    5632:	ed 91       	ld	r30, X+
    5634:	fc 91       	ld	r31, X
    5636:	01 90       	ld	r0, Z+
    5638:	f0 81       	ld	r31, Z
    563a:	e0 2d       	mov	r30, r0
    563c:	64 2f       	mov	r22, r20
    563e:	df 91       	pop	r29
    5640:	cf 91       	pop	r28
    5642:	1f 91       	pop	r17
    5644:	0f 91       	pop	r16
    5646:	ff 90       	pop	r15
    5648:	ef 90       	pop	r14
    564a:	df 90       	pop	r13
    564c:	cf 90       	pop	r12
    564e:	19 94       	eijmp
    5650:	2a 30       	cpi	r18, 0x0A	; 10
    5652:	31 05       	cpc	r19, r1
    5654:	f1 f4       	brne	.+60     	; 0x5692 <_ZN5Print5printEli+0x78>
    5656:	77 ff       	sbrs	r23, 7
    5658:	1b c0       	rjmp	.+54     	; 0x5690 <_ZN5Print5printEli+0x76>
    565a:	6a 01       	movw	r12, r20
    565c:	7b 01       	movw	r14, r22
    565e:	ec 01       	movw	r28, r24
    5660:	6d e2       	ldi	r22, 0x2D	; 45
    5662:	59 df       	rcall	.-334    	; 0x5516 <_ZN5Print5printEc>
    5664:	8c 01       	movw	r16, r24
    5666:	44 27       	eor	r20, r20
    5668:	55 27       	eor	r21, r21
    566a:	ba 01       	movw	r22, r20
    566c:	4c 19       	sub	r20, r12
    566e:	5d 09       	sbc	r21, r13
    5670:	6e 09       	sbc	r22, r14
    5672:	7f 09       	sbc	r23, r15
    5674:	2a e0       	ldi	r18, 0x0A	; 10
    5676:	ce 01       	movw	r24, r28
    5678:	78 df       	rcall	.-272    	; 0x556a <_ZN5Print11printNumberEmh>
    567a:	80 0f       	add	r24, r16
    567c:	91 1f       	adc	r25, r17
    567e:	df 91       	pop	r29
    5680:	cf 91       	pop	r28
    5682:	1f 91       	pop	r17
    5684:	0f 91       	pop	r16
    5686:	ff 90       	pop	r15
    5688:	ef 90       	pop	r14
    568a:	df 90       	pop	r13
    568c:	cf 90       	pop	r12
    568e:	08 95       	ret
    5690:	2a e0       	ldi	r18, 0x0A	; 10
    5692:	df 91       	pop	r29
    5694:	cf 91       	pop	r28
    5696:	1f 91       	pop	r17
    5698:	0f 91       	pop	r16
    569a:	ff 90       	pop	r15
    569c:	ef 90       	pop	r14
    569e:	df 90       	pop	r13
    56a0:	cf 90       	pop	r12
    56a2:	63 cf       	rjmp	.-314    	; 0x556a <_ZN5Print11printNumberEmh>

000056a4 <_ZN5Print5printEii>:
    56a4:	9a 01       	movw	r18, r20
    56a6:	ab 01       	movw	r20, r22
    56a8:	77 0f       	add	r23, r23
    56aa:	66 0b       	sbc	r22, r22
    56ac:	77 0b       	sbc	r23, r23
    56ae:	b5 cf       	rjmp	.-150    	; 0x561a <_ZN5Print5printEli>

000056b0 <_ZN5Print7printlnEii>:
    56b0:	0f 93       	push	r16
    56b2:	1f 93       	push	r17
    56b4:	cf 93       	push	r28
    56b6:	df 93       	push	r29
    56b8:	ec 01       	movw	r28, r24
    56ba:	f4 df       	rcall	.-24     	; 0x56a4 <_ZN5Print5printEii>
    56bc:	8c 01       	movw	r16, r24
    56be:	ce 01       	movw	r24, r28
    56c0:	31 df       	rcall	.-414    	; 0x5524 <_ZN5Print7printlnEv>
    56c2:	80 0f       	add	r24, r16
    56c4:	91 1f       	adc	r25, r17
    56c6:	df 91       	pop	r29
    56c8:	cf 91       	pop	r28
    56ca:	1f 91       	pop	r17
    56cc:	0f 91       	pop	r16
    56ce:	08 95       	ret

000056d0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    56d0:	7f 92       	push	r7
    56d2:	8f 92       	push	r8
    56d4:	9f 92       	push	r9
    56d6:	af 92       	push	r10
    56d8:	bf 92       	push	r11
    56da:	cf 92       	push	r12
    56dc:	df 92       	push	r13
    56de:	ef 92       	push	r14
    56e0:	ff 92       	push	r15
    56e2:	0f 93       	push	r16
    56e4:	1f 93       	push	r17
    56e6:	cf 93       	push	r28
    56e8:	df 93       	push	r29
    56ea:	8c 01       	movw	r16, r24
    56ec:	6a 01       	movw	r12, r20
    56ee:	7b 01       	movw	r14, r22
    56f0:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    56f2:	9a 01       	movw	r18, r20
    56f4:	ab 01       	movw	r20, r22
    56f6:	c7 01       	movw	r24, r14
    56f8:	b6 01       	movw	r22, r12
    56fa:	93 d2       	rcall	.+1318   	; 0x5c22 <__unordsf2>
    56fc:	88 23       	and	r24, r24
    56fe:	19 f0       	breq	.+6      	; 0x5706 <_ZN5Print10printFloatEdh+0x36>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    5700:	66 ea       	ldi	r22, 0xA6	; 166
    5702:	74 e0       	ldi	r23, 0x04	; 4
    5704:	24 c0       	rjmp	.+72     	; 0x574e <_ZN5Print10printFloatEdh+0x7e>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    5706:	46 01       	movw	r8, r12
    5708:	57 01       	movw	r10, r14
    570a:	e8 94       	clt
    570c:	b7 f8       	bld	r11, 7
    570e:	2f ef       	ldi	r18, 0xFF	; 255
    5710:	3f ef       	ldi	r19, 0xFF	; 255
    5712:	4f e7       	ldi	r20, 0x7F	; 127
    5714:	5f e7       	ldi	r21, 0x7F	; 127
    5716:	c5 01       	movw	r24, r10
    5718:	b4 01       	movw	r22, r8
    571a:	83 d2       	rcall	.+1286   	; 0x5c22 <__unordsf2>
    571c:	81 11       	cpse	r24, r1
    571e:	0c c0       	rjmp	.+24     	; 0x5738 <_ZN5Print10printFloatEdh+0x68>
    5720:	2f ef       	ldi	r18, 0xFF	; 255
    5722:	3f ef       	ldi	r19, 0xFF	; 255
    5724:	4f e7       	ldi	r20, 0x7F	; 127
    5726:	5f e7       	ldi	r21, 0x7F	; 127
    5728:	c5 01       	movw	r24, r10
    572a:	b4 01       	movw	r22, r8
    572c:	7a da       	rcall	.-2828   	; 0x4c22 <__cmpsf2>
    572e:	18 16       	cp	r1, r24
    5730:	1c f4       	brge	.+6      	; 0x5738 <_ZN5Print10printFloatEdh+0x68>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    5732:	6a ea       	ldi	r22, 0xAA	; 170
    5734:	74 e0       	ldi	r23, 0x04	; 4
    5736:	0b c0       	rjmp	.+22     	; 0x574e <_ZN5Print10printFloatEdh+0x7e>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    5738:	2f ef       	ldi	r18, 0xFF	; 255
    573a:	3f ef       	ldi	r19, 0xFF	; 255
    573c:	4f e7       	ldi	r20, 0x7F	; 127
    573e:	5f e4       	ldi	r21, 0x4F	; 79
    5740:	c7 01       	movw	r24, r14
    5742:	b6 01       	movw	r22, r12
    5744:	b8 db       	rcall	.-2192   	; 0x4eb6 <__gesf2>
    5746:	18 16       	cp	r1, r24
    5748:	8c f4       	brge	.+34     	; 0x576c <_ZN5Print10printFloatEdh+0x9c>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    574a:	6e ea       	ldi	r22, 0xAE	; 174
    574c:	74 e0       	ldi	r23, 0x04	; 4
    574e:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    5750:	df 91       	pop	r29
    5752:	cf 91       	pop	r28
    5754:	1f 91       	pop	r17
    5756:	0f 91       	pop	r16
    5758:	ff 90       	pop	r15
    575a:	ef 90       	pop	r14
    575c:	df 90       	pop	r13
    575e:	cf 90       	pop	r12
    5760:	bf 90       	pop	r11
    5762:	af 90       	pop	r10
    5764:	9f 90       	pop	r9
    5766:	8f 90       	pop	r8
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    5768:	7f 90       	pop	r7
    576a:	9b ce       	rjmp	.-714    	; 0x54a2 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    576c:	2f ef       	ldi	r18, 0xFF	; 255
    576e:	3f ef       	ldi	r19, 0xFF	; 255
    5770:	4f e7       	ldi	r20, 0x7F	; 127
    5772:	5f ec       	ldi	r21, 0xCF	; 207
    5774:	c7 01       	movw	r24, r14
    5776:	b6 01       	movw	r22, r12
    5778:	54 da       	rcall	.-2904   	; 0x4c22 <__cmpsf2>
    577a:	87 fd       	sbrc	r24, 7
    577c:	e6 cf       	rjmp	.-52     	; 0x574a <_ZN5Print10printFloatEdh+0x7a>
  
  // Handle negative numbers
  if (number < 0.0)
    577e:	20 e0       	ldi	r18, 0x00	; 0
    5780:	30 e0       	ldi	r19, 0x00	; 0
    5782:	a9 01       	movw	r20, r18
    5784:	c7 01       	movw	r24, r14
    5786:	b6 01       	movw	r22, r12
    5788:	4c da       	rcall	.-2920   	; 0x4c22 <__cmpsf2>
    578a:	87 ff       	sbrs	r24, 7
    578c:	09 c0       	rjmp	.+18     	; 0x57a0 <_ZN5Print10printFloatEdh+0xd0>
  {
     n += print('-');
    578e:	6d e2       	ldi	r22, 0x2D	; 45
    5790:	c8 01       	movw	r24, r16
    5792:	c1 de       	rcall	.-638    	; 0x5516 <_ZN5Print5printEc>
    5794:	ec 01       	movw	r28, r24
    5796:	f7 fa       	bst	r15, 7
     number = -number;
    5798:	f0 94       	com	r15
    579a:	f7 f8       	bld	r15, 7
    579c:	f0 94       	com	r15
    579e:	02 c0       	rjmp	.+4      	; 0x57a4 <_ZN5Print10printFloatEdh+0xd4>
    57a0:	c0 e0       	ldi	r28, 0x00	; 0
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    57a2:	d0 e0       	ldi	r29, 0x00	; 0
    57a4:	b1 2c       	mov	r11, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    57a6:	60 e0       	ldi	r22, 0x00	; 0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    57a8:	70 e0       	ldi	r23, 0x00	; 0
    57aa:	80 e0       	ldi	r24, 0x00	; 0
    57ac:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    57ae:	7b 14       	cp	r7, r11
    57b0:	39 f0       	breq	.+14     	; 0x57c0 <_ZN5Print10printFloatEdh+0xf0>
    rounding /= 10.0;
    57b2:	20 e0       	ldi	r18, 0x00	; 0
    57b4:	30 e0       	ldi	r19, 0x00	; 0
    57b6:	40 e2       	ldi	r20, 0x20	; 32
    57b8:	51 e4       	ldi	r21, 0x41	; 65
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    57ba:	37 da       	rcall	.-2962   	; 0x4c2a <__divsf3>
    57bc:	b3 94       	inc	r11
    rounding /= 10.0;
  
  number += rounding;
    57be:	f7 cf       	rjmp	.-18     	; 0x57ae <_ZN5Print10printFloatEdh+0xde>
    57c0:	a7 01       	movw	r20, r14
    57c2:	96 01       	movw	r18, r12
    57c4:	ca d9       	rcall	.-3180   	; 0x4b5a <__addsf3>
    57c6:	6b 01       	movw	r12, r22

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    57c8:	7c 01       	movw	r14, r24
    57ca:	97 da       	rcall	.-2770   	; 0x4cfa <__fixunssfsi>
    57cc:	4b 01       	movw	r8, r22
    57ce:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    57d0:	2a e0       	ldi	r18, 0x0A	; 10
    57d2:	ab 01       	movw	r20, r22
    57d4:	bc 01       	movw	r22, r24
    57d6:	c8 01       	movw	r24, r16
    57d8:	c8 de       	rcall	.-624    	; 0x556a <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    57da:	c8 0f       	add	r28, r24
    57dc:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    57de:	77 20       	and	r7, r7
    57e0:	79 f1       	breq	.+94     	; 0x5840 <_ZN5Print10printFloatEdh+0x170>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    57e2:	c5 01       	movw	r24, r10
    57e4:	b4 01       	movw	r22, r8
    57e6:	b5 da       	rcall	.-2710   	; 0x4d52 <__floatunsisf>
    57e8:	9b 01       	movw	r18, r22
    57ea:	ac 01       	movw	r20, r24
    57ec:	c7 01       	movw	r24, r14
    57ee:	b6 01       	movw	r22, r12
    57f0:	b3 d9       	rcall	.-3226   	; 0x4b58 <__subsf3>
    57f2:	6b 01       	movw	r12, r22
    57f4:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    57f6:	6e e2       	ldi	r22, 0x2E	; 46
    57f8:	c8 01       	movw	r24, r16
    57fa:	8d de       	rcall	.-742    	; 0x5516 <_ZN5Print5printEc>
    57fc:	c8 0f       	add	r28, r24
    57fe:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    5800:	20 e0       	ldi	r18, 0x00	; 0
    5802:	30 e0       	ldi	r19, 0x00	; 0
    5804:	40 e2       	ldi	r20, 0x20	; 32
    5806:	51 e4       	ldi	r21, 0x41	; 65
    5808:	c7 01       	movw	r24, r14
    580a:	b6 01       	movw	r22, r12
    580c:	58 db       	rcall	.-2384   	; 0x4ebe <__mulsf3>
    580e:	4b 01       	movw	r8, r22
    unsigned int toPrint = (unsigned int)(remainder);
    5810:	5c 01       	movw	r10, r24
    5812:	73 da       	rcall	.-2842   	; 0x4cfa <__fixunssfsi>
    5814:	6b 01       	movw	r12, r22
    n += print(toPrint);
    5816:	7c 01       	movw	r14, r24
    5818:	4a e0       	ldi	r20, 0x0A	; 10
    581a:	50 e0       	ldi	r21, 0x00	; 0
    581c:	c8 01       	movw	r24, r16
    581e:	f8 de       	rcall	.-528    	; 0x5610 <_ZN5Print5printEji>
    5820:	c8 0f       	add	r28, r24
    5822:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    5824:	b6 01       	movw	r22, r12
    5826:	80 e0       	ldi	r24, 0x00	; 0
    5828:	90 e0       	ldi	r25, 0x00	; 0
    582a:	93 da       	rcall	.-2778   	; 0x4d52 <__floatunsisf>
    582c:	9b 01       	movw	r18, r22
    582e:	ac 01       	movw	r20, r24
    5830:	c5 01       	movw	r24, r10
    5832:	b4 01       	movw	r22, r8
    5834:	91 d9       	rcall	.-3294   	; 0x4b58 <__subsf3>
    5836:	6b 01       	movw	r12, r22
    5838:	7c 01       	movw	r14, r24
    583a:	7a 94       	dec	r7
    583c:	71 10       	cpse	r7, r1
    583e:	e0 cf       	rjmp	.-64     	; 0x5800 <_ZN5Print10printFloatEdh+0x130>
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    5840:	ce 01       	movw	r24, r28
    5842:	df 91       	pop	r29
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    5844:	cf 91       	pop	r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    5846:	1f 91       	pop	r17
    5848:	0f 91       	pop	r16
    584a:	ff 90       	pop	r15
    584c:	ef 90       	pop	r14
    584e:	df 90       	pop	r13
    5850:	cf 90       	pop	r12
    5852:	bf 90       	pop	r11
    5854:	af 90       	pop	r10
    5856:	9f 90       	pop	r9
    5858:	8f 90       	pop	r8
    585a:	7f 90       	pop	r7
    585c:	08 95       	ret

0000585e <_ZN5Print5printEdi>:
    585e:	38 cf       	rjmp	.-400    	; 0x56d0 <_ZN5Print10printFloatEdh>

00005860 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    5860:	1f 92       	push	r1
    5862:	0f 92       	push	r0
    5864:	0f b6       	in	r0, 0x3f	; 63
    5866:	0f 92       	push	r0
    5868:	11 24       	eor	r1, r1
    586a:	2f 93       	push	r18
    586c:	3f 93       	push	r19
    586e:	8f 93       	push	r24
    5870:	9f 93       	push	r25
    5872:	af 93       	push	r26
    5874:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    5876:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <timer0_millis>
    587a:	90 91 ec 06 	lds	r25, 0x06EC	; 0x8006ec <timer0_millis+0x1>
    587e:	a0 91 ed 06 	lds	r26, 0x06ED	; 0x8006ed <timer0_millis+0x2>
    5882:	b0 91 ee 06 	lds	r27, 0x06EE	; 0x8006ee <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    5886:	30 91 ea 06 	lds	r19, 0x06EA	; 0x8006ea <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    588a:	23 e0       	ldi	r18, 0x03	; 3
    588c:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    588e:	2d 37       	cpi	r18, 0x7D	; 125
    5890:	20 f4       	brcc	.+8      	; 0x589a <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    5892:	01 96       	adiw	r24, 0x01	; 1
    5894:	a1 1d       	adc	r26, r1
    5896:	b1 1d       	adc	r27, r1
    5898:	05 c0       	rjmp	.+10     	; 0x58a4 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    589a:	26 e8       	ldi	r18, 0x86	; 134
    589c:	23 0f       	add	r18, r19
		m += 1;
    589e:	02 96       	adiw	r24, 0x02	; 2
    58a0:	a1 1d       	adc	r26, r1
    58a2:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    58a4:	20 93 ea 06 	sts	0x06EA, r18	; 0x8006ea <timer0_fract>
	timer0_millis = m;
    58a8:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <timer0_millis>
    58ac:	90 93 ec 06 	sts	0x06EC, r25	; 0x8006ec <timer0_millis+0x1>
    58b0:	a0 93 ed 06 	sts	0x06ED, r26	; 0x8006ed <timer0_millis+0x2>
    58b4:	b0 93 ee 06 	sts	0x06EE, r27	; 0x8006ee <timer0_millis+0x3>
	timer0_overflow_count++;
    58b8:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <timer0_overflow_count>
    58bc:	90 91 f0 06 	lds	r25, 0x06F0	; 0x8006f0 <timer0_overflow_count+0x1>
    58c0:	a0 91 f1 06 	lds	r26, 0x06F1	; 0x8006f1 <timer0_overflow_count+0x2>
    58c4:	b0 91 f2 06 	lds	r27, 0x06F2	; 0x8006f2 <timer0_overflow_count+0x3>
    58c8:	01 96       	adiw	r24, 0x01	; 1
    58ca:	a1 1d       	adc	r26, r1
    58cc:	b1 1d       	adc	r27, r1
    58ce:	80 93 ef 06 	sts	0x06EF, r24	; 0x8006ef <timer0_overflow_count>
    58d2:	90 93 f0 06 	sts	0x06F0, r25	; 0x8006f0 <timer0_overflow_count+0x1>
    58d6:	a0 93 f1 06 	sts	0x06F1, r26	; 0x8006f1 <timer0_overflow_count+0x2>
    58da:	b0 93 f2 06 	sts	0x06F2, r27	; 0x8006f2 <timer0_overflow_count+0x3>
}
    58de:	bf 91       	pop	r27
    58e0:	af 91       	pop	r26
    58e2:	9f 91       	pop	r25
    58e4:	8f 91       	pop	r24
    58e6:	3f 91       	pop	r19
    58e8:	2f 91       	pop	r18
    58ea:	0f 90       	pop	r0
    58ec:	0f be       	out	0x3f, r0	; 63
    58ee:	0f 90       	pop	r0
    58f0:	1f 90       	pop	r1
    58f2:	18 95       	reti

000058f4 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    58f4:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    58f6:	f8 94       	cli
	m = timer0_millis;
    58f8:	60 91 eb 06 	lds	r22, 0x06EB	; 0x8006eb <timer0_millis>
    58fc:	70 91 ec 06 	lds	r23, 0x06EC	; 0x8006ec <timer0_millis+0x1>
    5900:	80 91 ed 06 	lds	r24, 0x06ED	; 0x8006ed <timer0_millis+0x2>
    5904:	90 91 ee 06 	lds	r25, 0x06EE	; 0x8006ee <timer0_millis+0x3>
	SREG = oldSREG;
    5908:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    590a:	08 95       	ret

0000590c <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    590c:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    590e:	f8 94       	cli
	m = timer0_overflow_count;
    5910:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <timer0_overflow_count>
    5914:	90 91 f0 06 	lds	r25, 0x06F0	; 0x8006f0 <timer0_overflow_count+0x1>
    5918:	a0 91 f1 06 	lds	r26, 0x06F1	; 0x8006f1 <timer0_overflow_count+0x2>
    591c:	b0 91 f2 06 	lds	r27, 0x06F2	; 0x8006f2 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    5920:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5922:	a8 9b       	sbis	0x15, 0	; 21
    5924:	05 c0       	rjmp	.+10     	; 0x5930 <micros+0x24>
    5926:	2f 3f       	cpi	r18, 0xFF	; 255
    5928:	19 f0       	breq	.+6      	; 0x5930 <micros+0x24>
		m++;
    592a:	01 96       	adiw	r24, 0x01	; 1
    592c:	a1 1d       	adc	r26, r1
    592e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    5930:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    5932:	ba 2f       	mov	r27, r26
    5934:	a9 2f       	mov	r26, r25
    5936:	98 2f       	mov	r25, r24
    5938:	88 27       	eor	r24, r24
    593a:	82 0f       	add	r24, r18
    593c:	91 1d       	adc	r25, r1
    593e:	a1 1d       	adc	r26, r1
    5940:	b1 1d       	adc	r27, r1
    5942:	bc 01       	movw	r22, r24
    5944:	cd 01       	movw	r24, r26
    5946:	42 e0       	ldi	r20, 0x02	; 2
    5948:	66 0f       	add	r22, r22
    594a:	77 1f       	adc	r23, r23
    594c:	88 1f       	adc	r24, r24
    594e:	99 1f       	adc	r25, r25
    5950:	4a 95       	dec	r20
    5952:	d1 f7       	brne	.-12     	; 0x5948 <micros+0x3c>
}
    5954:	08 95       	ret

00005956 <delay>:

void delay(unsigned long ms)
{
    5956:	8f 92       	push	r8
    5958:	9f 92       	push	r9
    595a:	af 92       	push	r10
    595c:	bf 92       	push	r11
    595e:	cf 92       	push	r12
    5960:	df 92       	push	r13
    5962:	ef 92       	push	r14
    5964:	ff 92       	push	r15
    5966:	6b 01       	movw	r12, r22
    5968:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    596a:	d0 df       	rcall	.-96     	; 0x590c <micros>
    596c:	4b 01       	movw	r8, r22
    596e:	5c 01       	movw	r10, r24

	while (ms > 0) {
    5970:	c1 14       	cp	r12, r1
    5972:	d1 04       	cpc	r13, r1
    5974:	e1 04       	cpc	r14, r1
    5976:	f1 04       	cpc	r15, r1
		yield();
    5978:	f1 f0       	breq	.+60     	; 0x59b6 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    597a:	52 d1       	rcall	.+676    	; 0x5c20 <yield>
    597c:	c7 df       	rcall	.-114    	; 0x590c <micros>
    597e:	dc 01       	movw	r26, r24
    5980:	cb 01       	movw	r24, r22
    5982:	88 19       	sub	r24, r8
    5984:	99 09       	sbc	r25, r9
    5986:	aa 09       	sbc	r26, r10
    5988:	bb 09       	sbc	r27, r11
    598a:	88 3e       	cpi	r24, 0xE8	; 232
    598c:	93 40       	sbci	r25, 0x03	; 3
    598e:	a1 05       	cpc	r26, r1
    5990:	b1 05       	cpc	r27, r1
    5992:	70 f3       	brcs	.-36     	; 0x5970 <delay+0x1a>
			ms--;
    5994:	21 e0       	ldi	r18, 0x01	; 1
    5996:	c2 1a       	sub	r12, r18
    5998:	d1 08       	sbc	r13, r1
    599a:	e1 08       	sbc	r14, r1
    599c:	f1 08       	sbc	r15, r1
			start += 1000;
    599e:	88 ee       	ldi	r24, 0xE8	; 232
    59a0:	88 0e       	add	r8, r24
    59a2:	83 e0       	ldi	r24, 0x03	; 3
    59a4:	98 1e       	adc	r9, r24
    59a6:	a1 1c       	adc	r10, r1
    59a8:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    59aa:	c1 14       	cp	r12, r1
    59ac:	d1 04       	cpc	r13, r1
    59ae:	e1 04       	cpc	r14, r1
    59b0:	f1 04       	cpc	r15, r1
    59b2:	21 f7       	brne	.-56     	; 0x597c <delay+0x26>
    59b4:	dd cf       	rjmp	.-70     	; 0x5970 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    59b6:	ff 90       	pop	r15
    59b8:	ef 90       	pop	r14
    59ba:	df 90       	pop	r13
    59bc:	cf 90       	pop	r12
    59be:	bf 90       	pop	r11
    59c0:	af 90       	pop	r10
    59c2:	9f 90       	pop	r9
    59c4:	8f 90       	pop	r8
    59c6:	08 95       	ret

000059c8 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    59c8:	82 30       	cpi	r24, 0x02	; 2
    59ca:	91 05       	cpc	r25, r1
    59cc:	38 f0       	brcs	.+14     	; 0x59dc <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    59ce:	88 0f       	add	r24, r24
    59d0:	99 1f       	adc	r25, r25
    59d2:	88 0f       	add	r24, r24
    59d4:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    59d6:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    59d8:	01 97       	sbiw	r24, 0x01	; 1
    59da:	f1 f7       	brne	.-4      	; 0x59d8 <delayMicroseconds+0x10>
    59dc:	08 95       	ret

000059de <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    59de:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    59e0:	84 b5       	in	r24, 0x24	; 36
    59e2:	82 60       	ori	r24, 0x02	; 2
    59e4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    59e6:	84 b5       	in	r24, 0x24	; 36
    59e8:	81 60       	ori	r24, 0x01	; 1
    59ea:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    59ec:	85 b5       	in	r24, 0x25	; 37
    59ee:	82 60       	ori	r24, 0x02	; 2
    59f0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    59f2:	85 b5       	in	r24, 0x25	; 37
    59f4:	81 60       	ori	r24, 0x01	; 1
    59f6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    59f8:	ee e6       	ldi	r30, 0x6E	; 110
    59fa:	f0 e0       	ldi	r31, 0x00	; 0
    59fc:	80 81       	ld	r24, Z
    59fe:	81 60       	ori	r24, 0x01	; 1
    5a00:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    5a02:	e1 e8       	ldi	r30, 0x81	; 129
    5a04:	f0 e0       	ldi	r31, 0x00	; 0
    5a06:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    5a08:	80 81       	ld	r24, Z
    5a0a:	82 60       	ori	r24, 0x02	; 2
    5a0c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    5a0e:	80 81       	ld	r24, Z
    5a10:	81 60       	ori	r24, 0x01	; 1
    5a12:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    5a14:	e0 e8       	ldi	r30, 0x80	; 128
    5a16:	f0 e0       	ldi	r31, 0x00	; 0
    5a18:	80 81       	ld	r24, Z
    5a1a:	81 60       	ori	r24, 0x01	; 1
    5a1c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    5a1e:	e1 eb       	ldi	r30, 0xB1	; 177
    5a20:	f0 e0       	ldi	r31, 0x00	; 0
    5a22:	80 81       	ld	r24, Z
    5a24:	84 60       	ori	r24, 0x04	; 4
    5a26:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    5a28:	e0 eb       	ldi	r30, 0xB0	; 176
    5a2a:	f0 e0       	ldi	r31, 0x00	; 0
    5a2c:	80 81       	ld	r24, Z
    5a2e:	81 60       	ori	r24, 0x01	; 1
    5a30:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    5a32:	e1 e9       	ldi	r30, 0x91	; 145
    5a34:	f0 e0       	ldi	r31, 0x00	; 0
    5a36:	80 81       	ld	r24, Z
    5a38:	82 60       	ori	r24, 0x02	; 2
    5a3a:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    5a3c:	80 81       	ld	r24, Z
    5a3e:	81 60       	ori	r24, 0x01	; 1
    5a40:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    5a42:	e0 e9       	ldi	r30, 0x90	; 144
    5a44:	f0 e0       	ldi	r31, 0x00	; 0
    5a46:	80 81       	ld	r24, Z
    5a48:	81 60       	ori	r24, 0x01	; 1
    5a4a:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    5a4c:	e1 ea       	ldi	r30, 0xA1	; 161
    5a4e:	f0 e0       	ldi	r31, 0x00	; 0
    5a50:	80 81       	ld	r24, Z
    5a52:	82 60       	ori	r24, 0x02	; 2
    5a54:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    5a56:	80 81       	ld	r24, Z
    5a58:	81 60       	ori	r24, 0x01	; 1
    5a5a:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    5a5c:	e0 ea       	ldi	r30, 0xA0	; 160
    5a5e:	f0 e0       	ldi	r31, 0x00	; 0
    5a60:	80 81       	ld	r24, Z
    5a62:	81 60       	ori	r24, 0x01	; 1
    5a64:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    5a66:	e1 e2       	ldi	r30, 0x21	; 33
    5a68:	f1 e0       	ldi	r31, 0x01	; 1
    5a6a:	80 81       	ld	r24, Z
    5a6c:	82 60       	ori	r24, 0x02	; 2
    5a6e:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    5a70:	80 81       	ld	r24, Z
    5a72:	81 60       	ori	r24, 0x01	; 1
    5a74:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    5a76:	e0 e2       	ldi	r30, 0x20	; 32
    5a78:	f1 e0       	ldi	r31, 0x01	; 1
    5a7a:	80 81       	ld	r24, Z
    5a7c:	81 60       	ori	r24, 0x01	; 1
    5a7e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    5a80:	ea e7       	ldi	r30, 0x7A	; 122
    5a82:	f0 e0       	ldi	r31, 0x00	; 0
    5a84:	80 81       	ld	r24, Z
    5a86:	84 60       	ori	r24, 0x04	; 4
    5a88:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    5a8a:	80 81       	ld	r24, Z
    5a8c:	82 60       	ori	r24, 0x02	; 2
    5a8e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    5a90:	80 81       	ld	r24, Z
    5a92:	81 60       	ori	r24, 0x01	; 1
    5a94:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    5a96:	80 81       	ld	r24, Z
    5a98:	80 68       	ori	r24, 0x80	; 128
    5a9a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    5a9c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    5aa0:	08 95       	ret

00005aa2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    5aa2:	90 e0       	ldi	r25, 0x00	; 0
    5aa4:	fc 01       	movw	r30, r24
    5aa6:	31 97       	sbiw	r30, 0x01	; 1
    5aa8:	e2 31       	cpi	r30, 0x12	; 18
    5aaa:	f1 05       	cpc	r31, r1
    5aac:	08 f0       	brcs	.+2      	; 0x5ab0 <turnOffPWM+0xe>
    5aae:	4d c0       	rjmp	.+154    	; 0x5b4a <turnOffPWM+0xa8>
    5ab0:	88 27       	eor	r24, r24
    5ab2:	e3 57       	subi	r30, 0x73	; 115
    5ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ab6:	8f 4f       	sbci	r24, 0xFF	; 255
    5ab8:	fa c0       	rjmp	.+500    	; 0x5cae <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    5aba:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5abe:	8f 77       	andi	r24, 0x7F	; 127
    5ac0:	03 c0       	rjmp	.+6      	; 0x5ac8 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5ac2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5ac6:	8f 7d       	andi	r24, 0xDF	; 223
    5ac8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5acc:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    5ace:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    5ad2:	87 7f       	andi	r24, 0xF7	; 247
    5ad4:	f9 cf       	rjmp	.-14     	; 0x5ac8 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    5ad6:	84 b5       	in	r24, 0x24	; 36
    5ad8:	8f 77       	andi	r24, 0x7F	; 127
    5ada:	02 c0       	rjmp	.+4      	; 0x5ae0 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    5adc:	84 b5       	in	r24, 0x24	; 36
    5ade:	8f 7d       	andi	r24, 0xDF	; 223
    5ae0:	84 bd       	out	0x24, r24	; 36
    5ae2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    5ae4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    5ae8:	8f 77       	andi	r24, 0x7F	; 127
    5aea:	03 c0       	rjmp	.+6      	; 0x5af2 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    5aec:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    5af0:	8f 7d       	andi	r24, 0xDF	; 223
    5af2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    5af6:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    5af8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5afc:	8f 77       	andi	r24, 0x7F	; 127
    5afe:	07 c0       	rjmp	.+14     	; 0x5b0e <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    5b00:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5b04:	8f 7d       	andi	r24, 0xDF	; 223
    5b06:	03 c0       	rjmp	.+6      	; 0x5b0e <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    5b08:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5b0c:	87 7f       	andi	r24, 0xF7	; 247
    5b0e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    5b12:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    5b14:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    5b18:	8f 77       	andi	r24, 0x7F	; 127
    5b1a:	07 c0       	rjmp	.+14     	; 0x5b2a <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    5b1c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    5b20:	8f 7d       	andi	r24, 0xDF	; 223
    5b22:	03 c0       	rjmp	.+6      	; 0x5b2a <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    5b24:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    5b28:	87 7f       	andi	r24, 0xF7	; 247
    5b2a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    5b2e:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    5b30:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    5b34:	8f 77       	andi	r24, 0x7F	; 127
    5b36:	07 c0       	rjmp	.+14     	; 0x5b46 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    5b38:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    5b3c:	8f 7d       	andi	r24, 0xDF	; 223
    5b3e:	03 c0       	rjmp	.+6      	; 0x5b46 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    5b40:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    5b44:	87 7f       	andi	r24, 0xF7	; 247
    5b46:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    5b4a:	08 95       	ret

00005b4c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    5b4c:	cf 93       	push	r28
    5b4e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    5b50:	90 e0       	ldi	r25, 0x00	; 0
    5b52:	fc 01       	movw	r30, r24
    5b54:	e0 57       	subi	r30, 0x70	; 112
    5b56:	f4 4f       	sbci	r31, 0xF4	; 244
    5b58:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    5b5a:	fc 01       	movw	r30, r24
    5b5c:	ea 52       	subi	r30, 0x2A	; 42
    5b5e:	f4 4f       	sbci	r31, 0xF4	; 244
    5b60:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    5b62:	88 23       	and	r24, r24
    5b64:	61 f1       	breq	.+88     	; 0x5bbe <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    5b66:	90 e0       	ldi	r25, 0x00	; 0
    5b68:	88 0f       	add	r24, r24
    5b6a:	99 1f       	adc	r25, r25
    5b6c:	fc 01       	movw	r30, r24
    5b6e:	e0 5b       	subi	r30, 0xB0	; 176
    5b70:	f3 4f       	sbci	r31, 0xF3	; 243
    5b72:	c5 91       	lpm	r28, Z+
    5b74:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    5b76:	fc 01       	movw	r30, r24
    5b78:	ea 5c       	subi	r30, 0xCA	; 202
    5b7a:	f3 4f       	sbci	r31, 0xF3	; 243
    5b7c:	a5 91       	lpm	r26, Z+
    5b7e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    5b80:	61 11       	cpse	r22, r1
    5b82:	09 c0       	rjmp	.+18     	; 0x5b96 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    5b84:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5b86:	f8 94       	cli
		*reg &= ~bit;
    5b88:	88 81       	ld	r24, Y
    5b8a:	20 95       	com	r18
    5b8c:	82 23       	and	r24, r18
    5b8e:	88 83       	st	Y, r24
		*out &= ~bit;
    5b90:	ec 91       	ld	r30, X
    5b92:	2e 23       	and	r18, r30
    5b94:	0b c0       	rjmp	.+22     	; 0x5bac <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    5b96:	62 30       	cpi	r22, 0x02	; 2
    5b98:	61 f4       	brne	.+24     	; 0x5bb2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    5b9a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5b9c:	f8 94       	cli
		*reg &= ~bit;
    5b9e:	88 81       	ld	r24, Y
    5ba0:	32 2f       	mov	r19, r18
    5ba2:	30 95       	com	r19
    5ba4:	83 23       	and	r24, r19
    5ba6:	88 83       	st	Y, r24
		*out |= bit;
    5ba8:	ec 91       	ld	r30, X
    5baa:	2e 2b       	or	r18, r30
    5bac:	2c 93       	st	X, r18
		SREG = oldSREG;
    5bae:	9f bf       	out	0x3f, r25	; 63
    5bb0:	06 c0       	rjmp	.+12     	; 0x5bbe <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    5bb2:	8f b7       	in	r24, 0x3f	; 63
                cli();
    5bb4:	f8 94       	cli
		*reg |= bit;
    5bb6:	e8 81       	ld	r30, Y
    5bb8:	2e 2b       	or	r18, r30
    5bba:	28 83       	st	Y, r18
		SREG = oldSREG;
    5bbc:	8f bf       	out	0x3f, r24	; 63
	}
}
    5bbe:	df 91       	pop	r29
    5bc0:	cf 91       	pop	r28
    5bc2:	08 95       	ret

00005bc4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    5bc4:	1f 93       	push	r17
    5bc6:	cf 93       	push	r28
    5bc8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    5bca:	28 2f       	mov	r18, r24
    5bcc:	30 e0       	ldi	r19, 0x00	; 0
    5bce:	f9 01       	movw	r30, r18
    5bd0:	e6 5b       	subi	r30, 0xB6	; 182
    5bd2:	f4 4f       	sbci	r31, 0xF4	; 244
    5bd4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    5bd6:	f9 01       	movw	r30, r18
    5bd8:	e0 57       	subi	r30, 0x70	; 112
    5bda:	f4 4f       	sbci	r31, 0xF4	; 244
    5bdc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    5bde:	f9 01       	movw	r30, r18
    5be0:	ea 52       	subi	r30, 0x2A	; 42
    5be2:	f4 4f       	sbci	r31, 0xF4	; 244
    5be4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    5be6:	cc 23       	and	r28, r28
    5be8:	b9 f0       	breq	.+46     	; 0x5c18 <digitalWrite+0x54>
    5bea:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5bec:	81 11       	cpse	r24, r1
    5bee:	59 df       	rcall	.-334    	; 0x5aa2 <turnOffPWM>

	out = portOutputRegister(port);
    5bf0:	ec 2f       	mov	r30, r28
    5bf2:	f0 e0       	ldi	r31, 0x00	; 0
    5bf4:	ee 0f       	add	r30, r30
    5bf6:	ff 1f       	adc	r31, r31
    5bf8:	ea 5c       	subi	r30, 0xCA	; 202
    5bfa:	f3 4f       	sbci	r31, 0xF3	; 243
    5bfc:	a5 91       	lpm	r26, Z+
    5bfe:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    5c00:	9f b7       	in	r25, 0x3f	; 63
	cli();
    5c02:	f8 94       	cli

	if (val == LOW) {
    5c04:	11 11       	cpse	r17, r1
    5c06:	04 c0       	rjmp	.+8      	; 0x5c10 <digitalWrite+0x4c>
		*out &= ~bit;
    5c08:	8c 91       	ld	r24, X
    5c0a:	d0 95       	com	r29
    5c0c:	d8 23       	and	r29, r24
    5c0e:	02 c0       	rjmp	.+4      	; 0x5c14 <digitalWrite+0x50>
	} else {
		*out |= bit;
    5c10:	ec 91       	ld	r30, X
    5c12:	de 2b       	or	r29, r30
    5c14:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    5c16:	9f bf       	out	0x3f, r25	; 63
}
    5c18:	df 91       	pop	r29
    5c1a:	cf 91       	pop	r28
    5c1c:	1f 91       	pop	r17
    5c1e:	08 95       	ret

00005c20 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    5c20:	08 95       	ret

00005c22 <__unordsf2>:
    5c22:	d4 d8       	rcall	.-3672   	; 0x4dcc <__fp_cmp>
    5c24:	88 0b       	sbc	r24, r24
    5c26:	99 0b       	sbc	r25, r25
    5c28:	08 95       	ret

00005c2a <__udivmodqi4>:
    5c2a:	99 1b       	sub	r25, r25
    5c2c:	79 e0       	ldi	r23, 0x09	; 9
    5c2e:	04 c0       	rjmp	.+8      	; 0x5c38 <__udivmodqi4_ep>

00005c30 <__udivmodqi4_loop>:
    5c30:	99 1f       	adc	r25, r25
    5c32:	96 17       	cp	r25, r22
    5c34:	08 f0       	brcs	.+2      	; 0x5c38 <__udivmodqi4_ep>
    5c36:	96 1b       	sub	r25, r22

00005c38 <__udivmodqi4_ep>:
    5c38:	88 1f       	adc	r24, r24
    5c3a:	7a 95       	dec	r23
    5c3c:	c9 f7       	brne	.-14     	; 0x5c30 <__udivmodqi4_loop>
    5c3e:	80 95       	com	r24
    5c40:	08 95       	ret

00005c42 <__udivmodhi4>:
    5c42:	aa 1b       	sub	r26, r26
    5c44:	bb 1b       	sub	r27, r27
    5c46:	51 e1       	ldi	r21, 0x11	; 17
    5c48:	07 c0       	rjmp	.+14     	; 0x5c58 <__udivmodhi4_ep>

00005c4a <__udivmodhi4_loop>:
    5c4a:	aa 1f       	adc	r26, r26
    5c4c:	bb 1f       	adc	r27, r27
    5c4e:	a6 17       	cp	r26, r22
    5c50:	b7 07       	cpc	r27, r23
    5c52:	10 f0       	brcs	.+4      	; 0x5c58 <__udivmodhi4_ep>
    5c54:	a6 1b       	sub	r26, r22
    5c56:	b7 0b       	sbc	r27, r23

00005c58 <__udivmodhi4_ep>:
    5c58:	88 1f       	adc	r24, r24
    5c5a:	99 1f       	adc	r25, r25
    5c5c:	5a 95       	dec	r21
    5c5e:	a9 f7       	brne	.-22     	; 0x5c4a <__udivmodhi4_loop>
    5c60:	80 95       	com	r24
    5c62:	90 95       	com	r25
    5c64:	bc 01       	movw	r22, r24
    5c66:	cd 01       	movw	r24, r26
    5c68:	08 95       	ret

00005c6a <__udivmodsi4>:
    5c6a:	a1 e2       	ldi	r26, 0x21	; 33
    5c6c:	1a 2e       	mov	r1, r26
    5c6e:	aa 1b       	sub	r26, r26
    5c70:	bb 1b       	sub	r27, r27
    5c72:	fd 01       	movw	r30, r26
    5c74:	0d c0       	rjmp	.+26     	; 0x5c90 <__udivmodsi4_ep>

00005c76 <__udivmodsi4_loop>:
    5c76:	aa 1f       	adc	r26, r26
    5c78:	bb 1f       	adc	r27, r27
    5c7a:	ee 1f       	adc	r30, r30
    5c7c:	ff 1f       	adc	r31, r31
    5c7e:	a2 17       	cp	r26, r18
    5c80:	b3 07       	cpc	r27, r19
    5c82:	e4 07       	cpc	r30, r20
    5c84:	f5 07       	cpc	r31, r21
    5c86:	20 f0       	brcs	.+8      	; 0x5c90 <__udivmodsi4_ep>
    5c88:	a2 1b       	sub	r26, r18
    5c8a:	b3 0b       	sbc	r27, r19
    5c8c:	e4 0b       	sbc	r30, r20
    5c8e:	f5 0b       	sbc	r31, r21

00005c90 <__udivmodsi4_ep>:
    5c90:	66 1f       	adc	r22, r22
    5c92:	77 1f       	adc	r23, r23
    5c94:	88 1f       	adc	r24, r24
    5c96:	99 1f       	adc	r25, r25
    5c98:	1a 94       	dec	r1
    5c9a:	69 f7       	brne	.-38     	; 0x5c76 <__udivmodsi4_loop>
    5c9c:	60 95       	com	r22
    5c9e:	70 95       	com	r23
    5ca0:	80 95       	com	r24
    5ca2:	90 95       	com	r25
    5ca4:	9b 01       	movw	r18, r22
    5ca6:	ac 01       	movw	r20, r24
    5ca8:	bd 01       	movw	r22, r26
    5caa:	cf 01       	movw	r24, r30
    5cac:	08 95       	ret

00005cae <__tablejump2__>:
    5cae:	ee 0f       	add	r30, r30
    5cb0:	ff 1f       	adc	r31, r31
    5cb2:	88 1f       	adc	r24, r24
    5cb4:	8b bf       	out	0x3b, r24	; 59
    5cb6:	07 90       	elpm	r0, Z+
    5cb8:	f6 91       	elpm	r31, Z
    5cba:	e0 2d       	mov	r30, r0
    5cbc:	19 94       	eijmp

00005cbe <malloc>:
    5cbe:	0f 93       	push	r16
    5cc0:	1f 93       	push	r17
    5cc2:	cf 93       	push	r28
    5cc4:	df 93       	push	r29
    5cc6:	82 30       	cpi	r24, 0x02	; 2
    5cc8:	91 05       	cpc	r25, r1
    5cca:	10 f4       	brcc	.+4      	; 0x5cd0 <malloc+0x12>
    5ccc:	82 e0       	ldi	r24, 0x02	; 2
    5cce:	90 e0       	ldi	r25, 0x00	; 0
    5cd0:	e0 91 f5 06 	lds	r30, 0x06F5	; 0x8006f5 <__flp>
    5cd4:	f0 91 f6 06 	lds	r31, 0x06F6	; 0x8006f6 <__flp+0x1>
    5cd8:	20 e0       	ldi	r18, 0x00	; 0
    5cda:	30 e0       	ldi	r19, 0x00	; 0
    5cdc:	a0 e0       	ldi	r26, 0x00	; 0
    5cde:	b0 e0       	ldi	r27, 0x00	; 0
    5ce0:	30 97       	sbiw	r30, 0x00	; 0
    5ce2:	19 f1       	breq	.+70     	; 0x5d2a <malloc+0x6c>
    5ce4:	40 81       	ld	r20, Z
    5ce6:	51 81       	ldd	r21, Z+1	; 0x01
    5ce8:	02 81       	ldd	r16, Z+2	; 0x02
    5cea:	13 81       	ldd	r17, Z+3	; 0x03
    5cec:	48 17       	cp	r20, r24
    5cee:	59 07       	cpc	r21, r25
    5cf0:	c8 f0       	brcs	.+50     	; 0x5d24 <malloc+0x66>
    5cf2:	84 17       	cp	r24, r20
    5cf4:	95 07       	cpc	r25, r21
    5cf6:	69 f4       	brne	.+26     	; 0x5d12 <malloc+0x54>
    5cf8:	10 97       	sbiw	r26, 0x00	; 0
    5cfa:	31 f0       	breq	.+12     	; 0x5d08 <malloc+0x4a>
    5cfc:	12 96       	adiw	r26, 0x02	; 2
    5cfe:	0c 93       	st	X, r16
    5d00:	12 97       	sbiw	r26, 0x02	; 2
    5d02:	13 96       	adiw	r26, 0x03	; 3
    5d04:	1c 93       	st	X, r17
    5d06:	27 c0       	rjmp	.+78     	; 0x5d56 <malloc+0x98>
    5d08:	00 93 f5 06 	sts	0x06F5, r16	; 0x8006f5 <__flp>
    5d0c:	10 93 f6 06 	sts	0x06F6, r17	; 0x8006f6 <__flp+0x1>
    5d10:	22 c0       	rjmp	.+68     	; 0x5d56 <malloc+0x98>
    5d12:	21 15       	cp	r18, r1
    5d14:	31 05       	cpc	r19, r1
    5d16:	19 f0       	breq	.+6      	; 0x5d1e <malloc+0x60>
    5d18:	42 17       	cp	r20, r18
    5d1a:	53 07       	cpc	r21, r19
    5d1c:	18 f4       	brcc	.+6      	; 0x5d24 <malloc+0x66>
    5d1e:	9a 01       	movw	r18, r20
    5d20:	bd 01       	movw	r22, r26
    5d22:	ef 01       	movw	r28, r30
    5d24:	df 01       	movw	r26, r30
    5d26:	f8 01       	movw	r30, r16
    5d28:	db cf       	rjmp	.-74     	; 0x5ce0 <malloc+0x22>
    5d2a:	21 15       	cp	r18, r1
    5d2c:	31 05       	cpc	r19, r1
    5d2e:	f9 f0       	breq	.+62     	; 0x5d6e <malloc+0xb0>
    5d30:	28 1b       	sub	r18, r24
    5d32:	39 0b       	sbc	r19, r25
    5d34:	24 30       	cpi	r18, 0x04	; 4
    5d36:	31 05       	cpc	r19, r1
    5d38:	80 f4       	brcc	.+32     	; 0x5d5a <malloc+0x9c>
    5d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    5d3c:	9b 81       	ldd	r25, Y+3	; 0x03
    5d3e:	61 15       	cp	r22, r1
    5d40:	71 05       	cpc	r23, r1
    5d42:	21 f0       	breq	.+8      	; 0x5d4c <malloc+0x8e>
    5d44:	fb 01       	movw	r30, r22
    5d46:	93 83       	std	Z+3, r25	; 0x03
    5d48:	82 83       	std	Z+2, r24	; 0x02
    5d4a:	04 c0       	rjmp	.+8      	; 0x5d54 <malloc+0x96>
    5d4c:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <__flp+0x1>
    5d50:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <__flp>
    5d54:	fe 01       	movw	r30, r28
    5d56:	32 96       	adiw	r30, 0x02	; 2
    5d58:	44 c0       	rjmp	.+136    	; 0x5de2 <malloc+0x124>
    5d5a:	fe 01       	movw	r30, r28
    5d5c:	e2 0f       	add	r30, r18
    5d5e:	f3 1f       	adc	r31, r19
    5d60:	81 93       	st	Z+, r24
    5d62:	91 93       	st	Z+, r25
    5d64:	22 50       	subi	r18, 0x02	; 2
    5d66:	31 09       	sbc	r19, r1
    5d68:	39 83       	std	Y+1, r19	; 0x01
    5d6a:	28 83       	st	Y, r18
    5d6c:	3a c0       	rjmp	.+116    	; 0x5de2 <malloc+0x124>
    5d6e:	20 91 f3 06 	lds	r18, 0x06F3	; 0x8006f3 <__brkval>
    5d72:	30 91 f4 06 	lds	r19, 0x06F4	; 0x8006f4 <__brkval+0x1>
    5d76:	23 2b       	or	r18, r19
    5d78:	41 f4       	brne	.+16     	; 0x5d8a <malloc+0xcc>
    5d7a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5d7e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5d82:	30 93 f4 06 	sts	0x06F4, r19	; 0x8006f4 <__brkval+0x1>
    5d86:	20 93 f3 06 	sts	0x06F3, r18	; 0x8006f3 <__brkval>
    5d8a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5d8e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5d92:	21 15       	cp	r18, r1
    5d94:	31 05       	cpc	r19, r1
    5d96:	41 f4       	brne	.+16     	; 0x5da8 <malloc+0xea>
    5d98:	2d b7       	in	r18, 0x3d	; 61
    5d9a:	3e b7       	in	r19, 0x3e	; 62
    5d9c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5da0:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5da4:	24 1b       	sub	r18, r20
    5da6:	35 0b       	sbc	r19, r21
    5da8:	e0 91 f3 06 	lds	r30, 0x06F3	; 0x8006f3 <__brkval>
    5dac:	f0 91 f4 06 	lds	r31, 0x06F4	; 0x8006f4 <__brkval+0x1>
    5db0:	e2 17       	cp	r30, r18
    5db2:	f3 07       	cpc	r31, r19
    5db4:	a0 f4       	brcc	.+40     	; 0x5dde <malloc+0x120>
    5db6:	2e 1b       	sub	r18, r30
    5db8:	3f 0b       	sbc	r19, r31
    5dba:	28 17       	cp	r18, r24
    5dbc:	39 07       	cpc	r19, r25
    5dbe:	78 f0       	brcs	.+30     	; 0x5dde <malloc+0x120>
    5dc0:	ac 01       	movw	r20, r24
    5dc2:	4e 5f       	subi	r20, 0xFE	; 254
    5dc4:	5f 4f       	sbci	r21, 0xFF	; 255
    5dc6:	24 17       	cp	r18, r20
    5dc8:	35 07       	cpc	r19, r21
    5dca:	48 f0       	brcs	.+18     	; 0x5dde <malloc+0x120>
    5dcc:	4e 0f       	add	r20, r30
    5dce:	5f 1f       	adc	r21, r31
    5dd0:	50 93 f4 06 	sts	0x06F4, r21	; 0x8006f4 <__brkval+0x1>
    5dd4:	40 93 f3 06 	sts	0x06F3, r20	; 0x8006f3 <__brkval>
    5dd8:	81 93       	st	Z+, r24
    5dda:	91 93       	st	Z+, r25
    5ddc:	02 c0       	rjmp	.+4      	; 0x5de2 <malloc+0x124>
    5dde:	e0 e0       	ldi	r30, 0x00	; 0
    5de0:	f0 e0       	ldi	r31, 0x00	; 0
    5de2:	cf 01       	movw	r24, r30
    5de4:	df 91       	pop	r29
    5de6:	cf 91       	pop	r28
    5de8:	1f 91       	pop	r17
    5dea:	0f 91       	pop	r16
    5dec:	08 95       	ret

00005dee <free>:
    5dee:	cf 93       	push	r28
    5df0:	df 93       	push	r29
    5df2:	00 97       	sbiw	r24, 0x00	; 0
    5df4:	09 f4       	brne	.+2      	; 0x5df8 <free+0xa>
    5df6:	81 c0       	rjmp	.+258    	; 0x5efa <free+0x10c>
    5df8:	fc 01       	movw	r30, r24
    5dfa:	32 97       	sbiw	r30, 0x02	; 2
    5dfc:	13 82       	std	Z+3, r1	; 0x03
    5dfe:	12 82       	std	Z+2, r1	; 0x02
    5e00:	a0 91 f5 06 	lds	r26, 0x06F5	; 0x8006f5 <__flp>
    5e04:	b0 91 f6 06 	lds	r27, 0x06F6	; 0x8006f6 <__flp+0x1>
    5e08:	10 97       	sbiw	r26, 0x00	; 0
    5e0a:	81 f4       	brne	.+32     	; 0x5e2c <free+0x3e>
    5e0c:	20 81       	ld	r18, Z
    5e0e:	31 81       	ldd	r19, Z+1	; 0x01
    5e10:	82 0f       	add	r24, r18
    5e12:	93 1f       	adc	r25, r19
    5e14:	20 91 f3 06 	lds	r18, 0x06F3	; 0x8006f3 <__brkval>
    5e18:	30 91 f4 06 	lds	r19, 0x06F4	; 0x8006f4 <__brkval+0x1>
    5e1c:	28 17       	cp	r18, r24
    5e1e:	39 07       	cpc	r19, r25
    5e20:	51 f5       	brne	.+84     	; 0x5e76 <free+0x88>
    5e22:	f0 93 f4 06 	sts	0x06F4, r31	; 0x8006f4 <__brkval+0x1>
    5e26:	e0 93 f3 06 	sts	0x06F3, r30	; 0x8006f3 <__brkval>
    5e2a:	67 c0       	rjmp	.+206    	; 0x5efa <free+0x10c>
    5e2c:	ed 01       	movw	r28, r26
    5e2e:	20 e0       	ldi	r18, 0x00	; 0
    5e30:	30 e0       	ldi	r19, 0x00	; 0
    5e32:	ce 17       	cp	r28, r30
    5e34:	df 07       	cpc	r29, r31
    5e36:	40 f4       	brcc	.+16     	; 0x5e48 <free+0x5a>
    5e38:	4a 81       	ldd	r20, Y+2	; 0x02
    5e3a:	5b 81       	ldd	r21, Y+3	; 0x03
    5e3c:	9e 01       	movw	r18, r28
    5e3e:	41 15       	cp	r20, r1
    5e40:	51 05       	cpc	r21, r1
    5e42:	f1 f0       	breq	.+60     	; 0x5e80 <free+0x92>
    5e44:	ea 01       	movw	r28, r20
    5e46:	f5 cf       	rjmp	.-22     	; 0x5e32 <free+0x44>
    5e48:	d3 83       	std	Z+3, r29	; 0x03
    5e4a:	c2 83       	std	Z+2, r28	; 0x02
    5e4c:	40 81       	ld	r20, Z
    5e4e:	51 81       	ldd	r21, Z+1	; 0x01
    5e50:	84 0f       	add	r24, r20
    5e52:	95 1f       	adc	r25, r21
    5e54:	c8 17       	cp	r28, r24
    5e56:	d9 07       	cpc	r29, r25
    5e58:	59 f4       	brne	.+22     	; 0x5e70 <free+0x82>
    5e5a:	88 81       	ld	r24, Y
    5e5c:	99 81       	ldd	r25, Y+1	; 0x01
    5e5e:	84 0f       	add	r24, r20
    5e60:	95 1f       	adc	r25, r21
    5e62:	02 96       	adiw	r24, 0x02	; 2
    5e64:	91 83       	std	Z+1, r25	; 0x01
    5e66:	80 83       	st	Z, r24
    5e68:	8a 81       	ldd	r24, Y+2	; 0x02
    5e6a:	9b 81       	ldd	r25, Y+3	; 0x03
    5e6c:	93 83       	std	Z+3, r25	; 0x03
    5e6e:	82 83       	std	Z+2, r24	; 0x02
    5e70:	21 15       	cp	r18, r1
    5e72:	31 05       	cpc	r19, r1
    5e74:	29 f4       	brne	.+10     	; 0x5e80 <free+0x92>
    5e76:	f0 93 f6 06 	sts	0x06F6, r31	; 0x8006f6 <__flp+0x1>
    5e7a:	e0 93 f5 06 	sts	0x06F5, r30	; 0x8006f5 <__flp>
    5e7e:	3d c0       	rjmp	.+122    	; 0x5efa <free+0x10c>
    5e80:	e9 01       	movw	r28, r18
    5e82:	fb 83       	std	Y+3, r31	; 0x03
    5e84:	ea 83       	std	Y+2, r30	; 0x02
    5e86:	49 91       	ld	r20, Y+
    5e88:	59 91       	ld	r21, Y+
    5e8a:	c4 0f       	add	r28, r20
    5e8c:	d5 1f       	adc	r29, r21
    5e8e:	ec 17       	cp	r30, r28
    5e90:	fd 07       	cpc	r31, r29
    5e92:	61 f4       	brne	.+24     	; 0x5eac <free+0xbe>
    5e94:	80 81       	ld	r24, Z
    5e96:	91 81       	ldd	r25, Z+1	; 0x01
    5e98:	84 0f       	add	r24, r20
    5e9a:	95 1f       	adc	r25, r21
    5e9c:	02 96       	adiw	r24, 0x02	; 2
    5e9e:	e9 01       	movw	r28, r18
    5ea0:	99 83       	std	Y+1, r25	; 0x01
    5ea2:	88 83       	st	Y, r24
    5ea4:	82 81       	ldd	r24, Z+2	; 0x02
    5ea6:	93 81       	ldd	r25, Z+3	; 0x03
    5ea8:	9b 83       	std	Y+3, r25	; 0x03
    5eaa:	8a 83       	std	Y+2, r24	; 0x02
    5eac:	e0 e0       	ldi	r30, 0x00	; 0
    5eae:	f0 e0       	ldi	r31, 0x00	; 0
    5eb0:	12 96       	adiw	r26, 0x02	; 2
    5eb2:	8d 91       	ld	r24, X+
    5eb4:	9c 91       	ld	r25, X
    5eb6:	13 97       	sbiw	r26, 0x03	; 3
    5eb8:	00 97       	sbiw	r24, 0x00	; 0
    5eba:	19 f0       	breq	.+6      	; 0x5ec2 <free+0xd4>
    5ebc:	fd 01       	movw	r30, r26
    5ebe:	dc 01       	movw	r26, r24
    5ec0:	f7 cf       	rjmp	.-18     	; 0x5eb0 <free+0xc2>
    5ec2:	8d 91       	ld	r24, X+
    5ec4:	9c 91       	ld	r25, X
    5ec6:	11 97       	sbiw	r26, 0x01	; 1
    5ec8:	9d 01       	movw	r18, r26
    5eca:	2e 5f       	subi	r18, 0xFE	; 254
    5ecc:	3f 4f       	sbci	r19, 0xFF	; 255
    5ece:	82 0f       	add	r24, r18
    5ed0:	93 1f       	adc	r25, r19
    5ed2:	20 91 f3 06 	lds	r18, 0x06F3	; 0x8006f3 <__brkval>
    5ed6:	30 91 f4 06 	lds	r19, 0x06F4	; 0x8006f4 <__brkval+0x1>
    5eda:	28 17       	cp	r18, r24
    5edc:	39 07       	cpc	r19, r25
    5ede:	69 f4       	brne	.+26     	; 0x5efa <free+0x10c>
    5ee0:	30 97       	sbiw	r30, 0x00	; 0
    5ee2:	29 f4       	brne	.+10     	; 0x5eee <free+0x100>
    5ee4:	10 92 f6 06 	sts	0x06F6, r1	; 0x8006f6 <__flp+0x1>
    5ee8:	10 92 f5 06 	sts	0x06F5, r1	; 0x8006f5 <__flp>
    5eec:	02 c0       	rjmp	.+4      	; 0x5ef2 <free+0x104>
    5eee:	13 82       	std	Z+3, r1	; 0x03
    5ef0:	12 82       	std	Z+2, r1	; 0x02
    5ef2:	b0 93 f4 06 	sts	0x06F4, r27	; 0x8006f4 <__brkval+0x1>
    5ef6:	a0 93 f3 06 	sts	0x06F3, r26	; 0x8006f3 <__brkval>
    5efa:	df 91       	pop	r29
    5efc:	cf 91       	pop	r28
    5efe:	08 95       	ret

00005f00 <abort>:
    5f00:	81 e0       	ldi	r24, 0x01	; 1
    5f02:	90 e0       	ldi	r25, 0x00	; 0
    5f04:	f8 94       	cli
    5f06:	07 c0       	rjmp	.+14     	; 0x5f16 <__do_global_dtors>

00005f08 <memset>:
    5f08:	dc 01       	movw	r26, r24
    5f0a:	01 c0       	rjmp	.+2      	; 0x5f0e <memset+0x6>
    5f0c:	6d 93       	st	X+, r22
    5f0e:	41 50       	subi	r20, 0x01	; 1
    5f10:	50 40       	sbci	r21, 0x00	; 0
    5f12:	e0 f7       	brcc	.-8      	; 0x5f0c <memset+0x4>
    5f14:	08 95       	ret

00005f16 <__do_global_dtors>:
    5f16:	16 e0       	ldi	r17, 0x06	; 6
    5f18:	c8 e3       	ldi	r28, 0x38	; 56
    5f1a:	d6 e0       	ldi	r29, 0x06	; 6
    5f1c:	00 e0       	ldi	r16, 0x00	; 0
    5f1e:	05 c0       	rjmp	.+10     	; 0x5f2a <__do_global_dtors+0x14>
    5f20:	80 2f       	mov	r24, r16
    5f22:	fe 01       	movw	r30, r28
    5f24:	c4 de       	rcall	.-632    	; 0x5cae <__tablejump2__>
    5f26:	21 96       	adiw	r28, 0x01	; 1
    5f28:	01 1d       	adc	r16, r1
    5f2a:	c9 33       	cpi	r28, 0x39	; 57
    5f2c:	d1 07       	cpc	r29, r17
    5f2e:	80 e0       	ldi	r24, 0x00	; 0
    5f30:	08 07       	cpc	r16, r24
    5f32:	b1 f7       	brne	.-20     	; 0x5f20 <__do_global_dtors+0xa>
    5f34:	f8 94       	cli

00005f36 <__stop_program>:
    5f36:	ff cf       	rjmp	.-2      	; 0x5f36 <__stop_program>
